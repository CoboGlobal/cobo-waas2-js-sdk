/**
 * Cobo Wallet as a Service 2.0
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import {ApiClient, Env} from "../../src/index.js";

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CoboWaas2JsApi);
  }
}(this, function(expect, CoboWaas2JsApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    var apiClient = new ApiClient()
    apiClient.setEnv(new Env("https://api.sandbox.cobo.com/v2"));
    apiClient.setPrivateKey("Your private key in hex format without 0x prefix");
    instance = new CoboWaas2JsApi.DevelopersWebhooksApi(apiClient);
  });

  describe('DevelopersWebhooksApi', function() {
    describe('createWebhookEndpoint', function() {
      it('should call createWebhookEndpoint successfully', function() {
        //uncomment below and update the code to test createWebhookEndpoint
        //instance.createWebhookEndpoint().then(function(data) {
        //    console.log(data);
        //}, function(error) {
        //    console.error(error);
        //});
      });
    });
    describe('getWebhookEndpointById', function() {
      it('should call getWebhookEndpointById successfully', function() {
        //uncomment below and update the code to test getWebhookEndpointById
        //instance.getWebhookEndpointById().then(function(data) {
        //    console.log(data);
        //}, function(error) {
        //    console.error(error);
        //});
      });
    });
    describe('getWebhookEvent', function() {
      it('should call getWebhookEvent successfully', function() {
        //uncomment below and update the code to test getWebhookEvent
        //instance.getWebhookEvent().then(function(data) {
        //    console.log(data);
        //}, function(error) {
        //    console.error(error);
        //});
      });
    });
    describe('getWebhookEventLogs', function() {
      it('should call getWebhookEventLogs successfully', function() {
        //uncomment below and update the code to test getWebhookEventLogs
        //instance.getWebhookEventLogs().then(function(data) {
        //    console.log(data);
        //}, function(error) {
        //    console.error(error);
        //});
      });
    });
    describe('listEvents', function() {
      it('should call listEvents successfully', function() {
        //uncomment below and update the code to test listEvents
        //instance.listEvents().then(function(data) {
        //    console.log(data);
        //}, function(error) {
        //    console.error(error);
        //});
      });
    });
    describe('listWebhookEndpoints', function() {
      it('should call listWebhookEndpoints successfully', function() {
        //uncomment below and update the code to test listWebhookEndpoints
        //instance.listWebhookEndpoints().then(function(data) {
        //    console.log(data);
        //}, function(error) {
        //    console.error(error);
        //});
      });
    });
    describe('listWebhookEventDefinitions', function() {
      it('should call listWebhookEventDefinitions successfully', function() {
        //uncomment below and update the code to test listWebhookEventDefinitions
        //instance.listWebhookEventDefinitions().then(function(data) {
        //    console.log(data);
        //}, function(error) {
        //    console.error(error);
        //});
      });
    });
    describe('retryWebhookEvent', function() {
      it('should call retryWebhookEvent successfully', function() {
        //uncomment below and update the code to test retryWebhookEvent
        //instance.retryWebhookEvent().then(function(data) {
        //    console.log(data);
        //}, function(error) {
        //    console.error(error);
        //});
      });
    });
    describe('updateWebhookEndpoint', function() {
      it('should call updateWebhookEndpoint successfully', function() {
        //uncomment below and update the code to test updateWebhookEndpoint
        //instance.updateWebhookEndpoint().then(function(data) {
        //    console.log(data);
        //}, function(error) {
        //    console.error(error);
        //});
      });
    });
  });

}));
