/**
 * Cobo Wallet as a Service 2.0
 * Cobo WaaS 2.0 enables you to programmatically access Cobo's full suite of crypto wallet technologies with powerful and flexible access controls.  # Wallet technologies - Custodial Wallet - MPC Wallet - Smart Contract Wallet (Based on Safe{Wallet}) - Exchange Wallet  # Risk Control technologies - Workflow - Access Control List (ACL)  # Risk Control targets - Wallet Management   - User/team and their permission management   - Risk control configurations, e.g. whitelist, blacklist, rate-limiting etc. - Blockchain Interaction   - Crypto transfer   - Smart Contract Invocation  # Important HTTPS only. RESTful, resource oriented  # Get Started Set up your APIs or get authorization  # Authentication and Authorization CoboAuth  # Request and Response application/json  # Error Handling  ### Common error codes | Error Code | Description | | -- | -- |  ### API-specific error codes For error codes that are dedicated to a specific API, see the Error codes section in each API specification, for example, /v3/wallets.  # Rate and Usage Limiting  # Idempotent Request  # Pagination # Support [Developer Hub](https://cobo.com/developers) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import {ApiClient, Env} from "../../src/index.js";

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CoboWaas2Api);
  }
}(this, function(expect, CoboWaas2Api) {
  'use strict';

  var instance;

  beforeEach(function() {
    var apiClient = new ApiClient()
    apiClient.setEnv(Env.PROD);
    apiClient.setPrivateKey("Your private key in hex format without 0x prefix");
    instance = new CoboWaas2Api.TransactionsApi(apiClient);
  });

  describe('TransactionsApi', function() {
    describe('createSignMessageTransaction', function() {
      it('should call createSignMessageTransaction successfully', function() {
        //uncomment below and update the code to test createSignMessageTransaction
        //instance.createSignMessageTransaction().then(function(data) {
        //    console.log(data);
        //}, function(error) {
        //    console.error(error);
        //});
      });
    });
    describe('createSmartContractCallTransaction', function() {
      it('should call createSmartContractCallTransaction successfully', function() {
        //uncomment below and update the code to test createSmartContractCallTransaction
        //instance.createSmartContractCallTransaction().then(function(data) {
        //    console.log(data);
        //}, function(error) {
        //    console.error(error);
        //});
      });
    });
    describe('createTransferTransaction', function() {
      it('should call createTransferTransaction successfully', function() {
        //uncomment below and update the code to test createTransferTransaction
        //instance.createTransferTransaction().then(function(data) {
        //    console.log(data);
        //}, function(error) {
        //    console.error(error);
        //});
      });
    });
    describe('dropTransactionById', function() {
      it('should call dropTransactionById successfully', function() {
        //uncomment below and update the code to test dropTransactionById
        //instance.dropTransactionById().then(function(data) {
        //    console.log(data);
        //}, function(error) {
        //    console.error(error);
        //});
      });
    });
    describe('estimateFee', function() {
      it('should call estimateFee successfully', function() {
        //uncomment below and update the code to test estimateFee
        //instance.estimateFee().then(function(data) {
        //    console.log(data);
        //}, function(error) {
        //    console.error(error);
        //});
      });
    });
    describe('getChainFeePrice', function() {
      it('should call getChainFeePrice successfully', function() {
        //uncomment below and update the code to test getChainFeePrice
        //instance.getChainFeePrice().then(function(data) {
        //    console.log(data);
        //}, function(error) {
        //    console.error(error);
        //});
      });
    });
    describe('getTransactionById', function() {
      it('should call getTransactionById successfully', function() {
        //uncomment below and update the code to test getTransactionById
        //instance.getTransactionById().then(function(data) {
        //    console.log(data);
        //}, function(error) {
        //    console.error(error);
        //});
      });
    });
    describe('listTransactions', function() {
      it('should call listTransactions successfully', function() {
        //uncomment below and update the code to test listTransactions
        //instance.listTransactions().then(function(data) {
        //    console.log(data);
        //}, function(error) {
        //    console.error(error);
        //});
      });
    });
    describe('resendTransactionById', function() {
      it('should call resendTransactionById successfully', function() {
        //uncomment below and update the code to test resendTransactionById
        //instance.resendTransactionById().then(function(data) {
        //    console.log(data);
        //}, function(error) {
        //    console.error(error);
        //});
      });
    });
    describe('retryTransactionDoubleCheckById', function() {
      it('should call retryTransactionDoubleCheckById successfully', function() {
        //uncomment below and update the code to test retryTransactionDoubleCheckById
        //instance.retryTransactionDoubleCheckById().then(function(data) {
        //    console.log(data);
        //}, function(error) {
        //    console.error(error);
        //});
      });
    });
    describe('speedupTransactionById', function() {
      it('should call speedupTransactionById successfully', function() {
        //uncomment below and update the code to test speedupTransactionById
        //instance.speedupTransactionById().then(function(data) {
        //    console.log(data);
        //}, function(error) {
        //    console.error(error);
        //});
      });
    });
    describe('updateTransacitonById', function() {
      it('should call updateTransacitonById successfully', function() {
        //uncomment below and update the code to test updateTransacitonById
        //instance.updateTransacitonById().then(function(data) {
        //    console.log(data);
        //}, function(error) {
        //    console.error(error);
        //});
      });
    });
  });

}));
