/**
 * Cobo Wallet as a Service 2.0
 * Cobo WaaS 2.0 enables you to programmatically access Cobo's full suite of crypto wallet technologies with powerful and flexible access controls.  # Wallet technologies - Custodial Wallet - MPC Wallet - Smart Contract Wallet (Based on Safe{Wallet}) - Exchange Wallet  # Risk Control technologies - Workflow - Access Control List (ACL)  # Risk Control targets - Wallet Management   - User/team and their permission management   - Risk control configurations, e.g. whitelist, blacklist, rate-limiting etc. - Blockchain Interaction   - Crypto transfer   - Smart Contract Invocation  # Important HTTPS only. RESTful, resource oriented  # Get Started Set up your APIs or get authorization  # Authentication and Authorization CoboAuth  # Request and Response application/json  # Error Handling  ### Common error codes | Error Code | Description | | -- | -- |  ### API-specific error codes For error codes that are dedicated to a specific API, see the Error codes section in each API specification, for example, /v3/wallets.  # Rate and Usage Limiting  # Idempotent Request  # Pagination # Support [Developer Hub](https://cobo.com/developers) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CoboWaas2Api);
  }
}(this, function(expect, CoboWaas2Api) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CoboWaas2Api.ChainFeePrice();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ChainFeePrice', function() {
    it('should create an instance of ChainFeePrice', function() {
      // uncomment below and update the code to test ChainFeePrice
      //var instance = new CoboWaas2Api.ChainFeePrice();
      //expect(instance).to.be.a(CoboWaas2Api.ChainFeePrice);
    });

    it('should have the property feeType (base name: "fee_type")', function() {
      // uncomment below and update the code to test the property feeType
      //var instance = new CoboWaas2Api.ChainFeePrice();
      //expect(instance).to.be();
    });

    it('should have the property feeTokenId (base name: "fee_token_id")', function() {
      // uncomment below and update the code to test the property feeTokenId
      //var instance = new CoboWaas2Api.ChainFeePrice();
      //expect(instance).to.be();
    });

    it('should have the property maxFee (base name: "max_fee")', function() {
      // uncomment below and update the code to test the property maxFee
      //var instance = new CoboWaas2Api.ChainFeePrice();
      //expect(instance).to.be();
    });

    it('should have the property maxPriorityFee (base name: "max_priority_fee")', function() {
      // uncomment below and update the code to test the property maxPriorityFee
      //var instance = new CoboWaas2Api.ChainFeePrice();
      //expect(instance).to.be();
    });

    it('should have the property baseFee (base name: "base_fee")', function() {
      // uncomment below and update the code to test the property baseFee
      //var instance = new CoboWaas2Api.ChainFeePrice();
      //expect(instance).to.be();
    });

    it('should have the property gasPrice (base name: "gas_price")', function() {
      // uncomment below and update the code to test the property gasPrice
      //var instance = new CoboWaas2Api.ChainFeePrice();
      //expect(instance).to.be();
    });

    it('should have the property feeRate (base name: "fee_rate")', function() {
      // uncomment below and update the code to test the property feeRate
      //var instance = new CoboWaas2Api.ChainFeePrice();
      //expect(instance).to.be();
    });

    it('should have the property feeAmount (base name: "fee_amount")', function() {
      // uncomment below and update the code to test the property feeAmount
      //var instance = new CoboWaas2Api.ChainFeePrice();
      //expect(instance).to.be();
    });

  });

}));
