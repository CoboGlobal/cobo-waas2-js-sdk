/**
 * Cobo Wallet as a Service 2.0
 * Cobo WaaS 2.0 enables you to programmatically access Cobo's full suite of crypto wallet technologies with powerful and flexible access controls.  # Wallet technologies - Custodial Wallet - MPC Wallet - Smart Contract Wallet (Based on Safe{Wallet}) - Exchange Wallet  # Risk Control technologies - Workflow - Access Control List (ACL)  # Risk Control targets - Wallet Management   - User/team and their permission management   - Risk control configurations, e.g. whitelist, blacklist, rate-limiting etc. - Blockchain Interaction   - Crypto transfer   - Smart Contract Invocation  # Important HTTPS only. RESTful, resource oriented  # Get Started Set up your APIs or get authorization  # Authentication and Authorization CoboAuth  # Request and Response application/json  # Error Handling  ### Common error codes | Error Code | Description | | -- | -- |  ### API-specific error codes For error codes that are dedicated to a specific API, see the Error codes section in each API specification, for example, /v3/wallets.  # Rate and Usage Limiting  # Idempotent Request  # Pagination # Support [Developer Hub](https://cobo.com/developers) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ChainFeePrice from '../model/ChainFeePrice';
import CreateTransferTransaction201Response from '../model/CreateTransferTransaction201Response';
import ErrorResponse from '../model/ErrorResponse';
import EstimateFee from '../model/EstimateFee';
import ListTransactions200Response from '../model/ListTransactions200Response';
import SignMessage from '../model/SignMessage';
import SmartContractCall from '../model/SmartContractCall';
import TransactionDetails from '../model/TransactionDetails';
import TransactionFee from '../model/TransactionFee';
import Transfer from '../model/Transfer';

/**
* Transactions service.
* @module api/TransactionsApi
* @version 0.1.0
*/
export default class TransactionsApi {

    /**
    * Constructs a new TransactionsApi. 
    * @alias module:api/TransactionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a sign message transaction
     * Create a transaction to sign message.
     * @param {Object} opts Optional parameters
     * @param {module:model/SignMessage} [signMessage] The request body to create a message sign transaction
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateTransferTransaction201Response} and HTTP response
     */
    createSignMessageTransactionWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['signMessage'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateTransferTransaction201Response;
      return this.apiClient.callApi(
        '/transactions/sign', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a sign message transaction
     * Create a transaction to sign message.
     * @param {Object} opts Optional parameters
     * @param {module:model/SignMessage} opts.signMessage The request body to create a message sign transaction
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateTransferTransaction201Response}
     */
    createSignMessageTransaction(opts) {
      return this.createSignMessageTransactionWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a smart contract call transaction
     * Create a transaction to call a smart contract.
     * @param {Object} opts Optional parameters
     * @param {module:model/SmartContractCall} [smartContractCall] The request body to create a smart contract transaction
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateTransferTransaction201Response} and HTTP response
     */
    createSmartContractCallTransactionWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['smartContractCall'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateTransferTransaction201Response;
      return this.apiClient.callApi(
        '/transactions/call', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a smart contract call transaction
     * Create a transaction to call a smart contract.
     * @param {Object} opts Optional parameters
     * @param {module:model/SmartContractCall} opts.smartContractCall The request body to create a smart contract transaction
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateTransferTransaction201Response}
     */
    createSmartContractCallTransaction(opts) {
      return this.createSmartContractCallTransactionWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a transfer transaction
     * Create a transaction to transfer funds from one account to another.
     * @param {Object} opts Optional parameters
     * @param {module:model/Transfer} [transfer] The request body to create a transfer transaction
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateTransferTransaction201Response} and HTTP response
     */
    createTransferTransactionWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['transfer'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateTransferTransaction201Response;
      return this.apiClient.callApi(
        '/transactions/transfer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a transfer transaction
     * Create a transaction to transfer funds from one account to another.
     * @param {Object} opts Optional parameters
     * @param {module:model/Transfer} opts.transfer The request body to create a transfer transaction
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateTransferTransaction201Response}
     */
    createTransferTransaction(opts) {
      return this.createTransferTransactionWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Drop a transaction by ID
     * Drop a transaction.
     * @param {String} transactionId Unique id of the transaction
     * @param {Object} opts Optional parameters
     * @param {module:model/TransactionFee} [transactionFee] The request body of fee to initiate transaction
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateTransferTransaction201Response} and HTTP response
     */
    dropTransactionByIdWithHttpInfo(transactionId, opts) {
      opts = opts || {};
      let postBody = opts['transactionFee'];
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling dropTransactionById");
      }

      let pathParams = {
        'transaction_id': transactionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateTransferTransaction201Response;
      return this.apiClient.callApi(
        '/transactions/{transaction_id}/drop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Drop a transaction by ID
     * Drop a transaction.
     * @param {String} transactionId Unique id of the transaction
     * @param {Object} opts Optional parameters
     * @param {module:model/TransactionFee} opts.transactionFee The request body of fee to initiate transaction
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateTransferTransaction201Response}
     */
    dropTransactionById(transactionId, opts) {
      return this.dropTransactionByIdWithHttpInfo(transactionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Estimate the fee for transaction
     * Estimate the transaction fee.
     * @param {Object} opts Optional parameters
     * @param {module:model/EstimateFee} [estimateFee] The request body to estimate fee of transfer or call transaction
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TransactionFee} and HTTP response
     */
    estimateFeeWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['estimateFee'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransactionFee;
      return this.apiClient.callApi(
        '/transactions/estimate_fee', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Estimate the fee for transaction
     * Estimate the transaction fee.
     * @param {Object} opts Optional parameters
     * @param {module:model/EstimateFee} opts.estimateFee The request body to estimate fee of transfer or call transaction
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TransactionFee}
     */
    estimateFee(opts) {
      return this.estimateFeeWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the fee price data for chain and/or token(Hold, TBD after normalize fee settings)
     * Retrieve the fee price data.
     * @param {Object} opts Optional parameters
     * @param {String} [chainId] Unique id of the chain
     * @param {String} [tokenId] Unique id of the token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ChainFeePrice} and HTTP response
     */
    getChainFeePriceWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'chain_id': opts['chainId'],
        'token_id': opts['tokenId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ChainFeePrice;
      return this.apiClient.callApi(
        '/transactions/fee_price', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get the fee price data for chain and/or token(Hold, TBD after normalize fee settings)
     * Retrieve the fee price data.
     * @param {Object} opts Optional parameters
     * @param {String} opts.chainId Unique id of the chain
     * @param {String} opts.tokenId Unique id of the token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ChainFeePrice}
     */
    getChainFeePrice(opts) {
      return this.getChainFeePriceWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get transaction information by ID
     * Detailed description on retrieving transaction information by id
     * @param {String} transactionId Unique id of the transaction
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TransactionDetails} and HTTP response
     */
    getTransactionByIdWithHttpInfo(transactionId) {
      let postBody = null;
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling getTransactionById");
      }

      let pathParams = {
        'transaction_id': transactionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TransactionDetails;
      return this.apiClient.callApi(
        '/transactions/{transaction_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get transaction information by ID
     * Detailed description on retrieving transaction information by id
     * @param {String} transactionId Unique id of the transaction
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TransactionDetails}
     */
    getTransactionById(transactionId) {
      return this.getTransactionByIdWithHttpInfo(transactionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all transactions
     * Retrieve a list of transactions.
     * @param {Object} opts Optional parameters
     * @param {String} [requestId] Request ID
     * @param {String} [sortBy = '')] Field of sort by
     * @param {module:model/String} [direction = '')] Direction to sort by
     * @param {Number} [limit = 10)] size of page to return (pagination)
     * @param {String} [before = '')] Cursor string received from previous request
     * @param {String} [after = '')] Cursor string received from previous request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListTransactions200Response} and HTTP response
     */
    listTransactionsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'request_id': opts['requestId'],
        'sort_by': opts['sortBy'],
        'direction': opts['direction'],
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTransactions200Response;
      return this.apiClient.callApi(
        '/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all transactions
     * Retrieve a list of transactions.
     * @param {Object} opts Optional parameters
     * @param {String} opts.requestId Request ID
     * @param {String} opts.sortBy Field of sort by (default to '')
     * @param {module:model/String} opts.direction Direction to sort by (default to '')
     * @param {Number} opts.limit size of page to return (pagination) (default to 10)
     * @param {String} opts.before Cursor string received from previous request (default to '')
     * @param {String} opts.after Cursor string received from previous request (default to '')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListTransactions200Response}
     */
    listTransactions(opts) {
      return this.listTransactionsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Resend a transaction by ID
     * Resend a transaction.
     * @param {String} transactionId Unique id of the transaction
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateTransferTransaction201Response} and HTTP response
     */
    resendTransactionByIdWithHttpInfo(transactionId) {
      let postBody = null;
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling resendTransactionById");
      }

      let pathParams = {
        'transaction_id': transactionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreateTransferTransaction201Response;
      return this.apiClient.callApi(
        '/transactions/{transaction_id}/resend', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Resend a transaction by ID
     * Resend a transaction.
     * @param {String} transactionId Unique id of the transaction
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateTransferTransaction201Response}
     */
    resendTransactionById(transactionId) {
      return this.resendTransactionByIdWithHttpInfo(transactionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retry up a transaction double-check by ID
     * Retry a transaction double-check.
     * @param {String} transactionId Unique id of the transaction
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateTransferTransaction201Response} and HTTP response
     */
    retryTransactionDoubleCheckByIdWithHttpInfo(transactionId) {
      let postBody = null;
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling retryTransactionDoubleCheckById");
      }

      let pathParams = {
        'transaction_id': transactionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreateTransferTransaction201Response;
      return this.apiClient.callApi(
        '/transactions/{transaction_id}/double_check/retry', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retry up a transaction double-check by ID
     * Retry a transaction double-check.
     * @param {String} transactionId Unique id of the transaction
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateTransferTransaction201Response}
     */
    retryTransactionDoubleCheckById(transactionId) {
      return this.retryTransactionDoubleCheckByIdWithHttpInfo(transactionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Speed up a transaction by ID
     * Speed up a transaction.
     * @param {String} transactionId Unique id of the transaction
     * @param {Object} opts Optional parameters
     * @param {module:model/TransactionFee} [transactionFee] The request body of fee to initiate transaction
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateTransferTransaction201Response} and HTTP response
     */
    speedupTransactionByIdWithHttpInfo(transactionId, opts) {
      opts = opts || {};
      let postBody = opts['transactionFee'];
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling speedupTransactionById");
      }

      let pathParams = {
        'transaction_id': transactionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateTransferTransaction201Response;
      return this.apiClient.callApi(
        '/transactions/{transaction_id}/speedup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Speed up a transaction by ID
     * Speed up a transaction.
     * @param {String} transactionId Unique id of the transaction
     * @param {Object} opts Optional parameters
     * @param {module:model/TransactionFee} opts.transactionFee The request body of fee to initiate transaction
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateTransferTransaction201Response}
     */
    speedupTransactionById(transactionId, opts) {
      return this.speedupTransactionByIdWithHttpInfo(transactionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update transaction by ID
     * Update information of a transaction.
     * @param {String} transactionId Unique id of the transaction
     * @param {Object} opts Optional parameters
     * @param {module:model/TransactionDetails} [transactionDetails] The request body to update a address
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TransactionDetails} and HTTP response
     */
    updateTransacitonByIdWithHttpInfo(transactionId, opts) {
      opts = opts || {};
      let postBody = opts['transactionDetails'];
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling updateTransacitonById");
      }

      let pathParams = {
        'transaction_id': transactionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransactionDetails;
      return this.apiClient.callApi(
        '/transactions/{transaction_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update transaction by ID
     * Update information of a transaction.
     * @param {String} transactionId Unique id of the transaction
     * @param {Object} opts Optional parameters
     * @param {module:model/TransactionDetails} opts.transactionDetails The request body to update a address
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TransactionDetails}
     */
    updateTransacitonById(transactionId, opts) {
      return this.updateTransacitonByIdWithHttpInfo(transactionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
