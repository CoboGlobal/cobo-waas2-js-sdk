/**
 * Cobo Wallet as a Service 2.0
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ContractCall from '../model/ContractCall';
import CreateTransferTransaction201Response from '../model/CreateTransferTransaction201Response';
import ErrorResponse from '../model/ErrorResponse';
import EstimateFee from '../model/EstimateFee';
import EstimationFee from '../model/EstimationFee';
import FeeRate from '../model/FeeRate';
import ListTransactions200Response from '../model/ListTransactions200Response';
import SignMessage from '../model/SignMessage';
import TransactionDestinationType from '../model/TransactionDestinationType';
import TransactionDetail from '../model/TransactionDetail';
import TransactionRbf from '../model/TransactionRbf';
import TransactionResend from '../model/TransactionResend';
import TransactionSourceType from '../model/TransactionSourceType';
import TransactionStatus from '../model/TransactionStatus';
import TransactionType from '../model/TransactionType';
import Transfer from '../model/Transfer';

/**
* Transactions service.
* @module api/TransactionsApi
* @version 0.1.0
*/
export default class TransactionsApi {

    /**
    * Constructs a new TransactionsApi. 
    * @alias module:api/TransactionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Cancel transaction
     * This operation cancels a specified transaction. A transaction can be cancelled if its status is either of the following: - `Submitted` - `PendingScreening` - `PendingAuthorization` - `PendingSignature`   A transaction request for tracking is returned upon successful operation. 
     * @param {String} transactionId The transaction ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateTransferTransaction201Response} and HTTP response
     */
    cancelTransactionByIdWithHttpInfo(transactionId) {
      let postBody = null;
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling cancelTransactionById");
      }

      let pathParams = {
        'transaction_id': transactionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreateTransferTransaction201Response;
      return this.apiClient.callApi(
        '/transactions/{transaction_id}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Cancel transaction
     * This operation cancels a specified transaction. A transaction can be cancelled if its status is either of the following: - `Submitted` - `PendingScreening` - `PendingAuthorization` - `PendingSignature`   A transaction request for tracking is returned upon successful operation. 
     * @param {String} transactionId The transaction ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateTransferTransaction201Response}
     */
    cancelTransactionById(transactionId) {
      return this.cancelTransactionByIdWithHttpInfo(transactionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Call smart contract
     * This operation creates a transaction to interact with a smart contract on the blockchain.  You need to provide details such as the source address, destination address, and the calldata. You can specify the fee-related properties to limit the transaction fee. A transaction request for tracking is returned upon successful operation.  Currently, this operation only applies to blockchains that have a similar architecture to Ethereum. 
     * @param {Object} opts Optional parameters
     * @param {module:model/ContractCall} [contractCall] The request body for making a contract call.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateTransferTransaction201Response} and HTTP response
     */
    createContractCallTransactionWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['contractCall'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateTransferTransaction201Response;
      return this.apiClient.callApi(
        '/transactions/contract_call', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Call smart contract
     * This operation creates a transaction to interact with a smart contract on the blockchain.  You need to provide details such as the source address, destination address, and the calldata. You can specify the fee-related properties to limit the transaction fee. A transaction request for tracking is returned upon successful operation.  Currently, this operation only applies to blockchains that have a similar architecture to Ethereum. 
     * @param {Object} opts Optional parameters
     * @param {module:model/ContractCall} opts.contractCall The request body for making a contract call.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateTransferTransaction201Response}
     */
    createContractCallTransaction(opts) {
      return this.createContractCallTransactionWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Sign message
     * This operation creates a transaction to sign the provided message using cryptographic techniques.  In some scenarios, you want to sign a message for identity authentication or transaction approval. You need to provide details such as the source address, destination address, and the message to be signed. A transaction request for tracking is returned upon successful operation.  Currently, only MPC Wallets support this type of transaction to sign a message. 
     * @param {Object} opts Optional parameters
     * @param {module:model/SignMessage} [signMessage] The request body to create a message sign transaction
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateTransferTransaction201Response} and HTTP response
     */
    createMessageSignTransactionWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['signMessage'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateTransferTransaction201Response;
      return this.apiClient.callApi(
        '/transactions/message_sign', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Sign message
     * This operation creates a transaction to sign the provided message using cryptographic techniques.  In some scenarios, you want to sign a message for identity authentication or transaction approval. You need to provide details such as the source address, destination address, and the message to be signed. A transaction request for tracking is returned upon successful operation.  Currently, only MPC Wallets support this type of transaction to sign a message. 
     * @param {Object} opts Optional parameters
     * @param {module:model/SignMessage} opts.signMessage The request body to create a message sign transaction
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateTransferTransaction201Response}
     */
    createMessageSignTransaction(opts) {
      return this.createMessageSignTransactionWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Transfer token
     * The operation transfers your assets from a wallet created on Cobo Protal to another address.  You need to specify details such as the sender address and recipient address, token ID, and the amount to transfer. You can specify the fee-related properties to limit the transaction fee.  A transaction request for tracking is returned upon successful operation. 
     * @param {Object} opts Optional parameters
     * @param {module:model/Transfer} [transfer] The request body to create a transfer transaction
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateTransferTransaction201Response} and HTTP response
     */
    createTransferTransactionWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['transfer'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateTransferTransaction201Response;
      return this.apiClient.callApi(
        '/transactions/transfer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Transfer token
     * The operation transfers your assets from a wallet created on Cobo Protal to another address.  You need to specify details such as the sender address and recipient address, token ID, and the amount to transfer. You can specify the fee-related properties to limit the transaction fee.  A transaction request for tracking is returned upon successful operation. 
     * @param {Object} opts Optional parameters
     * @param {module:model/Transfer} opts.transfer The request body to create a transfer transaction
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateTransferTransaction201Response}
     */
    createTransferTransaction(opts) {
      return this.createTransferTransactionWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Drop transaction
     * This operation drops a specified transaction.   Dropping a transaction will trigger a Replace-By-Fee (RBF) transaction, which allows the you to replace your unconfirmed transaction with a new one with a higher transaction fee. A transaction can be dropped if its status is `Broadcasting` or `Confirming`.  A transaction request for tracking is returned upon successful operation. 
     * @param {String} transactionId The transaction ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/TransactionRbf} [transactionRbf] The request body to drop or to speed up transactions
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateTransferTransaction201Response} and HTTP response
     */
    dropTransactionByIdWithHttpInfo(transactionId, opts) {
      opts = opts || {};
      let postBody = opts['transactionRbf'];
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling dropTransactionById");
      }

      let pathParams = {
        'transaction_id': transactionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateTransferTransaction201Response;
      return this.apiClient.callApi(
        '/transactions/{transaction_id}/drop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Drop transaction
     * This operation drops a specified transaction.   Dropping a transaction will trigger a Replace-By-Fee (RBF) transaction, which allows the you to replace your unconfirmed transaction with a new one with a higher transaction fee. A transaction can be dropped if its status is `Broadcasting` or `Confirming`.  A transaction request for tracking is returned upon successful operation. 
     * @param {String} transactionId The transaction ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/TransactionRbf} opts.transactionRbf The request body to drop or to speed up transactions
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateTransferTransaction201Response}
     */
    dropTransactionById(transactionId, opts) {
      return this.dropTransactionByIdWithHttpInfo(transactionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Estimate transaction fee
     * This operation estimates the transaction fee rates of a token transfer or a contract call for three different transaction speeds (slow, recommended, and fast), based on factors such as network congestion and transaction complexity.  You need to specify the transaction information, including the request ID, request type, source address, destination address, and token ID of the transaction fee.  The response can contain different properties based on the transaction fee model used by the chain, including EIP-1559 fee model, legacy fee model, UTXO fee model, and fixed fee model. 
     * @param {Object} opts Optional parameters
     * @param {module:model/EstimateFee} [estimateFee] The request body to estimate the transaction fee of a token transfer or a contract call.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/EstimationFee>} and HTTP response
     */
    estimateFeeWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['estimateFee'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [EstimationFee];
      return this.apiClient.callApi(
        '/transactions/estimate_fee', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Estimate transaction fee
     * This operation estimates the transaction fee rates of a token transfer or a contract call for three different transaction speeds (slow, recommended, and fast), based on factors such as network congestion and transaction complexity.  You need to specify the transaction information, including the request ID, request type, source address, destination address, and token ID of the transaction fee.  The response can contain different properties based on the transaction fee model used by the chain, including EIP-1559 fee model, legacy fee model, UTXO fee model, and fixed fee model. 
     * @param {Object} opts Optional parameters
     * @param {module:model/EstimateFee} opts.estimateFee The request body to estimate the transaction fee of a token transfer or a contract call.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/EstimationFee>}
     */
    estimateFee(opts) {
      return this.estimateFeeWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get transaction information
     * This operation retrieves detailed information about a specified transaction, such as the transaction status, source address, destination address, and timestamp. 
     * @param {String} transactionId The transaction ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TransactionDetail} and HTTP response
     */
    getTransactionByIdWithHttpInfo(transactionId) {
      let postBody = null;
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling getTransactionById");
      }

      let pathParams = {
        'transaction_id': transactionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TransactionDetail;
      return this.apiClient.callApi(
        '/transactions/{transaction_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get transaction information
     * This operation retrieves detailed information about a specified transaction, such as the transaction status, source address, destination address, and timestamp. 
     * @param {String} transactionId The transaction ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TransactionDetail}
     */
    getTransactionById(transactionId) {
      return this.getTransactionByIdWithHttpInfo(transactionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get fee rates
     * This operation retrieves current transaction fee rates on the blockchain based on the specified chain ID.  The response can contain different properties based on the transaction fee model used by the chain, including EIP-1559 fee model, legacy fee model, UTXO fee model, and fixed fee model. 
     * @param {String} chainId The chain ID, which is the unique identifier of a blockchain. You can retrieve the IDs of all the chains you can use by calling [List organization enabled chains](/v2/api-references/wallets/list-organization-enabled-chains).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/FeeRate>} and HTTP response
     */
    listFeeRatesWithHttpInfo(chainId) {
      let postBody = null;
      // verify the required parameter 'chainId' is set
      if (chainId === undefined || chainId === null) {
        throw new Error("Missing the required parameter 'chainId' when calling listFeeRates");
      }

      let pathParams = {
      };
      let queryParams = {
        'chain_id': chainId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FeeRate];
      return this.apiClient.callApi(
        '/transactions/fee_rates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get fee rates
     * This operation retrieves current transaction fee rates on the blockchain based on the specified chain ID.  The response can contain different properties based on the transaction fee model used by the chain, including EIP-1559 fee model, legacy fee model, UTXO fee model, and fixed fee model. 
     * @param {String} chainId The chain ID, which is the unique identifier of a blockchain. You can retrieve the IDs of all the chains you can use by calling [List organization enabled chains](/v2/api-references/wallets/list-organization-enabled-chains).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/FeeRate>}
     */
    listFeeRates(chainId) {
      return this.listFeeRatesWithHttpInfo(chainId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all transactions
     * This operation retrieves all the transactions under your organization.  You can filter the results by request ID, Cobo ID, transaction ID, transaction hash, type, status, and timestamps. You can also paginate and sort your query results. 
     * @param {Object} opts Optional parameters
     * @param {String} [requestId] The request ID that is used to track a withdrawal request. The request ID is provided by you and must be unique within your organization.
     * @param {String} [coboId] The Cobo ID, which can be used to track a transaction.
     * @param {String} [transactionId] The transaction ID.
     * @param {String} [transactionHash] The transaction hash.
     * @param {Array.<module:model/TransactionType>} [type] The transaction type. Possible values include:    - `Deposit`: A deposit transaction.   - `Withdrawal`: A withdrawal transaction.   - `TokenApproval`: A transaction that grants permission to access your tokens.    - `ContractCall`: A transaction that interacts with a smart contract.   - `TransactionFeePayment`: A transaction that is initiated by Fee Station to pay your transaction fee.   - `RawMessage`: A transaction that signs a message. 
     * @param {Array.<module:model/TransactionStatus>} [status] The transaction status. Possible values include:    - `Submitted`: The transaction is submitted.   - `PendingScreening`: The transaction is pending screening by Risk Control.    - `PendingAuthorization`: The transaction is pending approvals.   - `PendingSignature`: The transaction is pending signature.    - `Broadcasting`: The transaction is being broadcast.   - `Confirming`: The transaction is waiting for the required number of confirmations.   - `Completed`: The transaction is completed.   - `Failed`: The transaction failed.   - `Rejected`: The transaction is rejected. 
     * @param {Array.<module:model/TransactionSourceType>} [sourceType] The type of transaction source. Possible values include:   - `Address`: An external address.   - `CustodialWallet`: A Custodial Wallet.   - `MPCWallet`: An MPC Wallet.   - `SafeWallet`: A Smart Contract Wallet (Safe{Wallet}).   - `ExchangeWallet`: An Exchange Wallet.   - `FeeStation`: A Fee Station. 
     * @param {Array.<String>} [sourceWalletId] The wallet ID of the transaction source.
     * @param {Array.<String>} [sourceAddress] The address of the transaction source.
     * @param {Array.<module:model/TransactionDestinationType>} [destinationType] The transaction destination type. Possible values include:   - `Address`: An external address.    - `ContractCall`: A transaction that interacts with a smart contract.   - `MessageSign`: A transaction that signs a message.    - `CustodialWallet`: A Custodial Wallet.   - `MPCWallet`: An MPC Wallet.   - `SafeWallet`: A Smart Contract Wallets (Safe{Wallet}).   - `ExchangeWallet`: An Exchange Wallet. 
     * @param {Array.<String>} [destinationWalletId] The wallet ID of the transaction destination.
     * @param {Array.<String>} [destinationAddress] The address of the transaction destination.
     * @param {String} [chainIds] A list of chain IDs, separated by comma. The chain ID is the unique identifier of a blockchain. You can retrieve the IDs of all the chains you can use by calling [List organization enabled chains](/v2/api-references/wallets/list-organization-enabled-chains).
     * @param {String} [tokenIds] A list of token IDs, separated by comma. The token ID is the unique identifier of a token. You can retrieve the IDs of all the tokens you can use by calling [List organization enabled tokens](/v2/api-references/wallets/list-organization-enabled-tokens).
     * @param {String} [assetIds] A list of asset IDs, separated by comma. (This concept applies to Exchange Wallets only) An asset is a digital representation of a valuable resource on a blockchain network. Exchange Wallets group your holdings by asset, even if the same asset exists on different blockchains. For example, if your Exchange Wallet has 1 USDT on Ethereum and 1 USDT on TRON, then your asset balance is 2 USDT.
     * @param {Array.<String>} [vaultId] The MPC vault ID.
     * @param {Array.<String>} [projectId] The MPC project ID.
     * @param {Number} [minCreatedTimestamp] The time when the transaction was created, in Unix timestamp format, measured in milliseconds. You can use this parameter to filter transactions created on or after the specified time.
     * @param {Number} [maxCreatedTimestamp] The time when the transaction was created, in Unix timestamp format, measured in milliseconds. You can use this parameter to filter transactions created on or before the specified time.
     * @param {String} [sortBy = '')] The field used for sorting.
     * @param {module:model/String} [direction = '')] The sort direction. Possible values include:   - `ASC`: Sort the results in ascending order.   - `DESC`: Sort the results in descending order. 
     * @param {Number} [limit = 10)] The maximum number of objects to return. The default value range is [1, 50] and can be set endpoint specified.
     * @param {String} [before] An object ID which serves as a cursor for pagination. For example, if you specify `before` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`, the request will retrieve a list of data objects that end before the object with the specified ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`. You can set this parameter to the value of `pagination.after` in the response of the previous request.  If you set both `after` or `before`, only the setting of `before` will take effect.  If the `before` and `after` are both set to empty, the first slice is returned. If the `before` is set to `infinity`, the last slice is returned. 
     * @param {String} [after] An object ID which serves as a cursor for pagination. For example, if you specify `after` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`, the request will retrieve a list of data objects that start after the object with the specified ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`. You can set this parameter to the value of `pagination.before` in the response of the previous request.  If you set both `after` or `before`, only the setting of `before` will take effect. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListTransactions200Response} and HTTP response
     */
    listTransactionsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'request_id': opts['requestId'],
        'cobo_id': opts['coboId'],
        'transaction_id': opts['transactionId'],
        'transaction_hash': opts['transactionHash'],
        'type': this.apiClient.buildCollectionParam(opts['type'], 'multi'),
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'source_type': this.apiClient.buildCollectionParam(opts['sourceType'], 'multi'),
        'source_wallet_id': this.apiClient.buildCollectionParam(opts['sourceWalletId'], 'multi'),
        'source_address': this.apiClient.buildCollectionParam(opts['sourceAddress'], 'multi'),
        'destination_type': this.apiClient.buildCollectionParam(opts['destinationType'], 'multi'),
        'destination_wallet_id': this.apiClient.buildCollectionParam(opts['destinationWalletId'], 'multi'),
        'destination_address': this.apiClient.buildCollectionParam(opts['destinationAddress'], 'multi'),
        'chain_ids': opts['chainIds'],
        'token_ids': opts['tokenIds'],
        'asset_ids': opts['assetIds'],
        'vault_id': this.apiClient.buildCollectionParam(opts['vaultId'], 'multi'),
        'project_id': this.apiClient.buildCollectionParam(opts['projectId'], 'multi'),
        'min_created_timestamp': opts['minCreatedTimestamp'],
        'max_created_timestamp': opts['maxCreatedTimestamp'],
        'sort_by': opts['sortBy'],
        'direction': opts['direction'],
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTransactions200Response;
      return this.apiClient.callApi(
        '/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all transactions
     * This operation retrieves all the transactions under your organization.  You can filter the results by request ID, Cobo ID, transaction ID, transaction hash, type, status, and timestamps. You can also paginate and sort your query results. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.requestId The request ID that is used to track a withdrawal request. The request ID is provided by you and must be unique within your organization.
     * @param {String} opts.coboId The Cobo ID, which can be used to track a transaction.
     * @param {String} opts.transactionId The transaction ID.
     * @param {String} opts.transactionHash The transaction hash.
     * @param {Array.<module:model/TransactionType>} opts.type The transaction type. Possible values include:    - `Deposit`: A deposit transaction.   - `Withdrawal`: A withdrawal transaction.   - `TokenApproval`: A transaction that grants permission to access your tokens.    - `ContractCall`: A transaction that interacts with a smart contract.   - `TransactionFeePayment`: A transaction that is initiated by Fee Station to pay your transaction fee.   - `RawMessage`: A transaction that signs a message. 
     * @param {Array.<module:model/TransactionStatus>} opts.status The transaction status. Possible values include:    - `Submitted`: The transaction is submitted.   - `PendingScreening`: The transaction is pending screening by Risk Control.    - `PendingAuthorization`: The transaction is pending approvals.   - `PendingSignature`: The transaction is pending signature.    - `Broadcasting`: The transaction is being broadcast.   - `Confirming`: The transaction is waiting for the required number of confirmations.   - `Completed`: The transaction is completed.   - `Failed`: The transaction failed.   - `Rejected`: The transaction is rejected. 
     * @param {Array.<module:model/TransactionSourceType>} opts.sourceType The type of transaction source. Possible values include:   - `Address`: An external address.   - `CustodialWallet`: A Custodial Wallet.   - `MPCWallet`: An MPC Wallet.   - `SafeWallet`: A Smart Contract Wallet (Safe{Wallet}).   - `ExchangeWallet`: An Exchange Wallet.   - `FeeStation`: A Fee Station. 
     * @param {Array.<String>} opts.sourceWalletId The wallet ID of the transaction source.
     * @param {Array.<String>} opts.sourceAddress The address of the transaction source.
     * @param {Array.<module:model/TransactionDestinationType>} opts.destinationType The transaction destination type. Possible values include:   - `Address`: An external address.    - `ContractCall`: A transaction that interacts with a smart contract.   - `MessageSign`: A transaction that signs a message.    - `CustodialWallet`: A Custodial Wallet.   - `MPCWallet`: An MPC Wallet.   - `SafeWallet`: A Smart Contract Wallets (Safe{Wallet}).   - `ExchangeWallet`: An Exchange Wallet. 
     * @param {Array.<String>} opts.destinationWalletId The wallet ID of the transaction destination.
     * @param {Array.<String>} opts.destinationAddress The address of the transaction destination.
     * @param {String} opts.chainIds A list of chain IDs, separated by comma. The chain ID is the unique identifier of a blockchain. You can retrieve the IDs of all the chains you can use by calling [List organization enabled chains](/v2/api-references/wallets/list-organization-enabled-chains).
     * @param {String} opts.tokenIds A list of token IDs, separated by comma. The token ID is the unique identifier of a token. You can retrieve the IDs of all the tokens you can use by calling [List organization enabled tokens](/v2/api-references/wallets/list-organization-enabled-tokens).
     * @param {String} opts.assetIds A list of asset IDs, separated by comma. (This concept applies to Exchange Wallets only) An asset is a digital representation of a valuable resource on a blockchain network. Exchange Wallets group your holdings by asset, even if the same asset exists on different blockchains. For example, if your Exchange Wallet has 1 USDT on Ethereum and 1 USDT on TRON, then your asset balance is 2 USDT.
     * @param {Array.<String>} opts.vaultId The MPC vault ID.
     * @param {Array.<String>} opts.projectId The MPC project ID.
     * @param {Number} opts.minCreatedTimestamp The time when the transaction was created, in Unix timestamp format, measured in milliseconds. You can use this parameter to filter transactions created on or after the specified time.
     * @param {Number} opts.maxCreatedTimestamp The time when the transaction was created, in Unix timestamp format, measured in milliseconds. You can use this parameter to filter transactions created on or before the specified time.
     * @param {String} opts.sortBy The field used for sorting. (default to '')
     * @param {module:model/String} opts.direction The sort direction. Possible values include:   - `ASC`: Sort the results in ascending order.   - `DESC`: Sort the results in descending order.  (default to '')
     * @param {Number} opts.limit The maximum number of objects to return. The default value range is [1, 50] and can be set endpoint specified. (default to 10)
     * @param {String} opts.before An object ID which serves as a cursor for pagination. For example, if you specify `before` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`, the request will retrieve a list of data objects that end before the object with the specified ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`. You can set this parameter to the value of `pagination.after` in the response of the previous request.  If you set both `after` or `before`, only the setting of `before` will take effect.  If the `before` and `after` are both set to empty, the first slice is returned. If the `before` is set to `infinity`, the last slice is returned. 
     * @param {String} opts.after An object ID which serves as a cursor for pagination. For example, if you specify `after` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`, the request will retrieve a list of data objects that start after the object with the specified ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`. You can set this parameter to the value of `pagination.before` in the response of the previous request.  If you set both `after` or `before`, only the setting of `before` will take effect. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListTransactions200Response}
     */
    listTransactions(opts) {
      return this.listTransactionsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Resend transaction
     * This operation resends a specified transaction.   Resending a transaction initiates a new attempt to process the transaction that failed previously. A transaction can be resent if its status is `failed`.  A transaction request for tracking is returned upon successful operation. 
     * @param {String} transactionId The transaction ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/TransactionResend} [transactionResend] The request body to resend transactions
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateTransferTransaction201Response} and HTTP response
     */
    resendTransactionByIdWithHttpInfo(transactionId, opts) {
      opts = opts || {};
      let postBody = opts['transactionResend'];
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling resendTransactionById");
      }

      let pathParams = {
        'transaction_id': transactionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateTransferTransaction201Response;
      return this.apiClient.callApi(
        '/transactions/{transaction_id}/resend', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Resend transaction
     * This operation resends a specified transaction.   Resending a transaction initiates a new attempt to process the transaction that failed previously. A transaction can be resent if its status is `failed`.  A transaction request for tracking is returned upon successful operation. 
     * @param {String} transactionId The transaction ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/TransactionResend} opts.transactionResend The request body to resend transactions
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateTransferTransaction201Response}
     */
    resendTransactionById(transactionId, opts) {
      return this.resendTransactionByIdWithHttpInfo(transactionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Speed up transaction
     * This operation accelerates a specified transaction.   Speeding up a transaction will trigger a Replace-By-Fee (RBF) transaction, which allows the you to replace your unconfirmed transaction with a new one with a higher transaction fee. A transaction can be accelerated if its status is either `Broadcasting` or `Confirming`.  A transaction request for tracking is returned upon successful operation. 
     * @param {String} transactionId The transaction ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/TransactionRbf} [transactionRbf] The request body to drop or to speed up transactions
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateTransferTransaction201Response} and HTTP response
     */
    speedupTransactionByIdWithHttpInfo(transactionId, opts) {
      opts = opts || {};
      let postBody = opts['transactionRbf'];
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling speedupTransactionById");
      }

      let pathParams = {
        'transaction_id': transactionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateTransferTransaction201Response;
      return this.apiClient.callApi(
        '/transactions/{transaction_id}/speedup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Speed up transaction
     * This operation accelerates a specified transaction.   Speeding up a transaction will trigger a Replace-By-Fee (RBF) transaction, which allows the you to replace your unconfirmed transaction with a new one with a higher transaction fee. A transaction can be accelerated if its status is either `Broadcasting` or `Confirming`.  A transaction request for tracking is returned upon successful operation. 
     * @param {String} transactionId The transaction ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/TransactionRbf} opts.transactionRbf The request body to drop or to speed up transactions
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateTransferTransaction201Response}
     */
    speedupTransactionById(transactionId, opts) {
      return this.speedupTransactionByIdWithHttpInfo(transactionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
