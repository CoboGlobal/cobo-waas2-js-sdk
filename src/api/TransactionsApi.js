/**
 * Cobo Wallet as a Service 2.0
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ChainFeePrice from '../model/ChainFeePrice';
import ContractCall from '../model/ContractCall';
import CreateTransferTransaction201Response from '../model/CreateTransferTransaction201Response';
import ErrorResponse from '../model/ErrorResponse';
import EstimateFee from '../model/EstimateFee';
import EstimationFee from '../model/EstimationFee';
import ListTransactions200Response from '../model/ListTransactions200Response';
import Transaction from '../model/Transaction';
import TransactionFee from '../model/TransactionFee';
import TransactionStatus from '../model/TransactionStatus';
import TransactionType from '../model/TransactionType';
import Transfer from '../model/Transfer';
import WalletType from '../model/WalletType';

/**
* Transactions service.
* @module api/TransactionsApi
* @version 0.1.0
*/
export default class TransactionsApi {

    /**
    * Constructs a new TransactionsApi. 
    * @alias module:api/TransactionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Cancel a transaction by ID
     * Cancel a transaction.
     * @param {String} transactionId Unique id of the transaction
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateTransferTransaction201Response} and HTTP response
     */
    cancelTransactionByIdWithHttpInfo(transactionId) {
      let postBody = null;
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling cancelTransactionById");
      }

      let pathParams = {
        'transaction_id': transactionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreateTransferTransaction201Response;
      return this.apiClient.callApi(
        '/transactions/{transaction_id}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Cancel a transaction by ID
     * Cancel a transaction.
     * @param {String} transactionId Unique id of the transaction
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateTransferTransaction201Response}
     */
    cancelTransactionById(transactionId) {
      return this.cancelTransactionByIdWithHttpInfo(transactionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a smart contract call transaction
     * Create a transaction to call a smart contract.
     * @param {Object} opts Optional parameters
     * @param {module:model/ContractCall} [contractCall] The request body to create a smart contract transaction
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateTransferTransaction201Response} and HTTP response
     */
    createSmartContractCallTransactionWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['contractCall'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateTransferTransaction201Response;
      return this.apiClient.callApi(
        '/transactions/contract_call', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a smart contract call transaction
     * Create a transaction to call a smart contract.
     * @param {Object} opts Optional parameters
     * @param {module:model/ContractCall} opts.contractCall The request body to create a smart contract transaction
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateTransferTransaction201Response}
     */
    createSmartContractCallTransaction(opts) {
      return this.createSmartContractCallTransactionWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a transfer transaction
     * Create a transaction to transfer funds from one account to another.
     * @param {Object} opts Optional parameters
     * @param {module:model/Transfer} [transfer] The request body to create a transfer transaction
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateTransferTransaction201Response} and HTTP response
     */
    createTransferTransactionWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['transfer'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateTransferTransaction201Response;
      return this.apiClient.callApi(
        '/transactions/transfer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a transfer transaction
     * Create a transaction to transfer funds from one account to another.
     * @param {Object} opts Optional parameters
     * @param {module:model/Transfer} opts.transfer The request body to create a transfer transaction
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateTransferTransaction201Response}
     */
    createTransferTransaction(opts) {
      return this.createTransferTransactionWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Drop a transaction by ID
     * Drop a transaction.
     * @param {String} transactionId Unique id of the transaction
     * @param {Object} opts Optional parameters
     * @param {module:model/TransactionFee} [transactionFee] The request body of fee to initiate transaction
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateTransferTransaction201Response} and HTTP response
     */
    dropTransactionByIdWithHttpInfo(transactionId, opts) {
      opts = opts || {};
      let postBody = opts['transactionFee'];
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling dropTransactionById");
      }

      let pathParams = {
        'transaction_id': transactionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateTransferTransaction201Response;
      return this.apiClient.callApi(
        '/transactions/{transaction_id}/drop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Drop a transaction by ID
     * Drop a transaction.
     * @param {String} transactionId Unique id of the transaction
     * @param {Object} opts Optional parameters
     * @param {module:model/TransactionFee} opts.transactionFee The request body of fee to initiate transaction
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateTransferTransaction201Response}
     */
    dropTransactionById(transactionId, opts) {
      return this.dropTransactionByIdWithHttpInfo(transactionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Estimate the fee for transaction
     * Estimate the transaction fee.
     * @param {Object} opts Optional parameters
     * @param {module:model/EstimateFee} [estimateFee] The request body to estimate fee of transfer or call transaction
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EstimationFee} and HTTP response
     */
    estimateFeeWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['estimateFee'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EstimationFee;
      return this.apiClient.callApi(
        '/transactions/estimate_fee', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Estimate the fee for transaction
     * Estimate the transaction fee.
     * @param {Object} opts Optional parameters
     * @param {module:model/EstimateFee} opts.estimateFee The request body to estimate fee of transfer or call transaction
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EstimationFee}
     */
    estimateFee(opts) {
      return this.estimateFeeWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the fee price data for chain and/or token(Hold, TBD after normalize fee settings)
     * Retrieve the fee price data.
     * @param {Object} opts Optional parameters
     * @param {String} [chainId] The chain ID.
     * @param {String} [tokenId] The token ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ChainFeePrice} and HTTP response
     */
    getChainFeePriceWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'chain_id': opts['chainId'],
        'token_id': opts['tokenId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ChainFeePrice;
      return this.apiClient.callApi(
        '/transactions/fee_price', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get the fee price data for chain and/or token(Hold, TBD after normalize fee settings)
     * Retrieve the fee price data.
     * @param {Object} opts Optional parameters
     * @param {String} opts.chainId The chain ID.
     * @param {String} opts.tokenId The token ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ChainFeePrice}
     */
    getChainFeePrice(opts) {
      return this.getChainFeePriceWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get transaction information by ID
     * Detailed description on retrieving transaction information by id
     * @param {String} transactionId Unique id of the transaction
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Transaction} and HTTP response
     */
    getTransactionByIdWithHttpInfo(transactionId) {
      let postBody = null;
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling getTransactionById");
      }

      let pathParams = {
        'transaction_id': transactionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Transaction;
      return this.apiClient.callApi(
        '/transactions/{transaction_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get transaction information by ID
     * Detailed description on retrieving transaction information by id
     * @param {String} transactionId Unique id of the transaction
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Transaction}
     */
    getTransactionById(transactionId) {
      return this.getTransactionByIdWithHttpInfo(transactionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all transactions
     * Retrieve a list of transactions.
     * @param {Object} opts Optional parameters
     * @param {String} [requestId] Request ID
     * @param {String} [coboId] Cobo ID
     * @param {String} [transactionId] Unique id of the transaction
     * @param {String} [transactionHash] Transaction hash
     * @param {Array.<module:model/TransactionType>} [type] The type of a transaction
     * @param {Array.<module:model/TransactionStatus>} [status] The status of a transaction
     * @param {module:model/WalletType} [walletType] The wallet type.  - `Custodial`: Custodial Wallets  - `MPC`: MPC Wallets  - `SmartContract`: Smart Contract Wallets  - `Exchange`: Exchange Wallets 
     * @param {Array.<String>} [walletId] Unique id of the wallet
     * @param {Array.<String>} [chainId] Unique id of the chain
     * @param {Array.<String>} [tokenId] Unique id of the token
     * @param {Array.<String>} [assetId] Unique id of the asset
     * @param {String} [vaultId] Unique id of the mpc vault
     * @param {String} [projectId] Unique id of the mpc project
     * @param {Number} [minCreatedTimestamp] The minimum transaction creation timestamp in Unix epoch seconds
     * @param {Number} [maxCreatedTimestamp] The maximum transaction creation timestamp in Unix epoch seconds
     * @param {String} [sortBy = '')] Field of sort by
     * @param {module:model/String} [direction = '')] Direction to sort by
     * @param {Number} [limit = 10)] The maximum number of objects to return. The value range is [1, 50].
     * @param {String} [before] An object ID which serves as a cursor for pagination. For example, if you specify `before` as `foo`, the request will retrieve a list of data objects that end before the object with the object ID `foo`. You can set this parameter to the value of `pagination.after` in the response of the previous request. If you set both `after` or `before`, only the setting of `before` will take effect.
     * @param {String} [after] An object ID which serves as a cursor for pagination. For example, if you specify `after` as `bar`, the request will retrieve a list of data objects that start after the object with the object ID `bar`. You can set this parameter to the value of `pagination.before` in the response of the previous request. If you set both `after` or `before`, only the setting of `before` will take effect.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListTransactions200Response} and HTTP response
     */
    listTransactionsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'request_id': opts['requestId'],
        'cobo_id': opts['coboId'],
        'transaction_id': opts['transactionId'],
        'transaction_hash': opts['transactionHash'],
        'type': this.apiClient.buildCollectionParam(opts['type'], 'multi'),
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'wallet_type': opts['walletType'],
        'wallet_id': this.apiClient.buildCollectionParam(opts['walletId'], 'multi'),
        'chain_id': this.apiClient.buildCollectionParam(opts['chainId'], 'multi'),
        'token_id': this.apiClient.buildCollectionParam(opts['tokenId'], 'multi'),
        'asset_id': this.apiClient.buildCollectionParam(opts['assetId'], 'multi'),
        'vault_id': opts['vaultId'],
        'project_id': opts['projectId'],
        'min_created_timestamp': opts['minCreatedTimestamp'],
        'max_created_timestamp': opts['maxCreatedTimestamp'],
        'sort_by': opts['sortBy'],
        'direction': opts['direction'],
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTransactions200Response;
      return this.apiClient.callApi(
        '/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all transactions
     * Retrieve a list of transactions.
     * @param {Object} opts Optional parameters
     * @param {String} opts.requestId Request ID
     * @param {String} opts.coboId Cobo ID
     * @param {String} opts.transactionId Unique id of the transaction
     * @param {String} opts.transactionHash Transaction hash
     * @param {Array.<module:model/TransactionType>} opts.type The type of a transaction
     * @param {Array.<module:model/TransactionStatus>} opts.status The status of a transaction
     * @param {module:model/WalletType} opts.walletType The wallet type.  - `Custodial`: Custodial Wallets  - `MPC`: MPC Wallets  - `SmartContract`: Smart Contract Wallets  - `Exchange`: Exchange Wallets 
     * @param {Array.<String>} opts.walletId Unique id of the wallet
     * @param {Array.<String>} opts.chainId Unique id of the chain
     * @param {Array.<String>} opts.tokenId Unique id of the token
     * @param {Array.<String>} opts.assetId Unique id of the asset
     * @param {String} opts.vaultId Unique id of the mpc vault
     * @param {String} opts.projectId Unique id of the mpc project
     * @param {Number} opts.minCreatedTimestamp The minimum transaction creation timestamp in Unix epoch seconds
     * @param {Number} opts.maxCreatedTimestamp The maximum transaction creation timestamp in Unix epoch seconds
     * @param {String} opts.sortBy Field of sort by (default to '')
     * @param {module:model/String} opts.direction Direction to sort by (default to '')
     * @param {Number} opts.limit The maximum number of objects to return. The value range is [1, 50]. (default to 10)
     * @param {String} opts.before An object ID which serves as a cursor for pagination. For example, if you specify `before` as `foo`, the request will retrieve a list of data objects that end before the object with the object ID `foo`. You can set this parameter to the value of `pagination.after` in the response of the previous request. If you set both `after` or `before`, only the setting of `before` will take effect.
     * @param {String} opts.after An object ID which serves as a cursor for pagination. For example, if you specify `after` as `bar`, the request will retrieve a list of data objects that start after the object with the object ID `bar`. You can set this parameter to the value of `pagination.before` in the response of the previous request. If you set both `after` or `before`, only the setting of `before` will take effect.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListTransactions200Response}
     */
    listTransactions(opts) {
      return this.listTransactionsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Resend a transaction by ID
     * Resend a transaction.
     * @param {String} transactionId Unique id of the transaction
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateTransferTransaction201Response} and HTTP response
     */
    resendTransactionByIdWithHttpInfo(transactionId) {
      let postBody = null;
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling resendTransactionById");
      }

      let pathParams = {
        'transaction_id': transactionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreateTransferTransaction201Response;
      return this.apiClient.callApi(
        '/transactions/{transaction_id}/resend', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Resend a transaction by ID
     * Resend a transaction.
     * @param {String} transactionId Unique id of the transaction
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateTransferTransaction201Response}
     */
    resendTransactionById(transactionId) {
      return this.resendTransactionByIdWithHttpInfo(transactionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Speed up a transaction by ID
     * Speed up a transaction.
     * @param {String} transactionId Unique id of the transaction
     * @param {Object} opts Optional parameters
     * @param {module:model/TransactionFee} [transactionFee] The request body of fee to initiate transaction
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateTransferTransaction201Response} and HTTP response
     */
    speedupTransactionByIdWithHttpInfo(transactionId, opts) {
      opts = opts || {};
      let postBody = opts['transactionFee'];
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling speedupTransactionById");
      }

      let pathParams = {
        'transaction_id': transactionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateTransferTransaction201Response;
      return this.apiClient.callApi(
        '/transactions/{transaction_id}/speedup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Speed up a transaction by ID
     * Speed up a transaction.
     * @param {String} transactionId Unique id of the transaction
     * @param {Object} opts Optional parameters
     * @param {module:model/TransactionFee} opts.transactionFee The request body of fee to initiate transaction
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateTransferTransaction201Response}
     */
    speedupTransactionById(transactionId, opts) {
      return this.speedupTransactionByIdWithHttpInfo(transactionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
