/**
 * Cobo Wallet as a Service 2.0
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import GetToken200Response from '../model/GetToken200Response';
import RefreshTokenRequest from '../model/RefreshTokenRequest';

/**
* OAuth service.
* @module api/OAuthApi
* @version 0.2.5
*/
export default class OAuthApi {

    /**
    * Constructs a new OAuthApi. 
    * @alias module:api/OAuthApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get Access Token
     * If the Org has already authorized the App, the App can retrieve an Access Token through this interface. 
     * @param {String} clientId A unique ID identifier to distinguish different apps.
     * @param {String} orgId A unique ID identifier to distinguish different orgs.
     * @param {String} grantType Identify different types of authorization.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetToken200Response} and HTTP response
     */
    getTokenWithHttpInfo(clientId, orgId, grantType) {
      let postBody = null;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getToken");
      }
      // verify the required parameter 'orgId' is set
      if (orgId === undefined || orgId === null) {
        throw new Error("Missing the required parameter 'orgId' when calling getToken");
      }
      // verify the required parameter 'grantType' is set
      if (grantType === undefined || grantType === null) {
        throw new Error("Missing the required parameter 'grantType' when calling getToken");
      }

      let pathParams = {
      };
      let queryParams = {
        'client_id': clientId,
        'org_id': orgId,
        'grant_type': grantType
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetToken200Response;
      return this.apiClient.callApi(
        '/oauth/token', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Access Token
     * If the Org has already authorized the App, the App can retrieve an Access Token through this interface. 
     * @param {String} clientId A unique ID identifier to distinguish different apps.
     * @param {String} orgId A unique ID identifier to distinguish different orgs.
     * @param {String} grantType Identify different types of authorization.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetToken200Response}
     */
    getToken(clientId, orgId, grantType) {
      return this.getTokenWithHttpInfo(clientId, orgId, grantType)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Refresh Access Token
     * Use fefresh token to obtain a new access token. 
     * @param {module:model/RefreshTokenRequest} refreshTokenRequest The request body for refreshing a new access token.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    refreshTokenWithHttpInfo(refreshTokenRequest) {
      let postBody = refreshTokenRequest;
      // verify the required parameter 'refreshTokenRequest' is set
      if (refreshTokenRequest === undefined || refreshTokenRequest === null) {
        throw new Error("Missing the required parameter 'refreshTokenRequest' when calling refreshToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/oauth/token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Refresh Access Token
     * Use fefresh token to obtain a new access token. 
     * @param {module:model/RefreshTokenRequest} refreshTokenRequest The request body for refreshing a new access token.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    refreshToken(refreshTokenRequest) {
      return this.refreshTokenWithHttpInfo(refreshTokenRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
