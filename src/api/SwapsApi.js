/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateSwapActivityRequest from '../model/CreateSwapActivityRequest';
import CreateSwapQuote201Response from '../model/CreateSwapQuote201Response';
import CreateSwapQuoteRequest from '../model/CreateSwapQuoteRequest';
import ErrorResponse from '../model/ErrorResponse';
import ListEnableTokenPairs200Response from '../model/ListEnableTokenPairs200Response';
import ListSwapActivities200Response from '../model/ListSwapActivities200Response';
import SwapActivity from '../model/SwapActivity';
import SwapQuote from '../model/SwapQuote';

/**
* Swaps service.
* @module api/SwapsApi
*/
export default class SwapsApi {

    /**
    * Constructs a new SwapsApi. 
    * @alias module:api/SwapsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create Swap Activity
     * This operation to create a swap activity. 
     * @param {module:model/CreateSwapActivityRequest} CreateSwapActivityRequest The request body for creating a swap activity.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SwapActivity} and HTTP response
     */
    createSwapActivityWithHttpInfo(CreateSwapActivityRequest) {
      let postBody = CreateSwapActivityRequest;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'CreateSwapActivityRequest' is set
      if (CreateSwapActivityRequest === undefined || CreateSwapActivityRequest === null) {
        throw new Error("Missing the required parameter 'CreateSwapActivityRequest' when calling createSwapActivity");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SwapActivity;
      return this.apiClient.callApi(
        '/swaps/swap', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create Swap Activity
     * This operation to create a swap activity. 
     * @param {module:model/CreateSwapActivityRequest} CreateSwapActivityRequest The request body for creating a swap activity.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SwapActivity}
     */
    createSwapActivity(CreateSwapActivityRequest) {
      return this.createSwapActivityWithHttpInfo(CreateSwapActivityRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create Swap Quote
     * This operation retrieves a quote for swapping between two tokens. Either pay_amount or receive_amount must be provided. 
     * @param {module:model/CreateSwapQuoteRequest} CreateSwapQuoteRequest The request body for creating a swap activity.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateSwapQuote201Response} and HTTP response
     */
    createSwapQuoteWithHttpInfo(CreateSwapQuoteRequest) {
      let postBody = CreateSwapQuoteRequest;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'CreateSwapQuoteRequest' is set
      if (CreateSwapQuoteRequest === undefined || CreateSwapQuoteRequest === null) {
        throw new Error("Missing the required parameter 'CreateSwapQuoteRequest' when calling createSwapQuote");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateSwapQuote201Response;
      return this.apiClient.callApi(
        '/swaps/quote', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create Swap Quote
     * This operation retrieves a quote for swapping between two tokens. Either pay_amount or receive_amount must be provided. 
     * @param {module:model/CreateSwapQuoteRequest} CreateSwapQuoteRequest The request body for creating a swap activity.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateSwapQuote201Response}
     */
    createSwapQuote(CreateSwapQuoteRequest) {
      return this.createSwapQuoteWithHttpInfo(CreateSwapQuoteRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Swap Activity Details
     * This operation retrieves the details of a swap activity. 
     * @param {String} activity_id The unique id of the activity.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SwapActivity} and HTTP response
     */
    getSwapActivityWithHttpInfo(activity_id) {
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'activity_id' is set
      if (activity_id === undefined || activity_id === null) {
        throw new Error("Missing the required parameter 'activity_id' when calling getSwapActivity");
      }

      let pathParams = {
        'activity_id': activity_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SwapActivity;
      return this.apiClient.callApi(
        '/swaps/activities/{activity_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Swap Activity Details
     * This operation retrieves the details of a swap activity. 
     * @param {String} activity_id The unique id of the activity.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SwapActivity}
     */
    getSwapActivity(activity_id) {
      return this.getSwapActivityWithHttpInfo(activity_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Current Swap Rate
     * This operation retrieves the current market exchange rate and estimated amount for swapping between two tokens. Either pay_amount or receive_amount must be provided. 
     * @param {String} wallet_id The wallet ID.
     * @param {String} pay_token_id Unique id of the token to pay.
     * @param {String} receive_token_id Unique id of the token to receive.
     * @param {Object} opts Optional parameters
     * @param {String} [pay_amount] The amount of pay token to swap.
     * @param {String} [receive_amount] The amount of token to receive.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SwapQuote} and HTTP response
     */
    getSwapQuoteWithHttpInfo(wallet_id, pay_token_id, receive_token_id, opts) {
      opts = opts || {};
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'wallet_id' is set
      if (wallet_id === undefined || wallet_id === null) {
        throw new Error("Missing the required parameter 'wallet_id' when calling getSwapQuote");
      }
      // verify the required parameter 'pay_token_id' is set
      if (pay_token_id === undefined || pay_token_id === null) {
        throw new Error("Missing the required parameter 'pay_token_id' when calling getSwapQuote");
      }
      // verify the required parameter 'receive_token_id' is set
      if (receive_token_id === undefined || receive_token_id === null) {
        throw new Error("Missing the required parameter 'receive_token_id' when calling getSwapQuote");
      }

      let pathParams = {
      };
      let queryParams = {
        'wallet_id': wallet_id,
        'pay_token_id': pay_token_id,
        'receive_token_id': receive_token_id,
        'pay_amount': opts['pay_amount'],
        'receive_amount': opts['receive_amount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SwapQuote;
      return this.apiClient.callApi(
        '/swaps/quote', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Current Swap Rate
     * This operation retrieves the current market exchange rate and estimated amount for swapping between two tokens. Either pay_amount or receive_amount must be provided. 
     * @param {String} wallet_id The wallet ID.
     * @param {String} pay_token_id Unique id of the token to pay.
     * @param {String} receive_token_id Unique id of the token to receive.
     * @param {Object} opts Optional parameters
     * @param {String} opts.pay_amount The amount of pay token to swap.
     * @param {String} opts.receive_amount The amount of token to receive.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SwapQuote}
     */
    getSwapQuote(wallet_id, pay_token_id, receive_token_id, opts) {
      return this.getSwapQuoteWithHttpInfo(wallet_id, pay_token_id, receive_token_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Supported Token Pairs
     * This operation retrieves all supported token pairs for swaps in a specified wallet. 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] The maximum number of objects to return. For most operations, the value range is [1, 50].
     * @param {String} [before] This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set `before` to the ID of Object C (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object A.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. - If you set it to `infinity`, the last page of data is returned. 
     * @param {String} [after] This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set `after` to the ID of Object A (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object C.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListEnableTokenPairs200Response} and HTTP response
     */
    listEnableTokenPairsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListEnableTokenPairs200Response;
      return this.apiClient.callApi(
        '/swaps/enabled_pairs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Supported Token Pairs
     * This operation retrieves all supported token pairs for swaps in a specified wallet. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (default to 10)
     * @param {String} opts.before This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set `before` to the ID of Object C (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object A.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. - If you set it to `infinity`, the last page of data is returned. 
     * @param {String} opts.after This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set `after` to the ID of Object A (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object C.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListEnableTokenPairs200Response}
     */
    listEnableTokenPairs(opts) {
      return this.listEnableTokenPairsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Swap Activities
     * This operation retrieves a list of swap activities. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [status] 
     * @param {Number} [min_updated_timestamp] The start time of the query. All staking activities updated after the specified time will be retrieved. The time is in Unix timestamp format, measured in milliseconds.
     * @param {Number} [max_updated_timestamp] The end time of the query. All staking activities updated before the specified time will be retrieved. The time is in Unix timestamp format, measured in milliseconds.
     * @param {String} [initiator] The activity initiator, which is your API key by default. You can also specify the initiator when creating the activity.
     * @param {Number} [limit = 10)] The maximum number of objects to return. For most operations, the value range is [1, 50].
     * @param {String} [before] This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set `before` to the ID of Object C (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object A.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. - If you set it to `infinity`, the last page of data is returned. 
     * @param {String} [after] This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set `after` to the ID of Object A (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object C.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. 
     * @param {String} [sort_by = '')] The field used for sorting.
     * @param {module:model/String} [direction = '')] The sort direction. Possible values include:   - `ASC`: Sort the results in ascending order.   - `DESC`: Sort the results in descending order. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListSwapActivities200Response} and HTTP response
     */
    listSwapActivitiesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
        'status': opts['status'],
        'min_updated_timestamp': opts['min_updated_timestamp'],
        'max_updated_timestamp': opts['max_updated_timestamp'],
        'initiator': opts['initiator'],
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after'],
        'sort_by': opts['sort_by'],
        'direction': opts['direction']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSwapActivities200Response;
      return this.apiClient.callApi(
        '/swaps/activities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Swap Activities
     * This operation retrieves a list of swap activities. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.status 
     * @param {Number} opts.min_updated_timestamp The start time of the query. All staking activities updated after the specified time will be retrieved. The time is in Unix timestamp format, measured in milliseconds.
     * @param {Number} opts.max_updated_timestamp The end time of the query. All staking activities updated before the specified time will be retrieved. The time is in Unix timestamp format, measured in milliseconds.
     * @param {String} opts.initiator The activity initiator, which is your API key by default. You can also specify the initiator when creating the activity.
     * @param {Number} opts.limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (default to 10)
     * @param {String} opts.before This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set `before` to the ID of Object C (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object A.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. - If you set it to `infinity`, the last page of data is returned. 
     * @param {String} opts.after This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set `after` to the ID of Object A (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object C.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. 
     * @param {String} opts.sort_by The field used for sorting. (default to '')
     * @param {module:model/String} opts.direction The sort direction. Possible values include:   - `ASC`: Sort the results in ascending order.   - `DESC`: Sort the results in descending order.  (default to '')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListSwapActivities200Response}
     */
    listSwapActivities(opts) {
      return this.listSwapActivitiesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
