/**
 * Cobo Wallet as a Service 2.0
 * Cobo WaaS 2.0 enables you to programmatically access Cobo's full suite of crypto wallet technologies with powerful and flexible access controls.  # Wallet technologies - Custodial Wallet - MPC Wallet - Smart Contract Wallet (Based on Safe{Wallet}) - Exchange Wallet  # Risk Control technologies - Workflow - Access Control List (ACL)  # Risk Control targets - Wallet Management   - User/team and their permission management   - Risk control configurations, e.g. whitelist, blacklist, rate-limiting etc. - Blockchain Interaction   - Crypto transfer   - Smart Contract Invocation  # Important HTTPS only. RESTful, resource oriented  # Get Started Set up your APIs or get authorization  # Authentication and Authorization CoboAuth  # Request and Response application/json  # Error Handling  ### Common error codes | Error Code | Description | | -- | -- |  ### API-specific error codes For error codes that are dedicated to a specific API, see the Error codes section in each API specification, for example, /v3/wallets.  # Rate and Usage Limiting  # Idempotent Request  # Pagination # Support [Developer Hub](https://cobo.com/developers) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import ListEvents200Response from '../model/ListEvents200Response';
import ListWebhookEventDefinitions200ResponseInner from '../model/ListWebhookEventDefinitions200ResponseInner';
import RetryWebhookEvent201Response from '../model/RetryWebhookEvent201Response';
import WebhookEvent from '../model/WebhookEvent';
import WebhookEventLog from '../model/WebhookEventLog';
import WebhookEventStatus from '../model/WebhookEventStatus';
import WebhookEventType from '../model/WebhookEventType';

/**
* DevelopersWebhooks service.
* @module api/DevelopersWebhooksApi
* @version 0.1.0
*/
export default class DevelopersWebhooksApi {

    /**
    * Constructs a new DevelopersWebhooksApi. 
    * @alias module:api/DevelopersWebhooksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Retrieve webhook event information by event ID.
     * This operation is used to retrieve a webhook event information by its ID. Get event IDs by calling `List triggered events`. 
     * @param {String} eventId Unique id of the webhook event, get event IDs by calling `List triggered events`.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WebhookEvent} and HTTP response
     */
    getWebhookEventWithHttpInfo(eventId) {
      let postBody = null;
      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling getWebhookEvent");
      }

      let pathParams = {
        'event_id': eventId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebhookEvent;
      return this.apiClient.callApi(
        '/webhooks/events/{event_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve webhook event information by event ID.
     * This operation is used to retrieve a webhook event information by its ID. Get event IDs by calling `List triggered events`. 
     * @param {String} eventId Unique id of the webhook event, get event IDs by calling `List triggered events`.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WebhookEvent}
     */
    getWebhookEvent(eventId) {
      return this.getWebhookEventWithHttpInfo(eventId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List webhook event logs by event ID.
     * This operation is used to retrieve a list of webhook event logs by event ID. Get event IDs by calling `List triggered events`. 
     * @param {String} eventId Unique id of the webhook event, get event IDs by calling `List triggered events`.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/WebhookEventLog>} and HTTP response
     */
    getWebhookEventLogsWithHttpInfo(eventId) {
      let postBody = null;
      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling getWebhookEventLogs");
      }

      let pathParams = {
        'event_id': eventId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [WebhookEventLog];
      return this.apiClient.callApi(
        '/webhooks/events/{event_id}/logs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List webhook event logs by event ID.
     * This operation is used to retrieve a list of webhook event logs by event ID. Get event IDs by calling `List triggered events`. 
     * @param {String} eventId Unique id of the webhook event, get event IDs by calling `List triggered events`.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/WebhookEventLog>}
     */
    getWebhookEventLogs(eventId) {
      return this.getWebhookEventLogsWithHttpInfo(eventId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List triggered events.
     * This operation retrieves a list of events that have been triggered within the system.  The retrieved list of events can be useful for monitoring system activities, setting up event-driven workflows, and integrating with external systems to respond to specific events. 
     * @param {Object} opts Optional parameters
     * @param {module:model/WebhookEventStatus} [status] The status of event.
     * @param {module:model/WebhookEventType} [type] The type of event. Get event types by calling `List all supported event definitions`. 
     * @param {Number} [limit = 10)] size of page to return (pagination)
     * @param {String} [before = '')] Cursor string received from previous request
     * @param {String} [after = '')] Cursor string received from previous request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListEvents200Response} and HTTP response
     */
    listEventsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'status': opts['status'],
        'type': opts['type'],
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListEvents200Response;
      return this.apiClient.callApi(
        '/webhooks/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List triggered events.
     * This operation retrieves a list of events that have been triggered within the system.  The retrieved list of events can be useful for monitoring system activities, setting up event-driven workflows, and integrating with external systems to respond to specific events. 
     * @param {Object} opts Optional parameters
     * @param {module:model/WebhookEventStatus} opts.status The status of event.
     * @param {module:model/WebhookEventType} opts.type The type of event. Get event types by calling `List all supported event definitions`. 
     * @param {Number} opts.limit size of page to return (pagination) (default to 10)
     * @param {String} opts.before Cursor string received from previous request (default to '')
     * @param {String} opts.after Cursor string received from previous request (default to '')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListEvents200Response}
     */
    listEvents(opts) {
      return this.listEventsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all supported event definitions.
     * This operation is used to retrieve a list of all supported event definitions in the current system.  These event definitions include different event types that trigger webhooks, enabling custom notifications and integration features within the system. A successful call to this endpoint will return a detailed list of event definitions. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ListWebhookEventDefinitions200ResponseInner>} and HTTP response
     */
    listWebhookEventDefinitionsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ListWebhookEventDefinitions200ResponseInner];
      return this.apiClient.callApi(
        '/webhooks/events/definitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all supported event definitions.
     * This operation is used to retrieve a list of all supported event definitions in the current system.  These event definitions include different event types that trigger webhooks, enabling custom notifications and integration features within the system. A successful call to this endpoint will return a detailed list of event definitions. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ListWebhookEventDefinitions200ResponseInner>}
     */
    listWebhookEventDefinitions() {
      return this.listWebhookEventDefinitionsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retry webhook event by event ID.
     * This operation is used to retry a webhook event by its ID. Events in `Retrying` or `Failed` status can be retried. Get event IDs by calling `List triggered events`. 
     * @param {String} eventId Unique id of the webhook event, get event IDs by calling `List triggered events`.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RetryWebhookEvent201Response} and HTTP response
     */
    retryWebhookEventWithHttpInfo(eventId) {
      let postBody = null;
      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling retryWebhookEvent");
      }

      let pathParams = {
        'event_id': eventId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RetryWebhookEvent201Response;
      return this.apiClient.callApi(
        '/webhooks/events/{event_id}/retry', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retry webhook event by event ID.
     * This operation is used to retry a webhook event by its ID. Events in `Retrying` or `Failed` status can be retried. Get event IDs by calling `List triggered events`. 
     * @param {String} eventId Unique id of the webhook event, get event IDs by calling `List triggered events`.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RetryWebhookEvent201Response}
     */
    retryWebhookEvent(eventId) {
      return this.retryWebhookEventWithHttpInfo(eventId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
