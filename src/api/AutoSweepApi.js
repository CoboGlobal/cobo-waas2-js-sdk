/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateSweepToAddress from '../model/CreateSweepToAddress';
import ErrorResponse from '../model/ErrorResponse';
import ListWalletSweepToAddresses200Response from '../model/ListWalletSweepToAddresses200Response';
import SweepToAddress from '../model/SweepToAddress';

/**
* AutoSweep service.
* @module api/AutoSweepApi
*/
export default class AutoSweepApi {

    /**
    * Constructs a new AutoSweepApi. 
    * @alias module:api/AutoSweepApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * create wallet sweep to addresses
     * This operation create a new sweep to address for the wallet. The old sweep to address will become invalid. 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateSweepToAddress} [CreateSweepToAddress] The request body to generates a new sweep to addresses within a specified wallet.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SweepToAddress} and HTTP response
     */
    createWalletSweepToAddressesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['CreateSweepToAddress'];
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SweepToAddress;
      return this.apiClient.callApi(
        '/auto_sweep/sweep_to_addresses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * create wallet sweep to addresses
     * This operation create a new sweep to address for the wallet. The old sweep to address will become invalid. 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateSweepToAddress} opts.CreateSweepToAddress The request body to generates a new sweep to addresses within a specified wallet.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SweepToAddress}
     */
    createWalletSweepToAddresses(opts) {
      return this.createWalletSweepToAddressesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List wallet sweep to addresses
     * This operation retrieves a list of sweep to addresses within your wallet. 
     * @param {String} wallet_id The wallet ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListWalletSweepToAddresses200Response} and HTTP response
     */
    listWalletSweepToAddressesWithHttpInfo(wallet_id) {
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'wallet_id' is set
      if (wallet_id === undefined || wallet_id === null) {
        throw new Error("Missing the required parameter 'wallet_id' when calling listWalletSweepToAddresses");
      }

      let pathParams = {
      };
      let queryParams = {
        'wallet_id': wallet_id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListWalletSweepToAddresses200Response;
      return this.apiClient.callApi(
        '/auto_sweep/sweep_to_addresses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List wallet sweep to addresses
     * This operation retrieves a list of sweep to addresses within your wallet. 
     * @param {String} wallet_id The wallet ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListWalletSweepToAddresses200Response}
     */
    listWalletSweepToAddresses(wallet_id) {
      return this.listWalletSweepToAddressesWithHttpInfo(wallet_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
