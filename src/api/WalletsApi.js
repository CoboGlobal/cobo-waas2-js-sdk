/**
 * Cobo Wallet as a Service 2.0
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddWalletAddressRequest from '../model/AddWalletAddressRequest';
import AddressInfo from '../model/AddressInfo';
import CreatedWallet from '../model/CreatedWallet';
import ErrorResponse from '../model/ErrorResponse';
import GetAddressValidity200Response from '../model/GetAddressValidity200Response';
import GetChains200Response from '../model/GetChains200Response';
import GetTokens200Response from '../model/GetTokens200Response';
import GetWalletTokenBalances200Response from '../model/GetWalletTokenBalances200Response';
import ListAddresses200Response from '../model/ListAddresses200Response';
import ListWallets200Response from '../model/ListWallets200Response';
import MaxTransferableValue from '../model/MaxTransferableValue';
import UTXO from '../model/UTXO';
import UpdateWalletByIdRequest from '../model/UpdateWalletByIdRequest';
import WalletInfo from '../model/WalletInfo';
import WalletSubtype from '../model/WalletSubtype';
import WalletType from '../model/WalletType';

/**
* Wallets service.
* @module api/WalletsApi
* @version 0.1.0
*/
export default class WalletsApi {

    /**
    * Constructs a new WalletsApi. 
    * @alias module:api/WalletsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Add address to wallet
     * Add an address to a wallet.  Error codes this API may return: | Error Code | Description | | -- | -- | | `2006` | 参数格式或者值非法 | 
     * @param {String} walletId Unique id of the wallet
     * @param {Object} opts Optional parameters
     * @param {module:model/AddWalletAddressRequest} [addWalletAddressRequest] The request body to add address for a wallet
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/AddressInfo>} and HTTP response
     */
    addWalletAddressWithHttpInfo(walletId, opts) {
      opts = opts || {};
      let postBody = opts['addWalletAddressRequest'];
      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling addWalletAddress");
      }

      let pathParams = {
        'wallet_id': walletId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [AddressInfo];
      return this.apiClient.callApi(
        '/wallets/{wallet_id}/addresses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add address to wallet
     * Add an address to a wallet.  Error codes this API may return: | Error Code | Description | | -- | -- | | `2006` | 参数格式或者值非法 | 
     * @param {String} walletId Unique id of the wallet
     * @param {Object} opts Optional parameters
     * @param {module:model/AddWalletAddressRequest} opts.addWalletAddressRequest The request body to add address for a wallet
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/AddressInfo>}
     */
    addWalletAddress(walletId, opts) {
      return this.addWalletAddressWithHttpInfo(walletId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create new wallet
     * Creates a new wallet with the provided information.  Error codes this API may return: | Error Code | Description | | -- | -- | | `2003` | 必选参数缺失 | | `2006` | 参数格式或者值非法 | 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreatedWallet} [createdWallet] The request body to create a wallet
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WalletInfo} and HTTP response
     */
    createWalletWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['createdWallet'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WalletInfo;
      return this.apiClient.callApi(
        '/wallets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create new wallet
     * Creates a new wallet with the provided information.  Error codes this API may return: | Error Code | Description | | -- | -- | | `2003` | 必选参数缺失 | | `2006` | 参数格式或者值非法 | 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreatedWallet} opts.createdWallet The request body to create a wallet
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WalletInfo}
     */
    createWallet(opts) {
      return this.createWalletWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete wallet by ID
     * Deletes a specific wallet identified by its ID. This endpoint is supported by Exchange wallets only.  Error codes this API may return: | Error Code | Description | | -- | -- | | `2006` | 参数格式或者值非法 | 
     * @param {String} walletId Unique id of the wallet
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteWalletByIdWithHttpInfo(walletId) {
      let postBody = null;
      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling deleteWalletById");
      }

      let pathParams = {
        'wallet_id': walletId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/wallets/{wallet_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete wallet by ID
     * Deletes a specific wallet identified by its ID. This endpoint is supported by Exchange wallets only.  Error codes this API may return: | Error Code | Description | | -- | -- | | `2006` | 参数格式或者值非法 | 
     * @param {String} walletId Unique id of the wallet
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteWalletById(walletId) {
      return this.deleteWalletByIdWithHttpInfo(walletId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Check address validity
     * Verifies if the given address is valid for the specified token. Error codes this API may return:   | Error Code | Description |   | -- | -- |   | `2006` | 参数格式或者值非法 | 
     * @param {String} tokenId Unique id of the token
     * @param {String} addressStr The address string
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetAddressValidity200Response} and HTTP response
     */
    getAddressValidityWithHttpInfo(tokenId, addressStr) {
      let postBody = null;
      // verify the required parameter 'tokenId' is set
      if (tokenId === undefined || tokenId === null) {
        throw new Error("Missing the required parameter 'tokenId' when calling getAddressValidity");
      }
      // verify the required parameter 'addressStr' is set
      if (addressStr === undefined || addressStr === null) {
        throw new Error("Missing the required parameter 'addressStr' when calling getAddressValidity");
      }

      let pathParams = {
      };
      let queryParams = {
        'token_id': tokenId,
        'address_str': addressStr
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAddressValidity200Response;
      return this.apiClient.callApi(
        '/wallets/address/validity', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Check address validity
     * Verifies if the given address is valid for the specified token. Error codes this API may return:   | Error Code | Description |   | -- | -- |   | `2006` | 参数格式或者值非法 | 
     * @param {String} tokenId Unique id of the token
     * @param {String} addressStr The address string
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetAddressValidity200Response}
     */
    getAddressValidity(tokenId, addressStr) {
      return this.getAddressValidityWithHttpInfo(tokenId, addressStr)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List chain metadata
     * This endpoint retrieves metadata for available blockchain chains. It provides details such as chain_id, name, and other relevant information. Pagination parameters can be used to manage the size of the response. The chain list is publicly accessible without any permission restrictions.  Error codes this API may return:   | Error Code | Description |   | -- | -- |   | `2006` | 参数格式或者值非法 | 
     * @param {Object} opts Optional parameters
     * @param {String} [chainId] Unique id of the chain
     * @param {Number} [limit = 10)] The maximum number of objects to return. The value range is [1, 50].
     * @param {String} [before] An object ID which serves as a cursor for pagination. For example, if you specify `before` as `foo`, the request will retrieve a list of data objects that end before the object with the object ID `foo`. You can set this parameter to the value of `pagination.after` in the response of the previous request. If you set both `after` or `before`, only the setting of `before` will take effect.
     * @param {String} [after] An object ID which serves as a cursor for pagination. For example, if you specify `after` as `bar`, the request will retrieve a list of data objects that start after the object with the object ID `bar`. You can set this parameter to the value of `pagination.before` in the response of the previous request. If you set both `after` or `before`, only the setting of `before` will take effect.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetChains200Response} and HTTP response
     */
    getChainsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'chain_id': opts['chainId'],
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetChains200Response;
      return this.apiClient.callApi(
        '/wallets/chains', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List chain metadata
     * This endpoint retrieves metadata for available blockchain chains. It provides details such as chain_id, name, and other relevant information. Pagination parameters can be used to manage the size of the response. The chain list is publicly accessible without any permission restrictions.  Error codes this API may return:   | Error Code | Description |   | -- | -- |   | `2006` | 参数格式或者值非法 | 
     * @param {Object} opts Optional parameters
     * @param {String} opts.chainId Unique id of the chain
     * @param {Number} opts.limit The maximum number of objects to return. The value range is [1, 50]. (default to 10)
     * @param {String} opts.before An object ID which serves as a cursor for pagination. For example, if you specify `before` as `foo`, the request will retrieve a list of data objects that end before the object with the object ID `foo`. You can set this parameter to the value of `pagination.after` in the response of the previous request. If you set both `after` or `before`, only the setting of `before` will take effect.
     * @param {String} opts.after An object ID which serves as a cursor for pagination. For example, if you specify `after` as `bar`, the request will retrieve a list of data objects that start after the object with the object ID `bar`. You can set this parameter to the value of `pagination.before` in the response of the previous request. If you set both `after` or `before`, only the setting of `before` will take effect.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetChains200Response}
     */
    getChains(opts) {
      return this.getChainsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List enabled chains
     * This endpoint allows users to query enabled chains based on wallet type and subtype  for the organization associated with the API key. Pagination parameters can be used to manage the response size. Wallet type/subtype are enumerations as described in parameters.  Error codes this API may return:   | Error Code | Description |   | -- | -- |   | `2006` | 参数格式或者值非法 | 
     * @param {Object} opts Optional parameters
     * @param {module:model/WalletType} [walletType] Wallet type to query
     * @param {module:model/WalletSubtype} [walletSubtype] Wallet subtype to query
     * @param {Number} [limit = 10)] The maximum number of objects to return. The value range is [1, 50].
     * @param {String} [before] An object ID which serves as a cursor for pagination. For example, if you specify `before` as `foo`, the request will retrieve a list of data objects that end before the object with the object ID `foo`. You can set this parameter to the value of `pagination.after` in the response of the previous request. If you set both `after` or `before`, only the setting of `before` will take effect.
     * @param {String} [after] An object ID which serves as a cursor for pagination. For example, if you specify `after` as `bar`, the request will retrieve a list of data objects that start after the object with the object ID `bar`. You can set this parameter to the value of `pagination.before` in the response of the previous request. If you set both `after` or `before`, only the setting of `before` will take effect.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetChains200Response} and HTTP response
     */
    getEnabledChainsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'wallet_type': opts['walletType'],
        'wallet_subtype': opts['walletSubtype'],
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetChains200Response;
      return this.apiClient.callApi(
        '/wallets/enabled_chains', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List enabled chains
     * This endpoint allows users to query enabled chains based on wallet type and subtype  for the organization associated with the API key. Pagination parameters can be used to manage the response size. Wallet type/subtype are enumerations as described in parameters.  Error codes this API may return:   | Error Code | Description |   | -- | -- |   | `2006` | 参数格式或者值非法 | 
     * @param {Object} opts Optional parameters
     * @param {module:model/WalletType} opts.walletType Wallet type to query
     * @param {module:model/WalletSubtype} opts.walletSubtype Wallet subtype to query
     * @param {Number} opts.limit The maximum number of objects to return. The value range is [1, 50]. (default to 10)
     * @param {String} opts.before An object ID which serves as a cursor for pagination. For example, if you specify `before` as `foo`, the request will retrieve a list of data objects that end before the object with the object ID `foo`. You can set this parameter to the value of `pagination.after` in the response of the previous request. If you set both `after` or `before`, only the setting of `before` will take effect.
     * @param {String} opts.after An object ID which serves as a cursor for pagination. For example, if you specify `after` as `bar`, the request will retrieve a list of data objects that start after the object with the object ID `bar`. You can set this parameter to the value of `pagination.before` in the response of the previous request. If you set both `after` or `before`, only the setting of `before` will take effect.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetChains200Response}
     */
    getEnabledChains(opts) {
      return this.getEnabledChainsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List enabled tokens
     * This endpoint allows users to query enabled tokens based on wallet type, subtype,  and chain ID if specified for the organization associated with the API key. Pagination parameters can be used to manage the response size. Wallet type/subtype are enumerations as described in parameters. Chain_id can be get via List enabled chains.  Error codes this API may return:   | Error Code | Description |   | -- | -- |   | `2006` | 参数格式或者值非法 | 
     * @param {Object} opts Optional parameters
     * @param {module:model/WalletType} [walletType] Wallet type to query
     * @param {module:model/WalletSubtype} [walletSubtype] Wallet subtype to query
     * @param {String} [chainId] Unique id of the chain
     * @param {Number} [limit = 10)] The maximum number of objects to return. The value range is [1, 50].
     * @param {String} [before] An object ID which serves as a cursor for pagination. For example, if you specify `before` as `foo`, the request will retrieve a list of data objects that end before the object with the object ID `foo`. You can set this parameter to the value of `pagination.after` in the response of the previous request. If you set both `after` or `before`, only the setting of `before` will take effect.
     * @param {String} [after] An object ID which serves as a cursor for pagination. For example, if you specify `after` as `bar`, the request will retrieve a list of data objects that start after the object with the object ID `bar`. You can set this parameter to the value of `pagination.before` in the response of the previous request. If you set both `after` or `before`, only the setting of `before` will take effect.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetTokens200Response} and HTTP response
     */
    getEnabledTokensWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'wallet_type': opts['walletType'],
        'wallet_subtype': opts['walletSubtype'],
        'chain_id': opts['chainId'],
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetTokens200Response;
      return this.apiClient.callApi(
        '/wallets/enabled_tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List enabled tokens
     * This endpoint allows users to query enabled tokens based on wallet type, subtype,  and chain ID if specified for the organization associated with the API key. Pagination parameters can be used to manage the response size. Wallet type/subtype are enumerations as described in parameters. Chain_id can be get via List enabled chains.  Error codes this API may return:   | Error Code | Description |   | -- | -- |   | `2006` | 参数格式或者值非法 | 
     * @param {Object} opts Optional parameters
     * @param {module:model/WalletType} opts.walletType Wallet type to query
     * @param {module:model/WalletSubtype} opts.walletSubtype Wallet subtype to query
     * @param {String} opts.chainId Unique id of the chain
     * @param {Number} opts.limit The maximum number of objects to return. The value range is [1, 50]. (default to 10)
     * @param {String} opts.before An object ID which serves as a cursor for pagination. For example, if you specify `before` as `foo`, the request will retrieve a list of data objects that end before the object with the object ID `foo`. You can set this parameter to the value of `pagination.after` in the response of the previous request. If you set both `after` or `before`, only the setting of `before` will take effect.
     * @param {String} opts.after An object ID which serves as a cursor for pagination. For example, if you specify `after` as `bar`, the request will retrieve a list of data objects that start after the object with the object ID `bar`. You can set this parameter to the value of `pagination.before` in the response of the previous request. If you set both `after` or `before`, only the setting of `before` will take effect.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetTokens200Response}
     */
    getEnabledTokens(opts) {
      return this.getEnabledTokensWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get max transferable value
     * Retrieves the maximum transferable value and the corresponding transaction fee for a given address. This endpoint allows users to determine the maximum amount that can be transferred from a wallet address, along with the associated transaction fee.  Error codes this API may return:     | Error Code | Description |     | -- | -- |     | `2006` | 参数格式或者值非法 | 
     * @param {String} walletId Unique id of the wallet
     * @param {String} toAddress address
     * @param {Object} opts Optional parameters
     * @param {String} [fromAddress] address
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MaxTransferableValue} and HTTP response
     */
    getMaxTransferableValueWithHttpInfo(walletId, toAddress, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling getMaxTransferableValue");
      }
      // verify the required parameter 'toAddress' is set
      if (toAddress === undefined || toAddress === null) {
        throw new Error("Missing the required parameter 'toAddress' when calling getMaxTransferableValue");
      }

      let pathParams = {
        'wallet_id': walletId
      };
      let queryParams = {
        'to_address': toAddress,
        'from_address': opts['fromAddress']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MaxTransferableValue;
      return this.apiClient.callApi(
        '/wallets/{wallet_id}/max_transferable_value', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get max transferable value
     * Retrieves the maximum transferable value and the corresponding transaction fee for a given address. This endpoint allows users to determine the maximum amount that can be transferred from a wallet address, along with the associated transaction fee.  Error codes this API may return:     | Error Code | Description |     | -- | -- |     | `2006` | 参数格式或者值非法 | 
     * @param {String} walletId Unique id of the wallet
     * @param {String} toAddress address
     * @param {Object} opts Optional parameters
     * @param {String} opts.fromAddress address
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MaxTransferableValue}
     */
    getMaxTransferableValue(walletId, toAddress, opts) {
      return this.getMaxTransferableValueWithHttpInfo(walletId, toAddress, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List spendable UTXOs
     * Retrieves a list of spendable unspent transaction outputs (UTXOs) for a given wallet and token. This endpoint allows users to query UTXOs that can be spent in transactions.  Error codes this API may return:   | Error Code | Description |   | -- | -- |   | `2006` | 参数格式或者值非法 | 
     * @param {String} walletId Unique id of the wallet
     * @param {String} tokenId Unique id of the token
     * @param {Object} opts Optional parameters
     * @param {String} [addressStr] address
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/UTXO>} and HTTP response
     */
    getSpendableListWithHttpInfo(walletId, tokenId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling getSpendableList");
      }
      // verify the required parameter 'tokenId' is set
      if (tokenId === undefined || tokenId === null) {
        throw new Error("Missing the required parameter 'tokenId' when calling getSpendableList");
      }

      let pathParams = {
        'wallet_id': walletId
      };
      let queryParams = {
        'token_id': tokenId,
        'address_str': opts['addressStr']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UTXO];
      return this.apiClient.callApi(
        '/wallets/{wallet_id}/spendables', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List spendable UTXOs
     * Retrieves a list of spendable unspent transaction outputs (UTXOs) for a given wallet and token. This endpoint allows users to query UTXOs that can be spent in transactions.  Error codes this API may return:   | Error Code | Description |   | -- | -- |   | `2006` | 参数格式或者值非法 | 
     * @param {String} walletId Unique id of the wallet
     * @param {String} tokenId Unique id of the token
     * @param {Object} opts Optional parameters
     * @param {String} opts.addressStr address
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/UTXO>}
     */
    getSpendableList(walletId, tokenId, opts) {
      return this.getSpendableListWithHttpInfo(walletId, tokenId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List supported chains
     * This endpoint allows users to query supported chains based on wallet type and subtype.  Pagination parameters can be used to manage the response size. Wallet type/subtype are enumerations as described in parameters.  Error codes this API may return:   | Error Code | Description |   | -- | -- |   | `2006` | 参数格式或者值非法 | 
     * @param {Object} opts Optional parameters
     * @param {module:model/WalletType} [walletType] Wallet type to query
     * @param {module:model/WalletSubtype} [walletSubtype] Wallet subtype to query
     * @param {Number} [limit = 10)] The maximum number of objects to return. The value range is [1, 50].
     * @param {String} [before] An object ID which serves as a cursor for pagination. For example, if you specify `before` as `foo`, the request will retrieve a list of data objects that end before the object with the object ID `foo`. You can set this parameter to the value of `pagination.after` in the response of the previous request. If you set both `after` or `before`, only the setting of `before` will take effect.
     * @param {String} [after] An object ID which serves as a cursor for pagination. For example, if you specify `after` as `bar`, the request will retrieve a list of data objects that start after the object with the object ID `bar`. You can set this parameter to the value of `pagination.before` in the response of the previous request. If you set both `after` or `before`, only the setting of `before` will take effect.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetChains200Response} and HTTP response
     */
    getSupportedChainsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'wallet_type': opts['walletType'],
        'wallet_subtype': opts['walletSubtype'],
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetChains200Response;
      return this.apiClient.callApi(
        '/wallets/supported_chains', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List supported chains
     * This endpoint allows users to query supported chains based on wallet type and subtype.  Pagination parameters can be used to manage the response size. Wallet type/subtype are enumerations as described in parameters.  Error codes this API may return:   | Error Code | Description |   | -- | -- |   | `2006` | 参数格式或者值非法 | 
     * @param {Object} opts Optional parameters
     * @param {module:model/WalletType} opts.walletType Wallet type to query
     * @param {module:model/WalletSubtype} opts.walletSubtype Wallet subtype to query
     * @param {Number} opts.limit The maximum number of objects to return. The value range is [1, 50]. (default to 10)
     * @param {String} opts.before An object ID which serves as a cursor for pagination. For example, if you specify `before` as `foo`, the request will retrieve a list of data objects that end before the object with the object ID `foo`. You can set this parameter to the value of `pagination.after` in the response of the previous request. If you set both `after` or `before`, only the setting of `before` will take effect.
     * @param {String} opts.after An object ID which serves as a cursor for pagination. For example, if you specify `after` as `bar`, the request will retrieve a list of data objects that start after the object with the object ID `bar`. You can set this parameter to the value of `pagination.before` in the response of the previous request. If you set both `after` or `before`, only the setting of `before` will take effect.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetChains200Response}
     */
    getSupportedChains(opts) {
      return this.getSupportedChainsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List supported tokens
     * This endpoint allows users to query supported tokens based on wallet type, subtype, and chain ID if specified. Pagination parameters can be used to manage the response size. Wallet type/subtype are enumerations as described in parameters. Chain_id can be get via List supported chains.  Error codes this API may return:   | Error Code | Description |   | -- | -- |   | `2006` | 参数格式或者值非法 | 
     * @param {Object} opts Optional parameters
     * @param {module:model/WalletType} [walletType] Wallet type to query
     * @param {module:model/WalletSubtype} [walletSubtype] Wallet subtype to query
     * @param {String} [chainId] Unique id of the chain
     * @param {Number} [limit = 10)] The maximum number of objects to return. The value range is [1, 50].
     * @param {String} [before] An object ID which serves as a cursor for pagination. For example, if you specify `before` as `foo`, the request will retrieve a list of data objects that end before the object with the object ID `foo`. You can set this parameter to the value of `pagination.after` in the response of the previous request. If you set both `after` or `before`, only the setting of `before` will take effect.
     * @param {String} [after] An object ID which serves as a cursor for pagination. For example, if you specify `after` as `bar`, the request will retrieve a list of data objects that start after the object with the object ID `bar`. You can set this parameter to the value of `pagination.before` in the response of the previous request. If you set both `after` or `before`, only the setting of `before` will take effect.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetTokens200Response} and HTTP response
     */
    getSupportedTokensWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'wallet_type': opts['walletType'],
        'wallet_subtype': opts['walletSubtype'],
        'chain_id': opts['chainId'],
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetTokens200Response;
      return this.apiClient.callApi(
        '/wallets/supported_tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List supported tokens
     * This endpoint allows users to query supported tokens based on wallet type, subtype, and chain ID if specified. Pagination parameters can be used to manage the response size. Wallet type/subtype are enumerations as described in parameters. Chain_id can be get via List supported chains.  Error codes this API may return:   | Error Code | Description |   | -- | -- |   | `2006` | 参数格式或者值非法 | 
     * @param {Object} opts Optional parameters
     * @param {module:model/WalletType} opts.walletType Wallet type to query
     * @param {module:model/WalletSubtype} opts.walletSubtype Wallet subtype to query
     * @param {String} opts.chainId Unique id of the chain
     * @param {Number} opts.limit The maximum number of objects to return. The value range is [1, 50]. (default to 10)
     * @param {String} opts.before An object ID which serves as a cursor for pagination. For example, if you specify `before` as `foo`, the request will retrieve a list of data objects that end before the object with the object ID `foo`. You can set this parameter to the value of `pagination.after` in the response of the previous request. If you set both `after` or `before`, only the setting of `before` will take effect.
     * @param {String} opts.after An object ID which serves as a cursor for pagination. For example, if you specify `after` as `bar`, the request will retrieve a list of data objects that start after the object with the object ID `bar`. You can set this parameter to the value of `pagination.before` in the response of the previous request. If you set both `after` or `before`, only the setting of `before` will take effect.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetTokens200Response}
     */
    getSupportedTokens(opts) {
      return this.getSupportedTokensWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List token metadata
     * This endpoint retrieves metadata for tokens stored in the wallet system. It provides details such as token_id, symbol, and other relevant information. Pagination parameters can be used to manage the size of the response. The token list is publicly accessible without any permission restrictions.  Error codes this API may return:   | Error Code | Description |   | -- | -- |   | `2006` | 参数格式或者值非法 | 
     * @param {Object} opts Optional parameters
     * @param {String} [tokenId] Unique id of the token
     * @param {Number} [limit = 10)] The maximum number of objects to return. The value range is [1, 50].
     * @param {String} [before] An object ID which serves as a cursor for pagination. For example, if you specify `before` as `foo`, the request will retrieve a list of data objects that end before the object with the object ID `foo`. You can set this parameter to the value of `pagination.after` in the response of the previous request. If you set both `after` or `before`, only the setting of `before` will take effect.
     * @param {String} [after] An object ID which serves as a cursor for pagination. For example, if you specify `after` as `bar`, the request will retrieve a list of data objects that start after the object with the object ID `bar`. You can set this parameter to the value of `pagination.before` in the response of the previous request. If you set both `after` or `before`, only the setting of `before` will take effect.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetTokens200Response} and HTTP response
     */
    getTokensWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'token_id': opts['tokenId'],
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetTokens200Response;
      return this.apiClient.callApi(
        '/wallets/tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List token metadata
     * This endpoint retrieves metadata for tokens stored in the wallet system. It provides details such as token_id, symbol, and other relevant information. Pagination parameters can be used to manage the size of the response. The token list is publicly accessible without any permission restrictions.  Error codes this API may return:   | Error Code | Description |   | -- | -- |   | `2006` | 参数格式或者值非法 | 
     * @param {Object} opts Optional parameters
     * @param {String} opts.tokenId Unique id of the token
     * @param {Number} opts.limit The maximum number of objects to return. The value range is [1, 50]. (default to 10)
     * @param {String} opts.before An object ID which serves as a cursor for pagination. For example, if you specify `before` as `foo`, the request will retrieve a list of data objects that end before the object with the object ID `foo`. You can set this parameter to the value of `pagination.after` in the response of the previous request. If you set both `after` or `before`, only the setting of `before` will take effect.
     * @param {String} opts.after An object ID which serves as a cursor for pagination. For example, if you specify `after` as `bar`, the request will retrieve a list of data objects that start after the object with the object ID `bar`. You can set this parameter to the value of `pagination.before` in the response of the previous request. If you set both `after` or `before`, only the setting of `before` will take effect.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetTokens200Response}
     */
    getTokens(opts) {
      return this.getTokensWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Token Balances by Address in Wallet
     * Retrieves a list of token balances for a specific address within a wallet. This endpoint allows users to query token balances based on the wallet ID, address ID, and optionally token ID. Pagination parameters can be used to manage the response size. This endpoint is supported by MPC wallets.  Error codes this API may return:     | Error Code | Description |     | -- | -- |     | `2006` | 参数格式或者值非法 | 
     * @param {String} walletId Unique id of the wallet
     * @param {String} addressId Unique id of the address
     * @param {Object} opts Optional parameters
     * @param {String} [tokenId] Unique id of the token
     * @param {Number} [limit = 10)] The maximum number of objects to return. The value range is [1, 50].
     * @param {String} [before] An object ID which serves as a cursor for pagination. For example, if you specify `before` as `foo`, the request will retrieve a list of data objects that end before the object with the object ID `foo`. You can set this parameter to the value of `pagination.after` in the response of the previous request. If you set both `after` or `before`, only the setting of `before` will take effect.
     * @param {String} [after] An object ID which serves as a cursor for pagination. For example, if you specify `after` as `bar`, the request will retrieve a list of data objects that start after the object with the object ID `bar`. You can set this parameter to the value of `pagination.before` in the response of the previous request. If you set both `after` or `before`, only the setting of `before` will take effect.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetWalletTokenBalances200Response} and HTTP response
     */
    getWalletAddressTokenBalancesWithHttpInfo(walletId, addressId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling getWalletAddressTokenBalances");
      }
      // verify the required parameter 'addressId' is set
      if (addressId === undefined || addressId === null) {
        throw new Error("Missing the required parameter 'addressId' when calling getWalletAddressTokenBalances");
      }

      let pathParams = {
        'wallet_id': walletId,
        'address_id': addressId
      };
      let queryParams = {
        'token_id': opts['tokenId'],
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetWalletTokenBalances200Response;
      return this.apiClient.callApi(
        '/wallets/{wallet_id}/addresses/{address_id}/tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Token Balances by Address in Wallet
     * Retrieves a list of token balances for a specific address within a wallet. This endpoint allows users to query token balances based on the wallet ID, address ID, and optionally token ID. Pagination parameters can be used to manage the response size. This endpoint is supported by MPC wallets.  Error codes this API may return:     | Error Code | Description |     | -- | -- |     | `2006` | 参数格式或者值非法 | 
     * @param {String} walletId Unique id of the wallet
     * @param {String} addressId Unique id of the address
     * @param {Object} opts Optional parameters
     * @param {String} opts.tokenId Unique id of the token
     * @param {Number} opts.limit The maximum number of objects to return. The value range is [1, 50]. (default to 10)
     * @param {String} opts.before An object ID which serves as a cursor for pagination. For example, if you specify `before` as `foo`, the request will retrieve a list of data objects that end before the object with the object ID `foo`. You can set this parameter to the value of `pagination.after` in the response of the previous request. If you set both `after` or `before`, only the setting of `before` will take effect.
     * @param {String} opts.after An object ID which serves as a cursor for pagination. For example, if you specify `after` as `bar`, the request will retrieve a list of data objects that start after the object with the object ID `bar`. You can set this parameter to the value of `pagination.before` in the response of the previous request. If you set both `after` or `before`, only the setting of `before` will take effect.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetWalletTokenBalances200Response}
     */
    getWalletAddressTokenBalances(walletId, addressId, opts) {
      return this.getWalletAddressTokenBalancesWithHttpInfo(walletId, addressId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve wallet information by ID
     * Retrieves detailed information about a wallet identified by its unique ID.  Error codes this API may return:   | Error Code | Description |   | -- | -- |   | `2006` | 参数格式或者值非法 | 
     * @param {String} walletId Unique id of the wallet
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WalletInfo} and HTTP response
     */
    getWalletByIdWithHttpInfo(walletId) {
      let postBody = null;
      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling getWalletById");
      }

      let pathParams = {
        'wallet_id': walletId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WalletInfo;
      return this.apiClient.callApi(
        '/wallets/{wallet_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve wallet information by ID
     * Retrieves detailed information about a wallet identified by its unique ID.  Error codes this API may return:   | Error Code | Description |   | -- | -- |   | `2006` | 参数格式或者值非法 | 
     * @param {String} walletId Unique id of the wallet
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WalletInfo}
     */
    getWalletById(walletId) {
      return this.getWalletByIdWithHttpInfo(walletId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Token Balances in Wallet
     * Retrieves a list of token balances within a wallet. This endpoint allows users to query token balances based on the wallet ID and optionally token ID. Pagination parameters can be used to manage the response size. This endpoint is supported by Custodial/MPC wallets.  Error codes this API may return:   | Error Code | Description |   | -- | -- |   | `2006` | 参数格式或者值非法 | 
     * @param {String} walletId Unique id of the wallet
     * @param {Object} opts Optional parameters
     * @param {String} [tokenId] Unique id of the token
     * @param {Number} [limit = 10)] The maximum number of objects to return. The value range is [1, 50].
     * @param {String} [before] An object ID which serves as a cursor for pagination. For example, if you specify `before` as `foo`, the request will retrieve a list of data objects that end before the object with the object ID `foo`. You can set this parameter to the value of `pagination.after` in the response of the previous request. If you set both `after` or `before`, only the setting of `before` will take effect.
     * @param {String} [after] An object ID which serves as a cursor for pagination. For example, if you specify `after` as `bar`, the request will retrieve a list of data objects that start after the object with the object ID `bar`. You can set this parameter to the value of `pagination.before` in the response of the previous request. If you set both `after` or `before`, only the setting of `before` will take effect.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetWalletTokenBalances200Response} and HTTP response
     */
    getWalletTokenBalancesWithHttpInfo(walletId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling getWalletTokenBalances");
      }

      let pathParams = {
        'wallet_id': walletId
      };
      let queryParams = {
        'token_id': opts['tokenId'],
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetWalletTokenBalances200Response;
      return this.apiClient.callApi(
        '/wallets/{wallet_id}/tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Token Balances in Wallet
     * Retrieves a list of token balances within a wallet. This endpoint allows users to query token balances based on the wallet ID and optionally token ID. Pagination parameters can be used to manage the response size. This endpoint is supported by Custodial/MPC wallets.  Error codes this API may return:   | Error Code | Description |   | -- | -- |   | `2006` | 参数格式或者值非法 | 
     * @param {String} walletId Unique id of the wallet
     * @param {Object} opts Optional parameters
     * @param {String} opts.tokenId Unique id of the token
     * @param {Number} opts.limit The maximum number of objects to return. The value range is [1, 50]. (default to 10)
     * @param {String} opts.before An object ID which serves as a cursor for pagination. For example, if you specify `before` as `foo`, the request will retrieve a list of data objects that end before the object with the object ID `foo`. You can set this parameter to the value of `pagination.after` in the response of the previous request. If you set both `after` or `before`, only the setting of `before` will take effect.
     * @param {String} opts.after An object ID which serves as a cursor for pagination. For example, if you specify `after` as `bar`, the request will retrieve a list of data objects that start after the object with the object ID `bar`. You can set this parameter to the value of `pagination.before` in the response of the previous request. If you set both `after` or `before`, only the setting of `before` will take effect.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetWalletTokenBalances200Response}
     */
    getWalletTokenBalances(walletId, opts) {
      return this.getWalletTokenBalancesWithHttpInfo(walletId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List wallet addresses by wallet ID
     * Retrieve a list of addresses associated with a wallet.  Error codes this API may return:   | Error Code | Description |   | -- | -- |   | `2006` | 参数格式或者值非法 | 
     * @param {String} walletId Unique id of the wallet
     * @param {Object} opts Optional parameters
     * @param {String} [tokenId] Unique id of the token
     * @param {String} [addressStr] address
     * @param {Number} [limit = 10)] The maximum number of objects to return. The value range is [1, 50].
     * @param {String} [before] An object ID which serves as a cursor for pagination. For example, if you specify `before` as `foo`, the request will retrieve a list of data objects that end before the object with the object ID `foo`. You can set this parameter to the value of `pagination.after` in the response of the previous request. If you set both `after` or `before`, only the setting of `before` will take effect.
     * @param {String} [after] An object ID which serves as a cursor for pagination. For example, if you specify `after` as `bar`, the request will retrieve a list of data objects that start after the object with the object ID `bar`. You can set this parameter to the value of `pagination.before` in the response of the previous request. If you set both `after` or `before`, only the setting of `before` will take effect.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListAddresses200Response} and HTTP response
     */
    listAddressesWithHttpInfo(walletId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling listAddresses");
      }

      let pathParams = {
        'wallet_id': walletId
      };
      let queryParams = {
        'token_id': opts['tokenId'],
        'address_str': opts['addressStr'],
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListAddresses200Response;
      return this.apiClient.callApi(
        '/wallets/{wallet_id}/addresses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List wallet addresses by wallet ID
     * Retrieve a list of addresses associated with a wallet.  Error codes this API may return:   | Error Code | Description |   | -- | -- |   | `2006` | 参数格式或者值非法 | 
     * @param {String} walletId Unique id of the wallet
     * @param {Object} opts Optional parameters
     * @param {String} opts.tokenId Unique id of the token
     * @param {String} opts.addressStr address
     * @param {Number} opts.limit The maximum number of objects to return. The value range is [1, 50]. (default to 10)
     * @param {String} opts.before An object ID which serves as a cursor for pagination. For example, if you specify `before` as `foo`, the request will retrieve a list of data objects that end before the object with the object ID `foo`. You can set this parameter to the value of `pagination.after` in the response of the previous request. If you set both `after` or `before`, only the setting of `before` will take effect.
     * @param {String} opts.after An object ID which serves as a cursor for pagination. For example, if you specify `after` as `bar`, the request will retrieve a list of data objects that start after the object with the object ID `bar`. You can set this parameter to the value of `pagination.before` in the response of the previous request. If you set both `after` or `before`, only the setting of `before` will take effect.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListAddresses200Response}
     */
    listAddresses(walletId, opts) {
      return this.listAddressesWithHttpInfo(walletId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all wallets
     * Retrieves a list of all wallets.  This endpoint allows filtering by wallet type, subtype, and MPC vault ID (if applicable).  Error codes this API may return:       | Error Code | Description |       | -- | -- |       | `2006` | 参数格式或者值非法 | 
     * @param {Object} opts Optional parameters
     * @param {module:model/WalletType} [walletType] Wallet type to query
     * @param {module:model/WalletSubtype} [walletSubtype] Wallet subtype to query
     * @param {String} [vaultId] Unique id of the mpc vault
     * @param {Number} [limit = 10)] The maximum number of objects to return. The value range is [1, 50].
     * @param {String} [before] An object ID which serves as a cursor for pagination. For example, if you specify `before` as `foo`, the request will retrieve a list of data objects that end before the object with the object ID `foo`. You can set this parameter to the value of `pagination.after` in the response of the previous request. If you set both `after` or `before`, only the setting of `before` will take effect.
     * @param {String} [after] An object ID which serves as a cursor for pagination. For example, if you specify `after` as `bar`, the request will retrieve a list of data objects that start after the object with the object ID `bar`. You can set this parameter to the value of `pagination.before` in the response of the previous request. If you set both `after` or `before`, only the setting of `before` will take effect.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListWallets200Response} and HTTP response
     */
    listWalletsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'wallet_type': opts['walletType'],
        'wallet_subtype': opts['walletSubtype'],
        'vault_id': opts['vaultId'],
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListWallets200Response;
      return this.apiClient.callApi(
        '/wallets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all wallets
     * Retrieves a list of all wallets.  This endpoint allows filtering by wallet type, subtype, and MPC vault ID (if applicable).  Error codes this API may return:       | Error Code | Description |       | -- | -- |       | `2006` | 参数格式或者值非法 | 
     * @param {Object} opts Optional parameters
     * @param {module:model/WalletType} opts.walletType Wallet type to query
     * @param {module:model/WalletSubtype} opts.walletSubtype Wallet subtype to query
     * @param {String} opts.vaultId Unique id of the mpc vault
     * @param {Number} opts.limit The maximum number of objects to return. The value range is [1, 50]. (default to 10)
     * @param {String} opts.before An object ID which serves as a cursor for pagination. For example, if you specify `before` as `foo`, the request will retrieve a list of data objects that end before the object with the object ID `foo`. You can set this parameter to the value of `pagination.after` in the response of the previous request. If you set both `after` or `before`, only the setting of `before` will take effect.
     * @param {String} opts.after An object ID which serves as a cursor for pagination. For example, if you specify `after` as `bar`, the request will retrieve a list of data objects that start after the object with the object ID `bar`. You can set this parameter to the value of `pagination.before` in the response of the previous request. If you set both `after` or `before`, only the setting of `before` will take effect.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListWallets200Response}
     */
    listWallets(opts) {
      return this.listWalletsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update wallet by ID
     * Updates information for a specific wallet identified by its ID. This endpoint is supported by Exchange wallets only.  Error codes this API may return: | Error Code | Description | | -- | -- | | `2006` | 参数格式或者值非法 | 
     * @param {String} walletId Unique id of the wallet
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateWalletByIdRequest} [updateWalletByIdRequest] The request body to update a wallet
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WalletInfo} and HTTP response
     */
    updateWalletByIdWithHttpInfo(walletId, opts) {
      opts = opts || {};
      let postBody = opts['updateWalletByIdRequest'];
      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling updateWalletById");
      }

      let pathParams = {
        'wallet_id': walletId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WalletInfo;
      return this.apiClient.callApi(
        '/wallets/{wallet_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update wallet by ID
     * Updates information for a specific wallet identified by its ID. This endpoint is supported by Exchange wallets only.  Error codes this API may return: | Error Code | Description | | -- | -- | | `2006` | 参数格式或者值非法 | 
     * @param {String} walletId Unique id of the wallet
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateWalletByIdRequest} opts.updateWalletByIdRequest The request body to update a wallet
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WalletInfo}
     */
    updateWalletById(walletId, opts) {
      return this.updateWalletByIdWithHttpInfo(walletId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
