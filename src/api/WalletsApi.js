/**
 * Cobo Wallet as a Service 2.0
 * Cobo WaaS 2.0 enables you to programmatically access Cobo's full suite of crypto wallet technologies with powerful and flexible access controls.  # Wallet technologies - Custodial Wallet - MPC Wallet - Smart Contract Wallet (Based on Safe{Wallet}) - Exchange Wallet  # Risk Control technologies - Workflow - Access Control List (ACL)  # Risk Control targets - Wallet Management   - User/team and their permission management   - Risk control configurations, e.g. whitelist, blacklist, rate-limiting etc. - Blockchain Interaction   - Crypto transfer   - Smart Contract Invocation  # Important HTTPS only. RESTful, resource oriented  # Get Started Set up your APIs or get authorization  # Authentication and Authorization CoboAuth  # Request and Response application/json  # Error Handling  ### Common error codes | Error Code | Description | | -- | -- |  ### API-specific error codes For error codes that are dedicated to a specific API, see the Error codes section in each API specification, for example, /v3/wallets.  # Rate and Usage Limiting  # Idempotent Request  # Pagination # Support [Developer Hub](https://cobo.com/developers) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddWalletAddressRequest from '../model/AddWalletAddressRequest';
import AddressInfo from '../model/AddressInfo';
import CreatedWallet from '../model/CreatedWallet';
import ErrorResponse from '../model/ErrorResponse';
import GetAddressValidity200Response from '../model/GetAddressValidity200Response';
import GetAssets200Response from '../model/GetAssets200Response';
import GetChains200Response from '../model/GetChains200Response';
import GetTokens200Response from '../model/GetTokens200Response';
import GetWalletTokenBalances200Response from '../model/GetWalletTokenBalances200Response';
import ListAddresses200Response from '../model/ListAddresses200Response';
import ListWallets200Response from '../model/ListWallets200Response';
import MaxSendValue from '../model/MaxSendValue';
import UTXO from '../model/UTXO';
import UpdateWalletByIdRequest from '../model/UpdateWalletByIdRequest';
import WalletInfo from '../model/WalletInfo';
import WalletSubtype from '../model/WalletSubtype';
import WalletType from '../model/WalletType';

/**
* Wallets service.
* @module api/WalletsApi
* @version 0.1.0
*/
export default class WalletsApi {

    /**
    * Constructs a new WalletsApi. 
    * @alias module:api/WalletsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Add address to a wallet
     * Add address to a wallet.
     * @param {String} walletId Unique id of the wallet
     * @param {Object} opts Optional parameters
     * @param {module:model/AddWalletAddressRequest} [addWalletAddressRequest] The request body to add address for a wallet
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/AddressInfo>} and HTTP response
     */
    addWalletAddressWithHttpInfo(walletId, opts) {
      opts = opts || {};
      let postBody = opts['addWalletAddressRequest'];
      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling addWalletAddress");
      }

      let pathParams = {
        'wallet_id': walletId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [AddressInfo];
      return this.apiClient.callApi(
        '/wallets/{wallet_id}/addresses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add address to a wallet
     * Add address to a wallet.
     * @param {String} walletId Unique id of the wallet
     * @param {Object} opts Optional parameters
     * @param {module:model/AddWalletAddressRequest} opts.addWalletAddressRequest The request body to add address for a wallet
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/AddressInfo>}
     */
    addWalletAddress(walletId, opts) {
      return this.addWalletAddressWithHttpInfo(walletId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create new wallet
     * ..More detailed explanation on creating a new wallet..  Error codes this API may return: | Error Code | Description | | -- | -- | | `2003` | 必选参数缺失 | | `2006` | 参数格式或者值非法 | 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreatedWallet} [createdWallet] The request body to create a wallet
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WalletInfo} and HTTP response
     */
    createWalletWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['createdWallet'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WalletInfo;
      return this.apiClient.callApi(
        '/wallets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create new wallet
     * ..More detailed explanation on creating a new wallet..  Error codes this API may return: | Error Code | Description | | -- | -- | | `2003` | 必选参数缺失 | | `2006` | 参数格式或者值非法 | 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreatedWallet} opts.createdWallet The request body to create a wallet
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WalletInfo}
     */
    createWallet(opts) {
      return this.createWalletWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a wallet by ID
     * Delete a specific wallet by ID
     * @param {String} walletId Unique id of the wallet
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteWalletByIdWithHttpInfo(walletId) {
      let postBody = null;
      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling deleteWalletById");
      }

      let pathParams = {
        'wallet_id': walletId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/wallets/{wallet_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a wallet by ID
     * Delete a specific wallet by ID
     * @param {String} walletId Unique id of the wallet
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteWalletById(walletId) {
      return this.deleteWalletByIdWithHttpInfo(walletId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the given address validity for token
     * Check if the given address valid.
     * @param {String} tokenId Unique id of the token
     * @param {String} addressStr The address string
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetAddressValidity200Response} and HTTP response
     */
    getAddressValidityWithHttpInfo(tokenId, addressStr) {
      let postBody = null;
      // verify the required parameter 'tokenId' is set
      if (tokenId === undefined || tokenId === null) {
        throw new Error("Missing the required parameter 'tokenId' when calling getAddressValidity");
      }
      // verify the required parameter 'addressStr' is set
      if (addressStr === undefined || addressStr === null) {
        throw new Error("Missing the required parameter 'addressStr' when calling getAddressValidity");
      }

      let pathParams = {
      };
      let queryParams = {
        'token_id': tokenId,
        'address_str': addressStr
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAddressValidity200Response;
      return this.apiClient.callApi(
        '/wallets/address/validity', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get the given address validity for token
     * Check if the given address valid.
     * @param {String} tokenId Unique id of the token
     * @param {String} addressStr The address string
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetAddressValidity200Response}
     */
    getAddressValidity(tokenId, addressStr) {
      return this.getAddressValidityWithHttpInfo(tokenId, addressStr)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List the metadata of assets
     * Retrieve a list of asset metadata.
     * @param {Object} opts Optional parameters
     * @param {String} [assetId] Unique id of the asset
     * @param {Number} [limit = 10)] size of page to return (pagination)
     * @param {String} [before = '')] Cursor string received from previous request
     * @param {String} [after = '')] Cursor string received from previous request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetAssets200Response} and HTTP response
     */
    getAssetsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'asset_id': opts['assetId'],
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAssets200Response;
      return this.apiClient.callApi(
        '/wallets/assets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List the metadata of assets
     * Retrieve a list of asset metadata.
     * @param {Object} opts Optional parameters
     * @param {String} opts.assetId Unique id of the asset
     * @param {Number} opts.limit size of page to return (pagination) (default to 10)
     * @param {String} opts.before Cursor string received from previous request (default to '')
     * @param {String} opts.after Cursor string received from previous request (default to '')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetAssets200Response}
     */
    getAssets(opts) {
      return this.getAssetsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List the metadata of chain
     * Retrieve a list of chain metadata.
     * @param {Object} opts Optional parameters
     * @param {String} [chainId] Unique id of the chain
     * @param {Number} [limit = 10)] size of page to return (pagination)
     * @param {String} [before = '')] Cursor string received from previous request
     * @param {String} [after = '')] Cursor string received from previous request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetChains200Response} and HTTP response
     */
    getChainsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'chain_id': opts['chainId'],
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetChains200Response;
      return this.apiClient.callApi(
        '/wallets/chains', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List the metadata of chain
     * Retrieve a list of chain metadata.
     * @param {Object} opts Optional parameters
     * @param {String} opts.chainId Unique id of the chain
     * @param {Number} opts.limit size of page to return (pagination) (default to 10)
     * @param {String} opts.before Cursor string received from previous request (default to '')
     * @param {String} opts.after Cursor string received from previous request (default to '')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetChains200Response}
     */
    getChains(opts) {
      return this.getChainsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get max sendable Vaule
     * Retrieve the maximum sendable vaule and the corresponding transaction fee for a given address.
     * @param {String} walletId Unique id of the wallet
     * @param {String} toAddress address
     * @param {Object} opts Optional parameters
     * @param {String} [fromAddress] address
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MaxSendValue} and HTTP response
     */
    getMaxSendValueWithHttpInfo(walletId, toAddress, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling getMaxSendValue");
      }
      // verify the required parameter 'toAddress' is set
      if (toAddress === undefined || toAddress === null) {
        throw new Error("Missing the required parameter 'toAddress' when calling getMaxSendValue");
      }

      let pathParams = {
        'wallet_id': walletId
      };
      let queryParams = {
        'to_address': toAddress,
        'from_address': opts['fromAddress']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MaxSendValue;
      return this.apiClient.callApi(
        '/wallets/{wallet_id}/max_sendable_value', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get max sendable Vaule
     * Retrieve the maximum sendable vaule and the corresponding transaction fee for a given address.
     * @param {String} walletId Unique id of the wallet
     * @param {String} toAddress address
     * @param {Object} opts Optional parameters
     * @param {String} opts.fromAddress address
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MaxSendValue}
     */
    getMaxSendValue(walletId, toAddress, opts) {
      return this.getMaxSendValueWithHttpInfo(walletId, toAddress, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List the spendable utxo
     * Retrieve a list of spendable utxo.
     * @param {String} walletId Unique id of the wallet
     * @param {String} tokenId Unique id of the token
     * @param {Object} opts Optional parameters
     * @param {String} [addressStr] address
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/UTXO>} and HTTP response
     */
    getSpendableListWithHttpInfo(walletId, tokenId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling getSpendableList");
      }
      // verify the required parameter 'tokenId' is set
      if (tokenId === undefined || tokenId === null) {
        throw new Error("Missing the required parameter 'tokenId' when calling getSpendableList");
      }

      let pathParams = {
        'wallet_id': walletId
      };
      let queryParams = {
        'token_id': tokenId,
        'address_str': opts['addressStr']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UTXO];
      return this.apiClient.callApi(
        '/wallets/{wallet_id}/spendables', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List the spendable utxo
     * Retrieve a list of spendable utxo.
     * @param {String} walletId Unique id of the wallet
     * @param {String} tokenId Unique id of the token
     * @param {Object} opts Optional parameters
     * @param {String} opts.addressStr address
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/UTXO>}
     */
    getSpendableList(walletId, tokenId, opts) {
      return this.getSpendableListWithHttpInfo(walletId, tokenId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List the supported chains by wallet subtype
     * Retrieve a list of supported chain.
     * @param {module:model/WalletSubtype} walletSubtype Wallet subtype to query
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] size of page to return (pagination)
     * @param {String} [before = '')] Cursor string received from previous request
     * @param {String} [after = '')] Cursor string received from previous request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetChains200Response} and HTTP response
     */
    getSupportedChainsWithHttpInfo(walletSubtype, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'walletSubtype' is set
      if (walletSubtype === undefined || walletSubtype === null) {
        throw new Error("Missing the required parameter 'walletSubtype' when calling getSupportedChains");
      }

      let pathParams = {
      };
      let queryParams = {
        'wallet_subtype': walletSubtype,
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetChains200Response;
      return this.apiClient.callApi(
        '/wallets/supported_chains', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List the supported chains by wallet subtype
     * Retrieve a list of supported chain.
     * @param {module:model/WalletSubtype} walletSubtype Wallet subtype to query
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit size of page to return (pagination) (default to 10)
     * @param {String} opts.before Cursor string received from previous request (default to '')
     * @param {String} opts.after Cursor string received from previous request (default to '')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetChains200Response}
     */
    getSupportedChains(walletSubtype, opts) {
      return this.getSupportedChainsWithHttpInfo(walletSubtype, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List the supported tokens by wallet subtype and chain id if specified
     * Retrieve a list of supported token.
     * @param {module:model/WalletSubtype} walletSubtype Wallet subtype to query
     * @param {Object} opts Optional parameters
     * @param {String} [chainId] Unique id of the chain
     * @param {Number} [limit = 10)] size of page to return (pagination)
     * @param {String} [before = '')] Cursor string received from previous request
     * @param {String} [after = '')] Cursor string received from previous request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetTokens200Response} and HTTP response
     */
    getSupportedTokensWithHttpInfo(walletSubtype, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'walletSubtype' is set
      if (walletSubtype === undefined || walletSubtype === null) {
        throw new Error("Missing the required parameter 'walletSubtype' when calling getSupportedTokens");
      }

      let pathParams = {
      };
      let queryParams = {
        'wallet_subtype': walletSubtype,
        'chain_id': opts['chainId'],
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetTokens200Response;
      return this.apiClient.callApi(
        '/wallets/supported_tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List the supported tokens by wallet subtype and chain id if specified
     * Retrieve a list of supported token.
     * @param {module:model/WalletSubtype} walletSubtype Wallet subtype to query
     * @param {Object} opts Optional parameters
     * @param {String} opts.chainId Unique id of the chain
     * @param {Number} opts.limit size of page to return (pagination) (default to 10)
     * @param {String} opts.before Cursor string received from previous request (default to '')
     * @param {String} opts.after Cursor string received from previous request (default to '')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetTokens200Response}
     */
    getSupportedTokens(walletSubtype, opts) {
      return this.getSupportedTokensWithHttpInfo(walletSubtype, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List the metadata of tokens
     * Retrieve a list of token metadata.
     * @param {Object} opts Optional parameters
     * @param {String} [tokenId] Unique id of the token
     * @param {Number} [limit = 10)] size of page to return (pagination)
     * @param {String} [before = '')] Cursor string received from previous request
     * @param {String} [after = '')] Cursor string received from previous request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetTokens200Response} and HTTP response
     */
    getTokensWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'token_id': opts['tokenId'],
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetTokens200Response;
      return this.apiClient.callApi(
        '/wallets/tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List the metadata of tokens
     * Retrieve a list of token metadata.
     * @param {Object} opts Optional parameters
     * @param {String} opts.tokenId Unique id of the token
     * @param {Number} opts.limit size of page to return (pagination) (default to 10)
     * @param {String} opts.before Cursor string received from previous request (default to '')
     * @param {String} opts.after Cursor string received from previous request (default to '')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetTokens200Response}
     */
    getTokens(opts) {
      return this.getTokensWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get address information by ID
     * Retrieve wallet information by ID
     * @param {String} walletId Unique id of the wallet
     * @param {String} addressId Unique id of the address
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AddressInfo} and HTTP response
     */
    getWalletAddressByIdWithHttpInfo(walletId, addressId) {
      let postBody = null;
      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling getWalletAddressById");
      }
      // verify the required parameter 'addressId' is set
      if (addressId === undefined || addressId === null) {
        throw new Error("Missing the required parameter 'addressId' when calling getWalletAddressById");
      }

      let pathParams = {
        'wallet_id': walletId,
        'address_id': addressId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AddressInfo;
      return this.apiClient.callApi(
        '/wallets/{wallet_id}/addresses/{address_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get address information by ID
     * Retrieve wallet information by ID
     * @param {String} walletId Unique id of the wallet
     * @param {String} addressId Unique id of the address
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AddressInfo}
     */
    getWalletAddressById(walletId, addressId) {
      return this.getWalletAddressByIdWithHttpInfo(walletId, addressId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List the token balance by address in the wallets(to be specific)
     * Retrieve a list of token balance by address in wallet.
     * @param {String} walletId Unique id of the wallet
     * @param {String} addressId Unique id of the address
     * @param {Object} opts Optional parameters
     * @param {String} [tokenId] Unique id of the token
     * @param {Number} [limit = 10)] size of page to return (pagination)
     * @param {String} [before = '')] Cursor string received from previous request
     * @param {String} [after = '')] Cursor string received from previous request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetWalletTokenBalances200Response} and HTTP response
     */
    getWalletAddressTokenBalancesWithHttpInfo(walletId, addressId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling getWalletAddressTokenBalances");
      }
      // verify the required parameter 'addressId' is set
      if (addressId === undefined || addressId === null) {
        throw new Error("Missing the required parameter 'addressId' when calling getWalletAddressTokenBalances");
      }

      let pathParams = {
        'wallet_id': walletId,
        'address_id': addressId
      };
      let queryParams = {
        'token_id': opts['tokenId'],
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetWalletTokenBalances200Response;
      return this.apiClient.callApi(
        '/wallets/{wallet_id}/addresses/{address_id}/tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List the token balance by address in the wallets(to be specific)
     * Retrieve a list of token balance by address in wallet.
     * @param {String} walletId Unique id of the wallet
     * @param {String} addressId Unique id of the address
     * @param {Object} opts Optional parameters
     * @param {String} opts.tokenId Unique id of the token
     * @param {Number} opts.limit size of page to return (pagination) (default to 10)
     * @param {String} opts.before Cursor string received from previous request (default to '')
     * @param {String} opts.after Cursor string received from previous request (default to '')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetWalletTokenBalances200Response}
     */
    getWalletAddressTokenBalances(walletId, addressId, opts) {
      return this.getWalletAddressTokenBalancesWithHttpInfo(walletId, addressId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get wallet information by ID
     * Retrieve wallet information by ID
     * @param {String} walletId Unique id of the wallet
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WalletInfo} and HTTP response
     */
    getWalletByIdWithHttpInfo(walletId) {
      let postBody = null;
      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling getWalletById");
      }

      let pathParams = {
        'wallet_id': walletId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WalletInfo;
      return this.apiClient.callApi(
        '/wallets/{wallet_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get wallet information by ID
     * Retrieve wallet information by ID
     * @param {String} walletId Unique id of the wallet
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WalletInfo}
     */
    getWalletById(walletId) {
      return this.getWalletByIdWithHttpInfo(walletId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List the token balance in the wallets(to be specific)
     * Retrieve a list of token balance in wallet.
     * @param {String} walletId Unique id of the wallet
     * @param {Object} opts Optional parameters
     * @param {String} [tokenId] Unique id of the token
     * @param {Number} [limit = 10)] size of page to return (pagination)
     * @param {String} [before = '')] Cursor string received from previous request
     * @param {String} [after = '')] Cursor string received from previous request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetWalletTokenBalances200Response} and HTTP response
     */
    getWalletTokenBalancesWithHttpInfo(walletId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling getWalletTokenBalances");
      }

      let pathParams = {
        'wallet_id': walletId
      };
      let queryParams = {
        'token_id': opts['tokenId'],
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetWalletTokenBalances200Response;
      return this.apiClient.callApi(
        '/wallets/{wallet_id}/tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List the token balance in the wallets(to be specific)
     * Retrieve a list of token balance in wallet.
     * @param {String} walletId Unique id of the wallet
     * @param {Object} opts Optional parameters
     * @param {String} opts.tokenId Unique id of the token
     * @param {Number} opts.limit size of page to return (pagination) (default to 10)
     * @param {String} opts.before Cursor string received from previous request (default to '')
     * @param {String} opts.after Cursor string received from previous request (default to '')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetWalletTokenBalances200Response}
     */
    getWalletTokenBalances(walletId, opts) {
      return this.getWalletTokenBalancesWithHttpInfo(walletId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List wallet addresses by wallet ID
     * Retrieve a list of addresses.
     * @param {String} walletId Unique id of the wallet
     * @param {Object} opts Optional parameters
     * @param {String} [tokenId] Unique id of the token
     * @param {Number} [limit = 10)] size of page to return (pagination)
     * @param {String} [before = '')] Cursor string received from previous request
     * @param {String} [after = '')] Cursor string received from previous request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListAddresses200Response} and HTTP response
     */
    listAddressesWithHttpInfo(walletId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling listAddresses");
      }

      let pathParams = {
        'wallet_id': walletId
      };
      let queryParams = {
        'token_id': opts['tokenId'],
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListAddresses200Response;
      return this.apiClient.callApi(
        '/wallets/{wallet_id}/addresses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List wallet addresses by wallet ID
     * Retrieve a list of addresses.
     * @param {String} walletId Unique id of the wallet
     * @param {Object} opts Optional parameters
     * @param {String} opts.tokenId Unique id of the token
     * @param {Number} opts.limit size of page to return (pagination) (default to 10)
     * @param {String} opts.before Cursor string received from previous request (default to '')
     * @param {String} opts.after Cursor string received from previous request (default to '')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListAddresses200Response}
     */
    listAddresses(walletId, opts) {
      return this.listAddressesWithHttpInfo(walletId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all wallets
     * Retrieve a list of wallets.
     * @param {Object} opts Optional parameters
     * @param {module:model/WalletType} [walletType] Wallet type to query
     * @param {module:model/WalletSubtype} [walletSubtype] Wallet subtype to query
     * @param {String} [vaultId] Unique id of the mpc vault
     * @param {Number} [limit = 10)] size of page to return (pagination)
     * @param {String} [before = '')] Cursor string received from previous request
     * @param {String} [after = '')] Cursor string received from previous request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListWallets200Response} and HTTP response
     */
    listWalletsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'wallet_type': opts['walletType'],
        'wallet_subtype': opts['walletSubtype'],
        'vault_id': opts['vaultId'],
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListWallets200Response;
      return this.apiClient.callApi(
        '/wallets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all wallets
     * Retrieve a list of wallets.
     * @param {Object} opts Optional parameters
     * @param {module:model/WalletType} opts.walletType Wallet type to query
     * @param {module:model/WalletSubtype} opts.walletSubtype Wallet subtype to query
     * @param {String} opts.vaultId Unique id of the mpc vault
     * @param {Number} opts.limit size of page to return (pagination) (default to 10)
     * @param {String} opts.before Cursor string received from previous request (default to '')
     * @param {String} opts.after Cursor string received from previous request (default to '')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListWallets200Response}
     */
    listWallets(opts) {
      return this.listWalletsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update wallet by ID
     * Update wallet info by ID
     * @param {String} walletId Unique id of the wallet
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateWalletByIdRequest} [updateWalletByIdRequest] The request body to update a wallet
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WalletInfo} and HTTP response
     */
    updateWalletByIdWithHttpInfo(walletId, opts) {
      opts = opts || {};
      let postBody = opts['updateWalletByIdRequest'];
      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling updateWalletById");
      }

      let pathParams = {
        'wallet_id': walletId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WalletInfo;
      return this.apiClient.callApi(
        '/wallets/{wallet_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update wallet by ID
     * Update wallet info by ID
     * @param {String} walletId Unique id of the wallet
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateWalletByIdRequest} opts.updateWalletByIdRequest The request body to update a wallet
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WalletInfo}
     */
    updateWalletById(walletId, opts) {
      return this.updateWalletByIdWithHttpInfo(walletId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
