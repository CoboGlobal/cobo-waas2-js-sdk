/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import GetTransactionLimitation200Response from '../model/GetTransactionLimitation200Response';
import ListSupportedCountries200ResponseInner from '../model/ListSupportedCountries200ResponseInner';
import SubmitDepositTravelRuleInfo201Response from '../model/SubmitDepositTravelRuleInfo201Response';
import TravelRuleDepositRequest from '../model/TravelRuleDepositRequest';
import TravelRuleWithdrawRequest from '../model/TravelRuleWithdrawRequest';

/**
* TravelRule service.
* @module api/TravelRuleApi
*/
export default class TravelRuleApi {

    /**
    * Constructs a new TravelRuleApi. 
    * @alias module:api/TravelRuleApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Retrieve transaction limitations
     * This operation retrieves Travel Rule requirements and available options for a transaction based on its transaction type and ID.  Use this endpoint before submitting Travel Rule information to understand the requirements and available options for your transaction. 
     * @param {module:model/String} transaction_type The transaction type. Possible values include:    - `DEPOSIT`: A deposit transaction.   - `WITHDRAW`: A withdrawal transaction. 
     * @param {String} transaction_id The transaction ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetTransactionLimitation200Response} and HTTP response
     */
    getTransactionLimitationWithHttpInfo(transaction_type, transaction_id) {
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'transaction_type' is set
      if (transaction_type === undefined || transaction_type === null) {
        throw new Error("Missing the required parameter 'transaction_type' when calling getTransactionLimitation");
      }
      // verify the required parameter 'transaction_id' is set
      if (transaction_id === undefined || transaction_id === null) {
        throw new Error("Missing the required parameter 'transaction_id' when calling getTransactionLimitation");
      }

      let pathParams = {
      };
      let queryParams = {
        'transaction_type': transaction_type,
        'transaction_id': transaction_id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetTransactionLimitation200Response;
      return this.apiClient.callApi(
        '/travel_rule/transaction/limitation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve transaction limitations
     * This operation retrieves Travel Rule requirements and available options for a transaction based on its transaction type and ID.  Use this endpoint before submitting Travel Rule information to understand the requirements and available options for your transaction. 
     * @param {module:model/String} transaction_type The transaction type. Possible values include:    - `DEPOSIT`: A deposit transaction.   - `WITHDRAW`: A withdrawal transaction. 
     * @param {String} transaction_id The transaction ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetTransactionLimitation200Response}
     */
    getTransactionLimitation(transaction_type, transaction_id) {
      return this.getTransactionLimitationWithHttpInfo(transaction_type, transaction_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List supported countries
     * This operation retrieves a list of supported countries that can be used when submitting Travel Rule information.  Use this endpoint to obtain valid country values for:   - Place of incorporation of a legal entity   - Place of birth of a natural person 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ListSupportedCountries200ResponseInner>} and HTTP response
     */
    listSupportedCountriesWithHttpInfo() {
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ListSupportedCountries200ResponseInner];
      return this.apiClient.callApi(
        '/travel_rule/transaction/countries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List supported countries
     * This operation retrieves a list of supported countries that can be used when submitting Travel Rule information.  Use this endpoint to obtain valid country values for:   - Place of incorporation of a legal entity   - Place of birth of a natural person 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ListSupportedCountries200ResponseInner>}
     */
    listSupportedCountries() {
      return this.listSupportedCountriesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Submit Travel Rule information for deposits
     * This operation submits Travel Rule information for a deposit transaction. 
     * @param {Object} opts Optional parameters
     * @param {module:model/TravelRuleDepositRequest} [TravelRuleDepositRequest] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SubmitDepositTravelRuleInfo201Response} and HTTP response
     */
    submitDepositTravelRuleInfoWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['TravelRuleDepositRequest'];
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SubmitDepositTravelRuleInfo201Response;
      return this.apiClient.callApi(
        '/travel_rule/transaction/deposit/travel_rule_info', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Submit Travel Rule information for deposits
     * This operation submits Travel Rule information for a deposit transaction. 
     * @param {Object} opts Optional parameters
     * @param {module:model/TravelRuleDepositRequest} opts.TravelRuleDepositRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SubmitDepositTravelRuleInfo201Response}
     */
    submitDepositTravelRuleInfo(opts) {
      return this.submitDepositTravelRuleInfoWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Submit Travel Rule information for withdrawals
     * This operation submits Travel Rule information for a withdrawal transaction. 
     * @param {Object} opts Optional parameters
     * @param {module:model/TravelRuleWithdrawRequest} [TravelRuleWithdrawRequest] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SubmitDepositTravelRuleInfo201Response} and HTTP response
     */
    submitWithdrawTravelRuleInfoWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['TravelRuleWithdrawRequest'];
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SubmitDepositTravelRuleInfo201Response;
      return this.apiClient.callApi(
        '/travel_rule/transaction/withdraw/travel_rule_info', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Submit Travel Rule information for withdrawals
     * This operation submits Travel Rule information for a withdrawal transaction. 
     * @param {Object} opts Optional parameters
     * @param {module:model/TravelRuleWithdrawRequest} opts.TravelRuleWithdrawRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SubmitDepositTravelRuleInfo201Response}
     */
    submitWithdrawTravelRuleInfo(opts) {
      return this.submitWithdrawTravelRuleInfoWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
