/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import GetTransactionLimitation200Response from '../model/GetTransactionLimitation200Response';
import ListSupportedCountries200ResponseInner from '../model/ListSupportedCountries200ResponseInner';
import SubmitDepositTravelRuleInfo201Response from '../model/SubmitDepositTravelRuleInfo201Response';
import TravelRuleDepositRequest from '../model/TravelRuleDepositRequest';
import TravelRuleWithdrawRequest from '../model/TravelRuleWithdrawRequest';

/**
* TravelRule service.
* @module api/TravelRuleApi
*/
export default class TravelRuleApi {

    /**
    * Constructs a new TravelRuleApi. 
    * @alias module:api/TravelRuleApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Retrieve transaction limitations
     * This endpoint retrieves transaction-related limitations based on the provided `transaction_type` and `transaction_id`.  The response includes the following information: - **`vasp_list`**: A list of Virtual Asset Service Providers (VASPs) associated with the transaction token. - **`is_threshold_reached`**: Indicates whether the transaction amount has exceeded the predefined threshold.    - If `true`: Additional Travel Rule information may be required for processing. - **`self_custody_wallet_challenge`**: A challenge string for verifying ownership of self-custody wallets. - **`connect_wallet_list`**: A list of supported wallet integrations for the transaction, such as MetaMask or WalletConnect.  Use this endpoint to ensure compliance with Travel Rule requirements and to retrieve supported options for completing the transaction. 
     * @param {module:model/String} transaction_type The transaction type. Possible values include:    - `DEPOSIT`: A deposit transaction.   - `WITHDRAW`: A withdrawal transaction. 
     * @param {String} transaction_id The transaction ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetTransactionLimitation200Response} and HTTP response
     */
    getTransactionLimitationWithHttpInfo(transaction_type, transaction_id) {
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'transaction_type' is set
      if (transaction_type === undefined || transaction_type === null) {
        throw new Error("Missing the required parameter 'transaction_type' when calling getTransactionLimitation");
      }
      // verify the required parameter 'transaction_id' is set
      if (transaction_id === undefined || transaction_id === null) {
        throw new Error("Missing the required parameter 'transaction_id' when calling getTransactionLimitation");
      }

      let pathParams = {
      };
      let queryParams = {
        'transaction_type': transaction_type,
        'transaction_id': transaction_id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetTransactionLimitation200Response;
      return this.apiClient.callApi(
        '/travel_rule/transaction/limitation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve transaction limitations
     * This endpoint retrieves transaction-related limitations based on the provided `transaction_type` and `transaction_id`.  The response includes the following information: - **`vasp_list`**: A list of Virtual Asset Service Providers (VASPs) associated with the transaction token. - **`is_threshold_reached`**: Indicates whether the transaction amount has exceeded the predefined threshold.    - If `true`: Additional Travel Rule information may be required for processing. - **`self_custody_wallet_challenge`**: A challenge string for verifying ownership of self-custody wallets. - **`connect_wallet_list`**: A list of supported wallet integrations for the transaction, such as MetaMask or WalletConnect.  Use this endpoint to ensure compliance with Travel Rule requirements and to retrieve supported options for completing the transaction. 
     * @param {module:model/String} transaction_type The transaction type. Possible values include:    - `DEPOSIT`: A deposit transaction.   - `WITHDRAW`: A withdrawal transaction. 
     * @param {String} transaction_id The transaction ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetTransactionLimitation200Response}
     */
    getTransactionLimitation(transaction_type, transaction_id) {
      return this.getTransactionLimitationWithHttpInfo(transaction_type, transaction_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List supported countries
     * This operation retrieves all countries supported.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ListSupportedCountries200ResponseInner>} and HTTP response
     */
    listSupportedCountriesWithHttpInfo() {
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ListSupportedCountries200ResponseInner];
      return this.apiClient.callApi(
        '/travel_rule/transaction/countries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List supported countries
     * This operation retrieves all countries supported.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ListSupportedCountries200ResponseInner>}
     */
    listSupportedCountries() {
      return this.listSupportedCountriesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Submit Deposit Transaction Travel Rule information
     * This operation allows you to submit the required Travel Rule information based on the transaction details. It supports both self-custody wallets and exchanges/VASPs, ensuring compliance with Travel Rule requirements.   - **Destination Wallet Type (`destination_wallet_type`)**:   - `SELF_CUSTODY_WALLET`: A self-custodial wallet (e.g., plugin wallet). Requires `self_custody_wallet_sign`, `self_custody_wallet_address`, and `self_custody_wallet_challenge`.   - `EXCHANGES_OR_VASP`: A wallet associated with an exchange or VASP. Requires `vendor_vasp_id` and information depending on `selected_entity_type`.  - **Entity Types (`selected_entity_type`)**:   - `LEGAL`: For legal entities, provide `legal_name`, `date_of_incorporation`, and `place_of_incorporation`.   - `NATURAL`: For natural persons, provide `date_of_birth`, `place_of_birth`, `first_name`, and `last_name`. 
     * @param {Object} opts Optional parameters
     * @param {module:model/TravelRuleDepositRequest} [TravelRuleDepositRequest] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SubmitDepositTravelRuleInfo201Response} and HTTP response
     */
    submitDepositTravelRuleInfoWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['TravelRuleDepositRequest'];
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SubmitDepositTravelRuleInfo201Response;
      return this.apiClient.callApi(
        '/travel_rule/transaction/deposit/travel_rule_info', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Submit Deposit Transaction Travel Rule information
     * This operation allows you to submit the required Travel Rule information based on the transaction details. It supports both self-custody wallets and exchanges/VASPs, ensuring compliance with Travel Rule requirements.   - **Destination Wallet Type (`destination_wallet_type`)**:   - `SELF_CUSTODY_WALLET`: A self-custodial wallet (e.g., plugin wallet). Requires `self_custody_wallet_sign`, `self_custody_wallet_address`, and `self_custody_wallet_challenge`.   - `EXCHANGES_OR_VASP`: A wallet associated with an exchange or VASP. Requires `vendor_vasp_id` and information depending on `selected_entity_type`.  - **Entity Types (`selected_entity_type`)**:   - `LEGAL`: For legal entities, provide `legal_name`, `date_of_incorporation`, and `place_of_incorporation`.   - `NATURAL`: For natural persons, provide `date_of_birth`, `place_of_birth`, `first_name`, and `last_name`. 
     * @param {Object} opts Optional parameters
     * @param {module:model/TravelRuleDepositRequest} opts.TravelRuleDepositRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SubmitDepositTravelRuleInfo201Response}
     */
    submitDepositTravelRuleInfo(opts) {
      return this.submitDepositTravelRuleInfoWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Submit Withdraw Transaction Travel Rule information
     * This operation allows you to submit the required Travel Rule information based on the transaction details. It supports both self-custody wallets and exchanges/VASPs, ensuring compliance with Travel Rule requirements.   - **Destination Wallet Type (`destination_wallet_type`)**:   - `SELF_CUSTODY_WALLET`: A self-custodial wallet (e.g., plugin wallet). Requires `self_custody_wallet_sign`, `self_custody_wallet_address`, and `self_custody_wallet_challenge`.   - `EXCHANGES_OR_VASP`: A wallet associated with an exchange or VASP. Requires `vendor_vasp_id` and information depending on `selected_entity_type`.  - **Entity Types (`selected_entity_type`)**:   - `LEGAL`: For legal entities, provide `legal_name`.   - `NATURAL`: For natural persons, provide `date_of_birth`, `place_of_birth`, `first_name`, and `last_name`. 
     * @param {Object} opts Optional parameters
     * @param {module:model/TravelRuleWithdrawRequest} [TravelRuleWithdrawRequest] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SubmitDepositTravelRuleInfo201Response} and HTTP response
     */
    submitWithdrawTravelRuleInfoWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['TravelRuleWithdrawRequest'];
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SubmitDepositTravelRuleInfo201Response;
      return this.apiClient.callApi(
        '/travel_rule/transaction/withdraw/travel_rule_info', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Submit Withdraw Transaction Travel Rule information
     * This operation allows you to submit the required Travel Rule information based on the transaction details. It supports both self-custody wallets and exchanges/VASPs, ensuring compliance with Travel Rule requirements.   - **Destination Wallet Type (`destination_wallet_type`)**:   - `SELF_CUSTODY_WALLET`: A self-custodial wallet (e.g., plugin wallet). Requires `self_custody_wallet_sign`, `self_custody_wallet_address`, and `self_custody_wallet_challenge`.   - `EXCHANGES_OR_VASP`: A wallet associated with an exchange or VASP. Requires `vendor_vasp_id` and information depending on `selected_entity_type`.  - **Entity Types (`selected_entity_type`)**:   - `LEGAL`: For legal entities, provide `legal_name`.   - `NATURAL`: For natural persons, provide `date_of_birth`, `place_of_birth`, `first_name`, and `last_name`. 
     * @param {Object} opts Optional parameters
     * @param {module:model/TravelRuleWithdrawRequest} opts.TravelRuleWithdrawRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SubmitDepositTravelRuleInfo201Response}
     */
    submitWithdrawTravelRuleInfo(opts) {
      return this.submitWithdrawTravelRuleInfoWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
