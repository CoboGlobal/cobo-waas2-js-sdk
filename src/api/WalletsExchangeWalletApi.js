/**
 * Cobo Wallet as a Service 2.0
 * Cobo WaaS 2.0 enables you to programmatically access Cobo's full suite of crypto wallet technologies with powerful and flexible access controls.  # Wallet technologies - Custodial Wallet - MPC Wallet - Smart Contract Wallet (Based on Safe{Wallet}) - Exchange Wallet  # Risk Control technologies - Workflow - Access Control List (ACL)  # Risk Control targets - Wallet Management   - User/team and their permission management   - Risk control configurations, e.g. whitelist, blacklist, rate-limiting etc. - Blockchain Interaction   - Crypto transfer   - Smart Contract Invocation  # Important HTTPS only. RESTful, resource oriented  # Get Started Set up your APIs or get authorization  # Authentication and Authorization CoboAuth  # Request and Response application/json  # Error Handling  ### Common error codes | Error Code | Description | | -- | -- |  ### API-specific error codes For error codes that are dedicated to a specific API, see the Error codes section in each API specification, for example, /v3/wallets.  # Rate and Usage Limiting  # Idempotent Request  # Pagination # Support [Developer Hub](https://cobo.com/developers) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ChainInfo from '../model/ChainInfo';
import ErrorResponse from '../model/ErrorResponse';
import ExchangeId from '../model/ExchangeId';
import GetAssets200Response from '../model/GetAssets200Response';
import GetExchangeWalletAssetBalances200Response from '../model/GetExchangeWalletAssetBalances200Response';
import LinkSubAccountsByWalletIdRequest from '../model/LinkSubAccountsByWalletIdRequest';
import ListExchanges200ResponseInner from '../model/ListExchanges200ResponseInner';

/**
* WalletsExchangeWallet service.
* @module api/WalletsExchangeWalletApi
* @version 0.1.0
*/
export default class WalletsExchangeWalletApi {

    /**
    * Constructs a new WalletsExchangeWalletApi. 
    * @alias module:api/WalletsExchangeWalletApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * List the supported assets by exchange id
     * Retrieve a list of supported asset.
     * @param {module:model/ExchangeId} exchangeId Exchange ID to query
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] size of page to return (pagination)
     * @param {String} [before = '')] Cursor string received from previous request
     * @param {String} [after = '')] Cursor string received from previous request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetAssets200Response} and HTTP response
     */
    getExchangeSupportedAssetsWithHttpInfo(exchangeId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'exchangeId' is set
      if (exchangeId === undefined || exchangeId === null) {
        throw new Error("Missing the required parameter 'exchangeId' when calling getExchangeSupportedAssets");
      }

      let pathParams = {
        'exchange_id': exchangeId
      };
      let queryParams = {
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAssets200Response;
      return this.apiClient.callApi(
        '/wallets/exchanges/{exchange_id}/supported_assets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List the supported assets by exchange id
     * Retrieve a list of supported asset.
     * @param {module:model/ExchangeId} exchangeId Exchange ID to query
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit size of page to return (pagination) (default to 10)
     * @param {String} opts.before Cursor string received from previous request (default to '')
     * @param {String} opts.after Cursor string received from previous request (default to '')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetAssets200Response}
     */
    getExchangeSupportedAssets(exchangeId, opts) {
      return this.getExchangeSupportedAssetsWithHttpInfo(exchangeId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List the supported chains by exchange id and asset id
     * Retrieve a list of supported chains.
     * @param {module:model/ExchangeId} exchangeId Exchange ID to query
     * @param {String} assetId Unique id of the asset
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] size of page to return (pagination)
     * @param {String} [before = '')] Cursor string received from previous request
     * @param {String} [after = '')] Cursor string received from previous request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ChainInfo>} and HTTP response
     */
    getExchangeSupportedChainsWithHttpInfo(exchangeId, assetId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'exchangeId' is set
      if (exchangeId === undefined || exchangeId === null) {
        throw new Error("Missing the required parameter 'exchangeId' when calling getExchangeSupportedChains");
      }
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling getExchangeSupportedChains");
      }

      let pathParams = {
        'exchange_id': exchangeId
      };
      let queryParams = {
        'asset_id': assetId,
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ChainInfo];
      return this.apiClient.callApi(
        '/wallets/exchanges/{exchange_id}/assets/supported_chains', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List the supported chains by exchange id and asset id
     * Retrieve a list of supported chains.
     * @param {module:model/ExchangeId} exchangeId Exchange ID to query
     * @param {String} assetId Unique id of the asset
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit size of page to return (pagination) (default to 10)
     * @param {String} opts.before Cursor string received from previous request (default to '')
     * @param {String} opts.after Cursor string received from previous request (default to '')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ChainInfo>}
     */
    getExchangeSupportedChains(exchangeId, assetId, opts) {
      return this.getExchangeSupportedChainsWithHttpInfo(exchangeId, assetId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List the asset balance in exchange wallet
     * Retrieve a list of asset balance in exchange wallet.
     * @param {String} walletId Unique id of the wallet
     * @param {String} subWalletId Unique id of the wallet
     * @param {Object} opts Optional parameters
     * @param {String} [assetId] Unique id of the asset
     * @param {Number} [limit = 10)] size of page to return (pagination)
     * @param {String} [before = '')] Cursor string received from previous request
     * @param {String} [after = '')] Cursor string received from previous request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetExchangeWalletAssetBalances200Response} and HTTP response
     */
    getExchangeWalletAssetBalancesWithHttpInfo(walletId, subWalletId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling getExchangeWalletAssetBalances");
      }
      // verify the required parameter 'subWalletId' is set
      if (subWalletId === undefined || subWalletId === null) {
        throw new Error("Missing the required parameter 'subWalletId' when calling getExchangeWalletAssetBalances");
      }

      let pathParams = {
        'wallet_id': walletId
      };
      let queryParams = {
        'sub_wallet_id': subWalletId,
        'asset_id': opts['assetId'],
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetExchangeWalletAssetBalances200Response;
      return this.apiClient.callApi(
        '/wallets/exchanges/{wallet_id}/assets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List the asset balance in exchange wallet
     * Retrieve a list of asset balance in exchange wallet.
     * @param {String} walletId Unique id of the wallet
     * @param {String} subWalletId Unique id of the wallet
     * @param {Object} opts Optional parameters
     * @param {String} opts.assetId Unique id of the asset
     * @param {Number} opts.limit size of page to return (pagination) (default to 10)
     * @param {String} opts.before Cursor string received from previous request (default to '')
     * @param {String} opts.after Cursor string received from previous request (default to '')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetExchangeWalletAssetBalances200Response}
     */
    getExchangeWalletAssetBalances(walletId, subWalletId, opts) {
      return this.getExchangeWalletAssetBalancesWithHttpInfo(walletId, subWalletId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Link exchange sub accounts by wallet id
     * Link exchange sub accounts.
     * @param {String} walletId Unique id of the wallet
     * @param {Object} opts Optional parameters
     * @param {module:model/LinkSubAccountsByWalletIdRequest} [linkSubAccountsByWalletIdRequest] Request body for linking subaccounts
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    linkSubAccountsByWalletIdWithHttpInfo(walletId, opts) {
      opts = opts || {};
      let postBody = opts['linkSubAccountsByWalletIdRequest'];
      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling linkSubAccountsByWalletId");
      }

      let pathParams = {
        'wallet_id': walletId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/wallets/{wallet_id}/exchanges/subaccounts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Link exchange sub accounts by wallet id
     * Link exchange sub accounts.
     * @param {String} walletId Unique id of the wallet
     * @param {Object} opts Optional parameters
     * @param {module:model/LinkSubAccountsByWalletIdRequest} opts.linkSubAccountsByWalletIdRequest Request body for linking subaccounts
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    linkSubAccountsByWalletId(walletId, opts) {
      return this.linkSubAccountsByWalletIdWithHttpInfo(walletId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List of exchanges
     * Retrieve a list of exchanges.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ListExchanges200ResponseInner>} and HTTP response
     */
    listExchangesWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ListExchanges200ResponseInner];
      return this.apiClient.callApi(
        '/wallets/exchanges/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List of exchanges
     * Retrieve a list of exchanges.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ListExchanges200ResponseInner>}
     */
    listExchanges() {
      return this.listExchangesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List exchange sub accounts by apikey
     * Retrieve a list of exchange sub accounts.
     * @param {module:model/ExchangeId} exchangeId Exchange ID to query
     * @param {Object} opts Optional parameters
     * @param {String} [apikey] The API Key for the exchange
     * @param {String} [secret] The API Secret for the exchange.
     * @param {String} [passphrase] The API passphrase for the exchange wallet.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    listSubAccountsByApikeyWithHttpInfo(exchangeId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'exchangeId' is set
      if (exchangeId === undefined || exchangeId === null) {
        throw new Error("Missing the required parameter 'exchangeId' when calling listSubAccountsByApikey");
      }

      let pathParams = {
        'exchange_id': exchangeId
      };
      let queryParams = {
        'apikey': opts['apikey'],
        'secret': opts['secret'],
        'passphrase': opts['passphrase']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/wallets/exchanges/{exchange_id}/subaccounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List exchange sub accounts by apikey
     * Retrieve a list of exchange sub accounts.
     * @param {module:model/ExchangeId} exchangeId Exchange ID to query
     * @param {Object} opts Optional parameters
     * @param {String} opts.apikey The API Key for the exchange
     * @param {String} opts.secret The API Secret for the exchange.
     * @param {String} opts.passphrase The API passphrase for the exchange wallet.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    listSubAccountsByApikey(exchangeId, opts) {
      return this.listSubAccountsByApikeyWithHttpInfo(exchangeId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List exchange sub accounts by wallet id
     * Retrieve a list of exchange sub accounts.
     * @param {String} walletId Unique id of the wallet
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    listSubAccountsByWalletIdWithHttpInfo(walletId) {
      let postBody = null;
      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling listSubAccountsByWalletId");
      }

      let pathParams = {
        'wallet_id': walletId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/wallets/{wallet_id}/exchanges/subaccounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List exchange sub accounts by wallet id
     * Retrieve a list of exchange sub accounts.
     * @param {String} walletId Unique id of the wallet
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    listSubAccountsByWalletId(walletId) {
      return this.listSubAccountsByWalletIdWithHttpInfo(walletId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
