/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AppWorkflow from '../model/AppWorkflow';
import ApprovalRequestDetail from '../model/ApprovalRequestDetail';
import CreateApprovalRequest201Response from '../model/CreateApprovalRequest201Response';
import ErrorResponse from '../model/ErrorResponse';
import ListApprovalRequests200Response from '../model/ListApprovalRequests200Response';
import RequestApproval from '../model/RequestApproval';
import RevokeApprovalRequest201Response from '../model/RevokeApprovalRequest201Response';
import RevokeApprovalRequestRequest from '../model/RevokeApprovalRequestRequest';

/**
* AppWorkflows service.
* @module api/AppWorkflowsApi
*/
export default class AppWorkflowsApi {

    /**
    * Constructs a new AppWorkflowsApi. 
    * @alias module:api/AppWorkflowsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Request workflow approval
     * This operation triggers a specified workflow and generates a new approval request.  <Note>To use the approval workflow operations, you must use the Cobo OAuth authentication method ([Org Access Token](https://www.cobo.com/developers/v2/apps/org-access-tokens)).</Note> 
     * @param {Object} opts Optional parameters
     * @param {module:model/RequestApproval} [RequestApproval] The request body to request workflow approval.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateApprovalRequest201Response} and HTTP response
     */
    createApprovalRequestWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['RequestApproval'];
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateApprovalRequest201Response;
      return this.apiClient.callApi(
        '/app/workflows/approval_requests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Request workflow approval
     * This operation triggers a specified workflow and generates a new approval request.  <Note>To use the approval workflow operations, you must use the Cobo OAuth authentication method ([Org Access Token](https://www.cobo.com/developers/v2/apps/org-access-tokens)).</Note> 
     * @param {Object} opts Optional parameters
     * @param {module:model/RequestApproval} opts.RequestApproval The request body to request workflow approval.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateApprovalRequest201Response}
     */
    createApprovalRequest(opts) {
      return this.createApprovalRequestWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get approval request details
     * This operation retrieves the details of a specific approval request.  <Note>To use the approval workflow operations, you must use the Cobo OAuth authentication method ([Org Access Token](https://www.cobo.com/developers/v2/apps/org-access-tokens)).</Note> 
     * @param {String} approval_id The system-generated unique ID of the approval request.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApprovalRequestDetail} and HTTP response
     */
    getApprovalRequestByIdWithHttpInfo(approval_id) {
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'approval_id' is set
      if (approval_id === undefined || approval_id === null) {
        throw new Error("Missing the required parameter 'approval_id' when calling getApprovalRequestById");
      }

      let pathParams = {
        'approval_id': approval_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApprovalRequestDetail;
      return this.apiClient.callApi(
        '/app/workflows/approval_requests/{approval_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get approval request details
     * This operation retrieves the details of a specific approval request.  <Note>To use the approval workflow operations, you must use the Cobo OAuth authentication method ([Org Access Token](https://www.cobo.com/developers/v2/apps/org-access-tokens)).</Note> 
     * @param {String} approval_id The system-generated unique ID of the approval request.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApprovalRequestDetail}
     */
    getApprovalRequestById(approval_id) {
      return this.getApprovalRequestByIdWithHttpInfo(approval_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List app workflows
     * This operation retrieves all approval workflows of an Cobo Portal App. <Note>You need to [configure approval workflow](https://www.cobo.com/developers/v2/apps/configure-workflow) in the app Manifest file first.</Note> <Note>To use the approval workflow operations, you must use the Cobo OAuth authentication method ([Org Access Token](https://www.cobo.com/developers/v2/apps/org-access-tokens)).</Note> 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/AppWorkflow>} and HTTP response
     */
    listAppWorkflowsWithHttpInfo() {
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AppWorkflow];
      return this.apiClient.callApi(
        '/app/workflows', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List app workflows
     * This operation retrieves all approval workflows of an Cobo Portal App. <Note>You need to [configure approval workflow](https://www.cobo.com/developers/v2/apps/configure-workflow) in the app Manifest file first.</Note> <Note>To use the approval workflow operations, you must use the Cobo OAuth authentication method ([Org Access Token](https://www.cobo.com/developers/v2/apps/org-access-tokens)).</Note> 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/AppWorkflow>}
     */
    listAppWorkflows() {
      return this.listAppWorkflowsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List approval requests
     * This operation retrieves a list of approval requests.  <Note>To use the approval workflow operations, you must use the Cobo OAuth authentication method ([Org Access Token](https://www.cobo.com/developers/v2/apps/org-access-tokens)).</Note> 
     * @param {String} operation_id The unique ID of the approval workflow.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] The maximum number of objects to return. For most operations, the value range is [1, 50].
     * @param {String} [before] A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} [after] A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListApprovalRequests200Response} and HTTP response
     */
    listApprovalRequestsWithHttpInfo(operation_id, opts) {
      opts = opts || {};
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'operation_id' is set
      if (operation_id === undefined || operation_id === null) {
        throw new Error("Missing the required parameter 'operation_id' when calling listApprovalRequests");
      }

      let pathParams = {
      };
      let queryParams = {
        'operation_id': operation_id,
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListApprovalRequests200Response;
      return this.apiClient.callApi(
        '/app/workflows/approval_requests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List approval requests
     * This operation retrieves a list of approval requests.  <Note>To use the approval workflow operations, you must use the Cobo OAuth authentication method ([Org Access Token](https://www.cobo.com/developers/v2/apps/org-access-tokens)).</Note> 
     * @param {String} operation_id The unique ID of the approval workflow.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (default to 10)
     * @param {String} opts.before A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} opts.after A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListApprovalRequests200Response}
     */
    listApprovalRequests(operation_id, opts) {
      return this.listApprovalRequestsWithHttpInfo(operation_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Revoke approval request
     * This operation revokes a pending approval request.  <Note>To use the approval workflow operations, you must use the Cobo OAuth authentication method ([Org Access Token](https://www.cobo.com/developers/v2/apps/org-access-tokens)).</Note> 
     * @param {String} approval_id The system-generated unique ID of the approval request.
     * @param {Object} opts Optional parameters
     * @param {module:model/RevokeApprovalRequestRequest} [RevokeApprovalRequestRequest] The request body to revoke an approval request.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RevokeApprovalRequest201Response} and HTTP response
     */
    revokeApprovalRequestWithHttpInfo(approval_id, opts) {
      opts = opts || {};
      let postBody = opts['RevokeApprovalRequestRequest'];
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'approval_id' is set
      if (approval_id === undefined || approval_id === null) {
        throw new Error("Missing the required parameter 'approval_id' when calling revokeApprovalRequest");
      }

      let pathParams = {
        'approval_id': approval_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RevokeApprovalRequest201Response;
      return this.apiClient.callApi(
        '/app/workflows/approval_requests/{approval_id}/revoke', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Revoke approval request
     * This operation revokes a pending approval request.  <Note>To use the approval workflow operations, you must use the Cobo OAuth authentication method ([Org Access Token](https://www.cobo.com/developers/v2/apps/org-access-tokens)).</Note> 
     * @param {String} approval_id The system-generated unique ID of the approval request.
     * @param {Object} opts Optional parameters
     * @param {module:model/RevokeApprovalRequestRequest} opts.RevokeApprovalRequestRequest The request body to revoke an approval request.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RevokeApprovalRequest201Response}
     */
    revokeApprovalRequest(approval_id, opts) {
      return this.revokeApprovalRequestWithHttpInfo(approval_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
