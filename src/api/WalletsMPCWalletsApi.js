/**
 * Cobo Wallet as a Service 2.0
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateKeyGroupRequest from '../model/CreateKeyGroupRequest';
import CreateMpcProjectRequest from '../model/CreateMpcProjectRequest';
import CreateMpcVaultRequest from '../model/CreateMpcVaultRequest';
import CreateTssRequestRequest from '../model/CreateTssRequestRequest';
import ErrorResponse from '../model/ErrorResponse';
import KeyGroup from '../model/KeyGroup';
import KeyGroupType from '../model/KeyGroupType';
import KeyHolder from '../model/KeyHolder';
import MPCProject from '../model/MPCProject';
import MPCVault from '../model/MPCVault';
import ModifyMpcVaultRequest from '../model/ModifyMpcVaultRequest';
import TSSRequest from '../model/TSSRequest';
import UpdateKeyGroupRequest from '../model/UpdateKeyGroupRequest';
import UpdateMpcProjectRequest from '../model/UpdateMpcProjectRequest';

/**
* WalletsMPCWallets service.
* @module api/WalletsMPCWalletsApi
* @version 0.1.0
*/
export default class WalletsMPCWalletsApi {

    /**
    * Constructs a new WalletsMPCWalletsApi. 
    * @alias module:api/WalletsMPCWalletsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Cancel TSS request
     * This operation cancels a TSS request. 
     * @param {String} vaultId The vault ID, which you can retrieve by calling [List all vaults](/v2/api-references/wallets--mpc-wallet/list-all-mpc-vaults).
     * @param {String} tssRequestId The TSS request ID, which you can retrieve by calling [List TSS requests](/v2/api-references/wallets--mpc-wallets/list-tss-requests).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TSSRequest} and HTTP response
     */
    cancelTssRequestWithHttpInfo(vaultId, tssRequestId) {
      let postBody = null;
      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling cancelTssRequest");
      }
      // verify the required parameter 'tssRequestId' is set
      if (tssRequestId === undefined || tssRequestId === null) {
        throw new Error("Missing the required parameter 'tssRequestId' when calling cancelTssRequest");
      }

      let pathParams = {
        'vault_id': vaultId,
        'tss_request_id': tssRequestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TSSRequest;
      return this.apiClient.callApi(
        '/wallets/mpc/vaults/{vault_id}/tss_requests/{tss_request_id}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Cancel TSS request
     * This operation cancels a TSS request. 
     * @param {String} vaultId The vault ID, which you can retrieve by calling [List all vaults](/v2/api-references/wallets--mpc-wallet/list-all-mpc-vaults).
     * @param {String} tssRequestId The TSS request ID, which you can retrieve by calling [List TSS requests](/v2/api-references/wallets--mpc-wallets/list-tss-requests).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TSSRequest}
     */
    cancelTssRequest(vaultId, tssRequestId) {
      return this.cancelTssRequestWithHttpInfo(vaultId, tssRequestId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create key share group
     * This operation creates a key share group for a specified vault. 
     * @param {String} vaultId The vault ID, which you can retrieve by calling [List all vaults](/v2/api-references/wallets--mpc-wallet/list-all-mpc-vaults).
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateKeyGroupRequest} [createKeyGroupRequest] The request body to create a key share group.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/KeyGroup} and HTTP response
     */
    createKeyGroupWithHttpInfo(vaultId, opts) {
      opts = opts || {};
      let postBody = opts['createKeyGroupRequest'];
      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling createKeyGroup");
      }

      let pathParams = {
        'vault_id': vaultId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = KeyGroup;
      return this.apiClient.callApi(
        '/wallets/mpc/vaults/{vault_id}/key_groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create key share group
     * This operation creates a key share group for a specified vault. 
     * @param {String} vaultId The vault ID, which you can retrieve by calling [List all vaults](/v2/api-references/wallets--mpc-wallet/list-all-mpc-vaults).
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateKeyGroupRequest} opts.createKeyGroupRequest The request body to create a key share group.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/KeyGroup}
     */
    createKeyGroup(vaultId, opts) {
      return this.createKeyGroupWithHttpInfo(vaultId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create project
     * This operation creates a project. 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateMpcProjectRequest} [createMpcProjectRequest] The request body to create a project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MPCProject} and HTTP response
     */
    createMpcProjectWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['createMpcProjectRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MPCProject;
      return this.apiClient.callApi(
        '/wallets/mpc/projects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create project
     * This operation creates a project. 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateMpcProjectRequest} opts.createMpcProjectRequest The request body to create a project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MPCProject}
     */
    createMpcProject(opts) {
      return this.createMpcProjectWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create vault
     * This operation creates a vault. 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateMpcVaultRequest} [createMpcVaultRequest] The request body to create a vault.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MPCVault} and HTTP response
     */
    createMpcVaultWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['createMpcVaultRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MPCVault;
      return this.apiClient.callApi(
        '/wallets/mpc/vaults', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create vault
     * This operation creates a vault. 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateMpcVaultRequest} opts.createMpcVaultRequest The request body to create a vault.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MPCVault}
     */
    createMpcVault(opts) {
      return this.createMpcVaultWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create TSS request
     * This operation creates a TSS request under a specified vault. You can use this operation to perform actions such as key generation and recovery. 
     * @param {String} vaultId The vault ID, which you can retrieve by calling [List all vaults](/v2/api-references/wallets--mpc-wallet/list-all-mpc-vaults).
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateTssRequestRequest} [createTssRequestRequest] The request body to create a TSS request.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TSSRequest} and HTTP response
     */
    createTssRequestWithHttpInfo(vaultId, opts) {
      opts = opts || {};
      let postBody = opts['createTssRequestRequest'];
      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling createTssRequest");
      }

      let pathParams = {
        'vault_id': vaultId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TSSRequest;
      return this.apiClient.callApi(
        '/wallets/mpc/vaults/{vault_id}/tss_requests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create TSS request
     * This operation creates a TSS request under a specified vault. You can use this operation to perform actions such as key generation and recovery. 
     * @param {String} vaultId The vault ID, which you can retrieve by calling [List all vaults](/v2/api-references/wallets--mpc-wallet/list-all-mpc-vaults).
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateTssRequestRequest} opts.createTssRequestRequest The request body to create a TSS request.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TSSRequest}
     */
    createTssRequest(vaultId, opts) {
      return this.createTssRequestWithHttpInfo(vaultId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete key share group
     * This operation deletes a specified key share group.
     * @param {String} vaultId The vault ID, which you can retrieve by calling [List all vaults](/v2/api-references/wallets--mpc-wallet/list-all-mpc-vaults).
     * @param {String} keyShareGroupId The key share group ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteKeyGroupWithHttpInfo(vaultId, keyShareGroupId) {
      let postBody = null;
      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling deleteKeyGroup");
      }
      // verify the required parameter 'keyShareGroupId' is set
      if (keyShareGroupId === undefined || keyShareGroupId === null) {
        throw new Error("Missing the required parameter 'keyShareGroupId' when calling deleteKeyGroup");
      }

      let pathParams = {
        'vault_id': vaultId,
        'key_share_group_id': keyShareGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/wallets/mpc/vaults/{vault_id}/key_groups/{key_share_group_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete key share group
     * This operation deletes a specified key share group.
     * @param {String} vaultId The vault ID, which you can retrieve by calling [List all vaults](/v2/api-references/wallets--mpc-wallet/list-all-mpc-vaults).
     * @param {String} keyShareGroupId The key share group ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteKeyGroup(vaultId, keyShareGroupId) {
      return this.deleteKeyGroupWithHttpInfo(vaultId, keyShareGroupId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get key share group information
     * This operation retrieves detailed information about a specified key share group. 
     * @param {String} vaultId The vault ID, which you can retrieve by calling [List all vaults](/v2/api-references/wallets--mpc-wallet/list-all-mpc-vaults).
     * @param {String} keyShareGroupId The key share group ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/KeyGroup} and HTTP response
     */
    getKeyGroupWithHttpInfo(vaultId, keyShareGroupId) {
      let postBody = null;
      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling getKeyGroup");
      }
      // verify the required parameter 'keyShareGroupId' is set
      if (keyShareGroupId === undefined || keyShareGroupId === null) {
        throw new Error("Missing the required parameter 'keyShareGroupId' when calling getKeyGroup");
      }

      let pathParams = {
        'vault_id': vaultId,
        'key_share_group_id': keyShareGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = KeyGroup;
      return this.apiClient.callApi(
        '/wallets/mpc/vaults/{vault_id}/key_groups/{key_share_group_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get key share group information
     * This operation retrieves detailed information about a specified key share group. 
     * @param {String} vaultId The vault ID, which you can retrieve by calling [List all vaults](/v2/api-references/wallets--mpc-wallet/list-all-mpc-vaults).
     * @param {String} keyShareGroupId The key share group ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/KeyGroup}
     */
    getKeyGroup(vaultId, keyShareGroupId) {
      return this.getKeyGroupWithHttpInfo(vaultId, keyShareGroupId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get project information
     * This operation retrieves detailed information about a project. 
     * @param {String} projectId The project ID, which you can retrieve by calling [List all projects](/v2/api-references/wallets--mpc-wallets/list-all-projects).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MPCProject} and HTTP response
     */
    getMpcProjectWithHttpInfo(projectId) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getMpcProject");
      }

      let pathParams = {
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MPCProject;
      return this.apiClient.callApi(
        '/wallets/mpc/projects/{project_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get project information
     * This operation retrieves detailed information about a project. 
     * @param {String} projectId The project ID, which you can retrieve by calling [List all projects](/v2/api-references/wallets--mpc-wallets/list-all-projects).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MPCProject}
     */
    getMpcProject(projectId) {
      return this.getMpcProjectWithHttpInfo(projectId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get vault information
     * This operation retrieves detailed information about a vault. 
     * @param {String} vaultId The vault ID, which you can retrieve by calling [List all vaults](/v2/api-references/wallets--mpc-wallet/list-all-mpc-vaults).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MPCVault} and HTTP response
     */
    getMpcVaultWithHttpInfo(vaultId) {
      let postBody = null;
      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling getMpcVault");
      }

      let pathParams = {
        'vault_id': vaultId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MPCVault;
      return this.apiClient.callApi(
        '/wallets/mpc/vaults/{vault_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get vault information
     * This operation retrieves detailed information about a vault. 
     * @param {String} vaultId The vault ID, which you can retrieve by calling [List all vaults](/v2/api-references/wallets--mpc-wallet/list-all-mpc-vaults).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MPCVault}
     */
    getMpcVault(vaultId) {
      return this.getMpcVaultWithHttpInfo(vaultId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get TSS request
     * This operation retrieves detailed information about a TSS request. 
     * @param {String} vaultId The vault ID, which you can retrieve by calling [List all vaults](/v2/api-references/wallets--mpc-wallet/list-all-mpc-vaults).
     * @param {String} tssRequestId The TSS request ID, which you can retrieve by calling [List TSS requests](/v2/api-references/wallets--mpc-wallets/list-tss-requests).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TSSRequest} and HTTP response
     */
    getTssRequestWithHttpInfo(vaultId, tssRequestId) {
      let postBody = null;
      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling getTssRequest");
      }
      // verify the required parameter 'tssRequestId' is set
      if (tssRequestId === undefined || tssRequestId === null) {
        throw new Error("Missing the required parameter 'tssRequestId' when calling getTssRequest");
      }

      let pathParams = {
        'vault_id': vaultId,
        'tss_request_id': tssRequestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TSSRequest;
      return this.apiClient.callApi(
        '/wallets/mpc/vaults/{vault_id}/tss_requests/{tss_request_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get TSS request
     * This operation retrieves detailed information about a TSS request. 
     * @param {String} vaultId The vault ID, which you can retrieve by calling [List all vaults](/v2/api-references/wallets--mpc-wallet/list-all-mpc-vaults).
     * @param {String} tssRequestId The TSS request ID, which you can retrieve by calling [List TSS requests](/v2/api-references/wallets--mpc-wallets/list-tss-requests).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TSSRequest}
     */
    getTssRequest(vaultId, tssRequestId) {
      return this.getTssRequestWithHttpInfo(vaultId, tssRequestId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all Cobo key share holders
     * This operation retrieves a list of all Cobo key share holders and their information.   <Note>When using this operation, `type` will only return `Cobo` and will never return `Mobile` or `API`.</Note> 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/KeyHolder>} and HTTP response
     */
    listCoboKeyHolderWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [KeyHolder];
      return this.apiClient.callApi(
        '/wallets/mpc/cobo_key_holders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all Cobo key share holders
     * This operation retrieves a list of all Cobo key share holders and their information.   <Note>When using this operation, `type` will only return `Cobo` and will never return `Mobile` or `API`.</Note> 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/KeyHolder>}
     */
    listCoboKeyHolder() {
      return this.listCoboKeyHolderWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all key share groups
     * This operation retrieves all key share groups under a specified vault. You can filter the result by group type. 
     * @param {String} vaultId The vault ID, which you can retrieve by calling [List all vaults](/v2/api-references/wallets--mpc-wallet/list-all-mpc-vaults).
     * @param {Object} opts Optional parameters
     * @param {module:model/KeyGroupType} [keyGroupType] The selected key share group type to retrieve. Possible values include: - `MainKeyGroup`: Only [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups) will be retrieved.  - `SigningKeyGroup`: Only [Signing Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups) will be retrieved.  - `RecoveryKeyGroup`: Only [Recovery Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups) will be retrieved.  **Note:** If there's no value selected for `key_group_type`, all key share group types will be retrieved. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/KeyGroup>} and HTTP response
     */
    listKeyGroupWithHttpInfo(vaultId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling listKeyGroup");
      }

      let pathParams = {
        'vault_id': vaultId
      };
      let queryParams = {
        'key_group_type': opts['keyGroupType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [KeyGroup];
      return this.apiClient.callApi(
        '/wallets/mpc/vaults/{vault_id}/key_groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all key share groups
     * This operation retrieves all key share groups under a specified vault. You can filter the result by group type. 
     * @param {String} vaultId The vault ID, which you can retrieve by calling [List all vaults](/v2/api-references/wallets--mpc-wallet/list-all-mpc-vaults).
     * @param {Object} opts Optional parameters
     * @param {module:model/KeyGroupType} opts.keyGroupType The selected key share group type to retrieve. Possible values include: - `MainKeyGroup`: Only [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups) will be retrieved.  - `SigningKeyGroup`: Only [Signing Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups) will be retrieved.  - `RecoveryKeyGroup`: Only [Recovery Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups) will be retrieved.  **Note:** If there's no value selected for `key_group_type`, all key share group types will be retrieved. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/KeyGroup>}
     */
    listKeyGroup(vaultId, opts) {
      return this.listKeyGroupWithHttpInfo(vaultId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all projects
     * This operation retrieves a list of all projects. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/MPCProject>} and HTTP response
     */
    listMpcProjectWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [MPCProject];
      return this.apiClient.callApi(
        '/wallets/mpc/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all projects
     * This operation retrieves a list of all projects. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/MPCProject>}
     */
    listMpcProject() {
      return this.listMpcProjectWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all vaults
     * This operation retrieves a list of all vaults.  <Note>By optionally specifying a project ID, you can retrieve a list of all vaults under a single project.</Note> 
     * @param {Object} opts Optional parameters
     * @param {String} [projectId] The project ID, which you can retrieve by calling [List all projects](/v2/api-references/wallets--mpc-wallets/list-all-projects).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/MPCVault>} and HTTP response
     */
    listMpcVaultWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'project_id': opts['projectId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [MPCVault];
      return this.apiClient.callApi(
        '/wallets/mpc/vaults', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all vaults
     * This operation retrieves a list of all vaults.  <Note>By optionally specifying a project ID, you can retrieve a list of all vaults under a single project.</Note> 
     * @param {Object} opts Optional parameters
     * @param {String} opts.projectId The project ID, which you can retrieve by calling [List all projects](/v2/api-references/wallets--mpc-wallets/list-all-projects).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/MPCVault>}
     */
    listMpcVault(opts) {
      return this.listMpcVaultWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List TSS requests
     * This operation retrieves a list of TSS requests and their details. 
     * @param {String} vaultId The vault ID, which you can retrieve by calling [List all vaults](/v2/api-references/wallets--mpc-wallet/list-all-mpc-vaults).
     * @param {String} targetKeyGroupId The target key share group ID of the TSS request, which you can retrieve by calling [List all key share groups](/v2/api-references/wallets--mpc-wallets/list-all-key-share-groups).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/TSSRequest>} and HTTP response
     */
    listTssRequestWithHttpInfo(vaultId, targetKeyGroupId) {
      let postBody = null;
      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling listTssRequest");
      }
      // verify the required parameter 'targetKeyGroupId' is set
      if (targetKeyGroupId === undefined || targetKeyGroupId === null) {
        throw new Error("Missing the required parameter 'targetKeyGroupId' when calling listTssRequest");
      }

      let pathParams = {
        'vault_id': vaultId
      };
      let queryParams = {
        'target_key_group_id': targetKeyGroupId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TSSRequest];
      return this.apiClient.callApi(
        '/wallets/mpc/vaults/{vault_id}/tss_requests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List TSS requests
     * This operation retrieves a list of TSS requests and their details. 
     * @param {String} vaultId The vault ID, which you can retrieve by calling [List all vaults](/v2/api-references/wallets--mpc-wallet/list-all-mpc-vaults).
     * @param {String} targetKeyGroupId The target key share group ID of the TSS request, which you can retrieve by calling [List all key share groups](/v2/api-references/wallets--mpc-wallets/list-all-key-share-groups).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/TSSRequest>}
     */
    listTssRequest(vaultId, targetKeyGroupId) {
      return this.listTssRequestWithHttpInfo(vaultId, targetKeyGroupId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update vault name
     * This operation updates a vault's name. 
     * @param {String} vaultId The vault ID, which you can retrieve by calling [List all vaults](/v2/api-references/wallets--mpc-wallet/list-all-mpc-vaults).
     * @param {Object} opts Optional parameters
     * @param {module:model/ModifyMpcVaultRequest} [modifyMpcVaultRequest] The request body to update a vault's name.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MPCVault} and HTTP response
     */
    modifyMpcVaultWithHttpInfo(vaultId, opts) {
      opts = opts || {};
      let postBody = opts['modifyMpcVaultRequest'];
      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling modifyMpcVault");
      }

      let pathParams = {
        'vault_id': vaultId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MPCVault;
      return this.apiClient.callApi(
        '/wallets/mpc/vaults/{vault_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update vault name
     * This operation updates a vault's name. 
     * @param {String} vaultId The vault ID, which you can retrieve by calling [List all vaults](/v2/api-references/wallets--mpc-wallet/list-all-mpc-vaults).
     * @param {Object} opts Optional parameters
     * @param {module:model/ModifyMpcVaultRequest} opts.modifyMpcVaultRequest The request body to update a vault's name.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MPCVault}
     */
    modifyMpcVault(vaultId, opts) {
      return this.modifyMpcVaultWithHttpInfo(vaultId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update key share group
     * This operation updates a specified active [Signing Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups). For example, you can use this operation to upgrade a Signing Group to the [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups). 
     * @param {String} vaultId The vault ID, which you can retrieve by calling [List all vaults](/v2/api-references/wallets--mpc-wallet/list-all-mpc-vaults).
     * @param {String} keyShareGroupId The key share group ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateKeyGroupRequest} [updateKeyGroupRequest] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/KeyGroup} and HTTP response
     */
    updateKeyGroupWithHttpInfo(vaultId, keyShareGroupId, opts) {
      opts = opts || {};
      let postBody = opts['updateKeyGroupRequest'];
      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling updateKeyGroup");
      }
      // verify the required parameter 'keyShareGroupId' is set
      if (keyShareGroupId === undefined || keyShareGroupId === null) {
        throw new Error("Missing the required parameter 'keyShareGroupId' when calling updateKeyGroup");
      }

      let pathParams = {
        'vault_id': vaultId,
        'key_share_group_id': keyShareGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = KeyGroup;
      return this.apiClient.callApi(
        '/wallets/mpc/vaults/{vault_id}/key_groups/{key_share_group_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update key share group
     * This operation updates a specified active [Signing Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups). For example, you can use this operation to upgrade a Signing Group to the [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups). 
     * @param {String} vaultId The vault ID, which you can retrieve by calling [List all vaults](/v2/api-references/wallets--mpc-wallet/list-all-mpc-vaults).
     * @param {String} keyShareGroupId The key share group ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateKeyGroupRequest} opts.updateKeyGroupRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/KeyGroup}
     */
    updateKeyGroup(vaultId, keyShareGroupId, opts) {
      return this.updateKeyGroupWithHttpInfo(vaultId, keyShareGroupId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update project name
     * This operation updates a project's name. 
     * @param {String} projectId The project ID, which you can retrieve by calling [List all projects](/v2/api-references/wallets--mpc-wallets/list-all-projects).
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateMpcProjectRequest} [updateMpcProjectRequest] The request body to update a project's name.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MPCProject} and HTTP response
     */
    updateMpcProjectWithHttpInfo(projectId, opts) {
      opts = opts || {};
      let postBody = opts['updateMpcProjectRequest'];
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateMpcProject");
      }

      let pathParams = {
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MPCProject;
      return this.apiClient.callApi(
        '/wallets/mpc/projects/{project_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update project name
     * This operation updates a project's name. 
     * @param {String} projectId The project ID, which you can retrieve by calling [List all projects](/v2/api-references/wallets--mpc-wallets/list-all-projects).
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateMpcProjectRequest} opts.updateMpcProjectRequest The request body to update a project's name.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MPCProject}
     */
    updateMpcProject(projectId, opts) {
      return this.updateMpcProjectWithHttpInfo(projectId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
