/**
 * Cobo Wallet as a Service 2.0
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateKeyShareHolderGroupRequest from '../model/CreateKeyShareHolderGroupRequest';
import CreateMpcProjectRequest from '../model/CreateMpcProjectRequest';
import CreateMpcVaultRequest from '../model/CreateMpcVaultRequest';
import CreateTssRequestRequest from '../model/CreateTssRequestRequest';
import DeleteKeyShareHolderGroupById201Response from '../model/DeleteKeyShareHolderGroupById201Response';
import ErrorResponse from '../model/ErrorResponse';
import KeyShareHolder from '../model/KeyShareHolder';
import KeyShareHolderGroup from '../model/KeyShareHolderGroup';
import KeyShareHolderGroupType from '../model/KeyShareHolderGroupType';
import ListKeyShareHolderGroups200Response from '../model/ListKeyShareHolderGroups200Response';
import ListMpcProjects200Response from '../model/ListMpcProjects200Response';
import ListMpcVaults200Response from '../model/ListMpcVaults200Response';
import ListTssRequests200Response from '../model/ListTssRequests200Response';
import MPCProject from '../model/MPCProject';
import MPCVault from '../model/MPCVault';
import MPCVaultType from '../model/MPCVaultType';
import TSSRequest from '../model/TSSRequest';
import UpdateKeyShareHolderGroupByIdRequest from '../model/UpdateKeyShareHolderGroupByIdRequest';
import UpdateMpcProjectByIdRequest from '../model/UpdateMpcProjectByIdRequest';
import UpdateMpcVaultByIdRequest from '../model/UpdateMpcVaultByIdRequest';

/**
* WalletsMPCWallets service.
* @module api/WalletsMPCWalletsApi
* @version 0.2.7
*/
export default class WalletsMPCWalletsApi {

    /**
    * Constructs a new WalletsMPCWalletsApi. 
    * @alias module:api/WalletsMPCWalletsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Cancel TSS request
     * This operation cancels a TSS request. 
     * @param {String} vaultId The vault ID, which you can retrieve by calling [List all vaults](/developers/v2/api-references/wallets--mpc-wallet/list-all-mpc-vaults).
     * @param {String} tssRequestId The TSS request ID, which you can retrieve by calling [List TSS requests](/developers/v2/api-references/wallets--mpc-wallets/list-tss-requests).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TSSRequest} and HTTP response
     */
    cancelTssRequestByIdWithHttpInfo(vaultId, tssRequestId) {
      let postBody = null;
      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling cancelTssRequestById");
      }
      // verify the required parameter 'tssRequestId' is set
      if (tssRequestId === undefined || tssRequestId === null) {
        throw new Error("Missing the required parameter 'tssRequestId' when calling cancelTssRequestById");
      }

      let pathParams = {
        'vault_id': vaultId,
        'tss_request_id': tssRequestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TSSRequest;
      return this.apiClient.callApi(
        '/wallets/mpc/vaults/{vault_id}/tss_requests/{tss_request_id}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Cancel TSS request
     * This operation cancels a TSS request. 
     * @param {String} vaultId The vault ID, which you can retrieve by calling [List all vaults](/developers/v2/api-references/wallets--mpc-wallet/list-all-mpc-vaults).
     * @param {String} tssRequestId The TSS request ID, which you can retrieve by calling [List TSS requests](/developers/v2/api-references/wallets--mpc-wallets/list-tss-requests).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TSSRequest}
     */
    cancelTssRequestById(vaultId, tssRequestId) {
      return this.cancelTssRequestByIdWithHttpInfo(vaultId, tssRequestId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create key share holder group
     * This operation creates a key share group for a specified vault. 
     * @param {String} vaultId The vault ID, which you can retrieve by calling [List all vaults](/developers/v2/api-references/wallets--mpc-wallet/list-all-mpc-vaults).
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateKeyShareHolderGroupRequest} [createKeyShareHolderGroupRequest] The request body to create a key share holder group.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/KeyShareHolderGroup} and HTTP response
     */
    createKeyShareHolderGroupWithHttpInfo(vaultId, opts) {
      opts = opts || {};
      let postBody = opts['createKeyShareHolderGroupRequest'];
      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling createKeyShareHolderGroup");
      }

      let pathParams = {
        'vault_id': vaultId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = KeyShareHolderGroup;
      return this.apiClient.callApi(
        '/wallets/mpc/vaults/{vault_id}/key_share_holder_groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create key share holder group
     * This operation creates a key share group for a specified vault. 
     * @param {String} vaultId The vault ID, which you can retrieve by calling [List all vaults](/developers/v2/api-references/wallets--mpc-wallet/list-all-mpc-vaults).
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateKeyShareHolderGroupRequest} opts.createKeyShareHolderGroupRequest The request body to create a key share holder group.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/KeyShareHolderGroup}
     */
    createKeyShareHolderGroup(vaultId, opts) {
      return this.createKeyShareHolderGroupWithHttpInfo(vaultId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create project
     * This operation creates a project. 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateMpcProjectRequest} [createMpcProjectRequest] The request body to create a project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MPCProject} and HTTP response
     */
    createMpcProjectWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['createMpcProjectRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MPCProject;
      return this.apiClient.callApi(
        '/wallets/mpc/projects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create project
     * This operation creates a project. 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateMpcProjectRequest} opts.createMpcProjectRequest The request body to create a project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MPCProject}
     */
    createMpcProject(opts) {
      return this.createMpcProjectWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create vault
     * This operation creates a vault. 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateMpcVaultRequest} [createMpcVaultRequest] The request body to create a vault.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MPCVault} and HTTP response
     */
    createMpcVaultWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['createMpcVaultRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MPCVault;
      return this.apiClient.callApi(
        '/wallets/mpc/vaults', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create vault
     * This operation creates a vault. 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateMpcVaultRequest} opts.createMpcVaultRequest The request body to create a vault.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MPCVault}
     */
    createMpcVault(opts) {
      return this.createMpcVaultWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create TSS request
     * This operation creates a TSS request under a specified vault. You can use this operation to perform actions such as key generation and recovery. 
     * @param {String} vaultId The vault ID, which you can retrieve by calling [List all vaults](/developers/v2/api-references/wallets--mpc-wallet/list-all-mpc-vaults).
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateTssRequestRequest} [createTssRequestRequest] The request body to create a TSS request.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TSSRequest} and HTTP response
     */
    createTssRequestWithHttpInfo(vaultId, opts) {
      opts = opts || {};
      let postBody = opts['createTssRequestRequest'];
      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling createTssRequest");
      }

      let pathParams = {
        'vault_id': vaultId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TSSRequest;
      return this.apiClient.callApi(
        '/wallets/mpc/vaults/{vault_id}/tss_requests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create TSS request
     * This operation creates a TSS request under a specified vault. You can use this operation to perform actions such as key generation and recovery. 
     * @param {String} vaultId The vault ID, which you can retrieve by calling [List all vaults](/developers/v2/api-references/wallets--mpc-wallet/list-all-mpc-vaults).
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateTssRequestRequest} opts.createTssRequestRequest The request body to create a TSS request.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TSSRequest}
     */
    createTssRequest(vaultId, opts) {
      return this.createTssRequestWithHttpInfo(vaultId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete key share holder group
     * This operation deletes a specified key share holder group.
     * @param {String} vaultId The vault ID, which you can retrieve by calling [List all vaults](/developers/v2/api-references/wallets--mpc-wallet/list-all-mpc-vaults).
     * @param {String} keyShareHolderGroupId The key share group ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeleteKeyShareHolderGroupById201Response} and HTTP response
     */
    deleteKeyShareHolderGroupByIdWithHttpInfo(vaultId, keyShareHolderGroupId) {
      let postBody = null;
      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling deleteKeyShareHolderGroupById");
      }
      // verify the required parameter 'keyShareHolderGroupId' is set
      if (keyShareHolderGroupId === undefined || keyShareHolderGroupId === null) {
        throw new Error("Missing the required parameter 'keyShareHolderGroupId' when calling deleteKeyShareHolderGroupById");
      }

      let pathParams = {
        'vault_id': vaultId,
        'key_share_holder_group_id': keyShareHolderGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteKeyShareHolderGroupById201Response;
      return this.apiClient.callApi(
        '/wallets/mpc/vaults/{vault_id}/key_share_holder_groups/{key_share_holder_group_id}/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete key share holder group
     * This operation deletes a specified key share holder group.
     * @param {String} vaultId The vault ID, which you can retrieve by calling [List all vaults](/developers/v2/api-references/wallets--mpc-wallet/list-all-mpc-vaults).
     * @param {String} keyShareHolderGroupId The key share group ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeleteKeyShareHolderGroupById201Response}
     */
    deleteKeyShareHolderGroupById(vaultId, keyShareHolderGroupId) {
      return this.deleteKeyShareHolderGroupByIdWithHttpInfo(vaultId, keyShareHolderGroupId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get key share holder group information
     * This operation retrieves detailed information about a specified key share holder group. 
     * @param {String} vaultId The vault ID, which you can retrieve by calling [List all vaults](/developers/v2/api-references/wallets--mpc-wallet/list-all-mpc-vaults).
     * @param {String} keyShareHolderGroupId The key share group ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/KeyShareHolderGroup} and HTTP response
     */
    getKeyShareHolderGroupByIdWithHttpInfo(vaultId, keyShareHolderGroupId) {
      let postBody = null;
      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling getKeyShareHolderGroupById");
      }
      // verify the required parameter 'keyShareHolderGroupId' is set
      if (keyShareHolderGroupId === undefined || keyShareHolderGroupId === null) {
        throw new Error("Missing the required parameter 'keyShareHolderGroupId' when calling getKeyShareHolderGroupById");
      }

      let pathParams = {
        'vault_id': vaultId,
        'key_share_holder_group_id': keyShareHolderGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = KeyShareHolderGroup;
      return this.apiClient.callApi(
        '/wallets/mpc/vaults/{vault_id}/key_share_holder_groups/{key_share_holder_group_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get key share holder group information
     * This operation retrieves detailed information about a specified key share holder group. 
     * @param {String} vaultId The vault ID, which you can retrieve by calling [List all vaults](/developers/v2/api-references/wallets--mpc-wallet/list-all-mpc-vaults).
     * @param {String} keyShareHolderGroupId The key share group ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/KeyShareHolderGroup}
     */
    getKeyShareHolderGroupById(vaultId, keyShareHolderGroupId) {
      return this.getKeyShareHolderGroupByIdWithHttpInfo(vaultId, keyShareHolderGroupId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get project information
     * This operation retrieves detailed information about a project. 
     * @param {String} projectId The project ID, which you can retrieve by calling [List all projects](/developers/v2/api-references/wallets--mpc-wallets/list-all-projects).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MPCProject} and HTTP response
     */
    getMpcProjectByIdWithHttpInfo(projectId) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getMpcProjectById");
      }

      let pathParams = {
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MPCProject;
      return this.apiClient.callApi(
        '/wallets/mpc/projects/{project_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get project information
     * This operation retrieves detailed information about a project. 
     * @param {String} projectId The project ID, which you can retrieve by calling [List all projects](/developers/v2/api-references/wallets--mpc-wallets/list-all-projects).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MPCProject}
     */
    getMpcProjectById(projectId) {
      return this.getMpcProjectByIdWithHttpInfo(projectId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get vault information
     * This operation retrieves detailed information about a vault. 
     * @param {String} vaultId The vault ID, which you can retrieve by calling [List all vaults](/developers/v2/api-references/wallets--mpc-wallet/list-all-mpc-vaults).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MPCVault} and HTTP response
     */
    getMpcVaultByIdWithHttpInfo(vaultId) {
      let postBody = null;
      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling getMpcVaultById");
      }

      let pathParams = {
        'vault_id': vaultId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MPCVault;
      return this.apiClient.callApi(
        '/wallets/mpc/vaults/{vault_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get vault information
     * This operation retrieves detailed information about a vault. 
     * @param {String} vaultId The vault ID, which you can retrieve by calling [List all vaults](/developers/v2/api-references/wallets--mpc-wallet/list-all-mpc-vaults).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MPCVault}
     */
    getMpcVaultById(vaultId) {
      return this.getMpcVaultByIdWithHttpInfo(vaultId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get TSS request
     * This operation retrieves detailed information about a TSS request. 
     * @param {String} vaultId The vault ID, which you can retrieve by calling [List all vaults](/developers/v2/api-references/wallets--mpc-wallet/list-all-mpc-vaults).
     * @param {String} tssRequestId The TSS request ID, which you can retrieve by calling [List TSS requests](/developers/v2/api-references/wallets--mpc-wallets/list-tss-requests).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TSSRequest} and HTTP response
     */
    getTssRequestByIdWithHttpInfo(vaultId, tssRequestId) {
      let postBody = null;
      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling getTssRequestById");
      }
      // verify the required parameter 'tssRequestId' is set
      if (tssRequestId === undefined || tssRequestId === null) {
        throw new Error("Missing the required parameter 'tssRequestId' when calling getTssRequestById");
      }

      let pathParams = {
        'vault_id': vaultId,
        'tss_request_id': tssRequestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TSSRequest;
      return this.apiClient.callApi(
        '/wallets/mpc/vaults/{vault_id}/tss_requests/{tss_request_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get TSS request
     * This operation retrieves detailed information about a TSS request. 
     * @param {String} vaultId The vault ID, which you can retrieve by calling [List all vaults](/developers/v2/api-references/wallets--mpc-wallet/list-all-mpc-vaults).
     * @param {String} tssRequestId The TSS request ID, which you can retrieve by calling [List TSS requests](/developers/v2/api-references/wallets--mpc-wallets/list-tss-requests).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TSSRequest}
     */
    getTssRequestById(vaultId, tssRequestId) {
      return this.getTssRequestByIdWithHttpInfo(vaultId, tssRequestId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all Cobo key share holders
     * This operation retrieves a list of all Cobo key share holders and their information.   <Note>When using this operation, `type` will only return `Cobo` and will never return `Mobile` or `API`.</Note> 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/KeyShareHolder>} and HTTP response
     */
    listCoboKeyHoldersWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [KeyShareHolder];
      return this.apiClient.callApi(
        '/wallets/mpc/cobo_key_share_holders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all Cobo key share holders
     * This operation retrieves a list of all Cobo key share holders and their information.   <Note>When using this operation, `type` will only return `Cobo` and will never return `Mobile` or `API`.</Note> 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/KeyShareHolder>}
     */
    listCoboKeyHolders() {
      return this.listCoboKeyHoldersWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all key share holder groups
     * This operation retrieves all key share holder groups under a specified vault. You can filter the result by group type. 
     * @param {String} vaultId The vault ID, which you can retrieve by calling [List all vaults](/developers/v2/api-references/wallets--mpc-wallet/list-all-mpc-vaults).
     * @param {Object} opts Optional parameters
     * @param {module:model/KeyShareHolderGroupType} [keyShareHolderGroupType] The selected key share group type to retrieve. Possible values include: - `MainKeyGroup`: Only [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups) will be retrieved.  - `SigningKeyGroup`: Only [Signing Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups) will be retrieved.  - `RecoveryKeyGroup`: Only [Recovery Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups) will be retrieved.  **Note:** If there's no value selected for `key_group_type`, all key share group types will be retrieved. 
     * @param {Number} [limit = 10)] The maximum number of objects to return. For most operations, the value range is [1, 50].
     * @param {String} [before] An object ID that serves as a starting point for retrieving data in reverse chronological order. For example, if you specify `before` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`, the request will retrieve a list of data objects that end before the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`. You can set this parameter to the value of `pagination.before` in the response of the previous request.  - If you set both `after` and `before`, an error will occur.  - If you leave both `before` and `after` empty, the first page of data is returned.  - If you set `before` to `infinity`, the last page of data is returned. 
     * @param {String} [after] An object ID that acts as a starting point for retrieving data in chronological order. For example, if you specify `after` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`, the request will retrieve a list of data objects that start after the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`. You can set this parameter to the value of `pagination.after` in the response of the previous request.  - If you set both `after` and `before`, an error will occur.  - If you leave both `before` and `after` empty, the first page of data is returned. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListKeyShareHolderGroups200Response} and HTTP response
     */
    listKeyShareHolderGroupsWithHttpInfo(vaultId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling listKeyShareHolderGroups");
      }

      let pathParams = {
        'vault_id': vaultId
      };
      let queryParams = {
        'key_share_holder_group_type': opts['keyShareHolderGroupType'],
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListKeyShareHolderGroups200Response;
      return this.apiClient.callApi(
        '/wallets/mpc/vaults/{vault_id}/key_share_holder_groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all key share holder groups
     * This operation retrieves all key share holder groups under a specified vault. You can filter the result by group type. 
     * @param {String} vaultId The vault ID, which you can retrieve by calling [List all vaults](/developers/v2/api-references/wallets--mpc-wallet/list-all-mpc-vaults).
     * @param {Object} opts Optional parameters
     * @param {module:model/KeyShareHolderGroupType} opts.keyShareHolderGroupType The selected key share group type to retrieve. Possible values include: - `MainKeyGroup`: Only [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups) will be retrieved.  - `SigningKeyGroup`: Only [Signing Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups) will be retrieved.  - `RecoveryKeyGroup`: Only [Recovery Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups) will be retrieved.  **Note:** If there's no value selected for `key_group_type`, all key share group types will be retrieved. 
     * @param {Number} opts.limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (default to 10)
     * @param {String} opts.before An object ID that serves as a starting point for retrieving data in reverse chronological order. For example, if you specify `before` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`, the request will retrieve a list of data objects that end before the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`. You can set this parameter to the value of `pagination.before` in the response of the previous request.  - If you set both `after` and `before`, an error will occur.  - If you leave both `before` and `after` empty, the first page of data is returned.  - If you set `before` to `infinity`, the last page of data is returned. 
     * @param {String} opts.after An object ID that acts as a starting point for retrieving data in chronological order. For example, if you specify `after` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`, the request will retrieve a list of data objects that start after the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`. You can set this parameter to the value of `pagination.after` in the response of the previous request.  - If you set both `after` and `before`, an error will occur.  - If you leave both `before` and `after` empty, the first page of data is returned. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListKeyShareHolderGroups200Response}
     */
    listKeyShareHolderGroups(vaultId, opts) {
      return this.listKeyShareHolderGroupsWithHttpInfo(vaultId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all projects
     * This operation retrieves a list of all projects. 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] The maximum number of objects to return. For most operations, the value range is [1, 50].
     * @param {String} [before] An object ID that serves as a starting point for retrieving data in reverse chronological order. For example, if you specify `before` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`, the request will retrieve a list of data objects that end before the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`. You can set this parameter to the value of `pagination.before` in the response of the previous request.  - If you set both `after` and `before`, an error will occur.  - If you leave both `before` and `after` empty, the first page of data is returned.  - If you set `before` to `infinity`, the last page of data is returned. 
     * @param {String} [after] An object ID that acts as a starting point for retrieving data in chronological order. For example, if you specify `after` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`, the request will retrieve a list of data objects that start after the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`. You can set this parameter to the value of `pagination.after` in the response of the previous request.  - If you set both `after` and `before`, an error will occur.  - If you leave both `before` and `after` empty, the first page of data is returned. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListMpcProjects200Response} and HTTP response
     */
    listMpcProjectsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListMpcProjects200Response;
      return this.apiClient.callApi(
        '/wallets/mpc/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all projects
     * This operation retrieves a list of all projects. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (default to 10)
     * @param {String} opts.before An object ID that serves as a starting point for retrieving data in reverse chronological order. For example, if you specify `before` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`, the request will retrieve a list of data objects that end before the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`. You can set this parameter to the value of `pagination.before` in the response of the previous request.  - If you set both `after` and `before`, an error will occur.  - If you leave both `before` and `after` empty, the first page of data is returned.  - If you set `before` to `infinity`, the last page of data is returned. 
     * @param {String} opts.after An object ID that acts as a starting point for retrieving data in chronological order. For example, if you specify `after` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`, the request will retrieve a list of data objects that start after the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`. You can set this parameter to the value of `pagination.after` in the response of the previous request.  - If you set both `after` and `before`, an error will occur.  - If you leave both `before` and `after` empty, the first page of data is returned. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListMpcProjects200Response}
     */
    listMpcProjects(opts) {
      return this.listMpcProjectsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all vaults
     * This operation retrieves a list of all vaults.  <Note>By optionally specifying a project ID, you can retrieve a list of all vaults under a single project.</Note> 
     * @param {module:model/MPCVaultType} vaultType The Vault type.
     * @param {Object} opts Optional parameters
     * @param {String} [projectId] The project ID, which you can retrieve by calling [List all projects](/developers/v2/api-references/wallets--mpc-wallets/list-all-projects). This parameter is applicable to MPC Wallets only.
     * @param {Number} [limit = 10)] The maximum number of objects to return. For most operations, the value range is [1, 50].
     * @param {String} [before] An object ID that serves as a starting point for retrieving data in reverse chronological order. For example, if you specify `before` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`, the request will retrieve a list of data objects that end before the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`. You can set this parameter to the value of `pagination.before` in the response of the previous request.  - If you set both `after` and `before`, an error will occur.  - If you leave both `before` and `after` empty, the first page of data is returned.  - If you set `before` to `infinity`, the last page of data is returned. 
     * @param {String} [after] An object ID that acts as a starting point for retrieving data in chronological order. For example, if you specify `after` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`, the request will retrieve a list of data objects that start after the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`. You can set this parameter to the value of `pagination.after` in the response of the previous request.  - If you set both `after` and `before`, an error will occur.  - If you leave both `before` and `after` empty, the first page of data is returned. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListMpcVaults200Response} and HTTP response
     */
    listMpcVaultsWithHttpInfo(vaultType, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'vaultType' is set
      if (vaultType === undefined || vaultType === null) {
        throw new Error("Missing the required parameter 'vaultType' when calling listMpcVaults");
      }

      let pathParams = {
      };
      let queryParams = {
        'vault_type': vaultType,
        'project_id': opts['projectId'],
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListMpcVaults200Response;
      return this.apiClient.callApi(
        '/wallets/mpc/vaults', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all vaults
     * This operation retrieves a list of all vaults.  <Note>By optionally specifying a project ID, you can retrieve a list of all vaults under a single project.</Note> 
     * @param {module:model/MPCVaultType} vaultType The Vault type.
     * @param {Object} opts Optional parameters
     * @param {String} opts.projectId The project ID, which you can retrieve by calling [List all projects](/developers/v2/api-references/wallets--mpc-wallets/list-all-projects). This parameter is applicable to MPC Wallets only.
     * @param {Number} opts.limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (default to 10)
     * @param {String} opts.before An object ID that serves as a starting point for retrieving data in reverse chronological order. For example, if you specify `before` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`, the request will retrieve a list of data objects that end before the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`. You can set this parameter to the value of `pagination.before` in the response of the previous request.  - If you set both `after` and `before`, an error will occur.  - If you leave both `before` and `after` empty, the first page of data is returned.  - If you set `before` to `infinity`, the last page of data is returned. 
     * @param {String} opts.after An object ID that acts as a starting point for retrieving data in chronological order. For example, if you specify `after` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`, the request will retrieve a list of data objects that start after the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`. You can set this parameter to the value of `pagination.after` in the response of the previous request.  - If you set both `after` and `before`, an error will occur.  - If you leave both `before` and `after` empty, the first page of data is returned. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListMpcVaults200Response}
     */
    listMpcVaults(vaultType, opts) {
      return this.listMpcVaultsWithHttpInfo(vaultType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List TSS requests
     * This operation retrieves a list of TSS requests and their details. 
     * @param {String} vaultId The vault ID, which you can retrieve by calling [List all vaults](/developers/v2/api-references/wallets--mpc-wallet/list-all-mpc-vaults).
     * @param {String} keyShareHolderGroupId The key share holder group ID of the TSS request, which you can retrieve by calling [List all key share groups](/developers/v2/api-references/wallets--mpc-wallets/list-all-key-share-groups).
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] The maximum number of objects to return. For most operations, the value range is [1, 50].
     * @param {String} [before] An object ID that serves as a starting point for retrieving data in reverse chronological order. For example, if you specify `before` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`, the request will retrieve a list of data objects that end before the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`. You can set this parameter to the value of `pagination.before` in the response of the previous request.  - If you set both `after` and `before`, an error will occur.  - If you leave both `before` and `after` empty, the first page of data is returned.  - If you set `before` to `infinity`, the last page of data is returned. 
     * @param {String} [after] An object ID that acts as a starting point for retrieving data in chronological order. For example, if you specify `after` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`, the request will retrieve a list of data objects that start after the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`. You can set this parameter to the value of `pagination.after` in the response of the previous request.  - If you set both `after` and `before`, an error will occur.  - If you leave both `before` and `after` empty, the first page of data is returned. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListTssRequests200Response} and HTTP response
     */
    listTssRequestsWithHttpInfo(vaultId, keyShareHolderGroupId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling listTssRequests");
      }
      // verify the required parameter 'keyShareHolderGroupId' is set
      if (keyShareHolderGroupId === undefined || keyShareHolderGroupId === null) {
        throw new Error("Missing the required parameter 'keyShareHolderGroupId' when calling listTssRequests");
      }

      let pathParams = {
        'vault_id': vaultId
      };
      let queryParams = {
        'key_share_holder_group_id': keyShareHolderGroupId,
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTssRequests200Response;
      return this.apiClient.callApi(
        '/wallets/mpc/vaults/{vault_id}/tss_requests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List TSS requests
     * This operation retrieves a list of TSS requests and their details. 
     * @param {String} vaultId The vault ID, which you can retrieve by calling [List all vaults](/developers/v2/api-references/wallets--mpc-wallet/list-all-mpc-vaults).
     * @param {String} keyShareHolderGroupId The key share holder group ID of the TSS request, which you can retrieve by calling [List all key share groups](/developers/v2/api-references/wallets--mpc-wallets/list-all-key-share-groups).
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (default to 10)
     * @param {String} opts.before An object ID that serves as a starting point for retrieving data in reverse chronological order. For example, if you specify `before` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`, the request will retrieve a list of data objects that end before the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`. You can set this parameter to the value of `pagination.before` in the response of the previous request.  - If you set both `after` and `before`, an error will occur.  - If you leave both `before` and `after` empty, the first page of data is returned.  - If you set `before` to `infinity`, the last page of data is returned. 
     * @param {String} opts.after An object ID that acts as a starting point for retrieving data in chronological order. For example, if you specify `after` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`, the request will retrieve a list of data objects that start after the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`. You can set this parameter to the value of `pagination.after` in the response of the previous request.  - If you set both `after` and `before`, an error will occur.  - If you leave both `before` and `after` empty, the first page of data is returned. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListTssRequests200Response}
     */
    listTssRequests(vaultId, keyShareHolderGroupId, opts) {
      return this.listTssRequestsWithHttpInfo(vaultId, keyShareHolderGroupId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update key share holder group
     * This operation updates a specified active [Signing Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups). For example, you can use this operation to upgrade a Signing Group to the [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups). 
     * @param {String} vaultId The vault ID, which you can retrieve by calling [List all vaults](/developers/v2/api-references/wallets--mpc-wallet/list-all-mpc-vaults).
     * @param {String} keyShareHolderGroupId The key share group ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateKeyShareHolderGroupByIdRequest} [updateKeyShareHolderGroupByIdRequest] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/KeyShareHolderGroup} and HTTP response
     */
    updateKeyShareHolderGroupByIdWithHttpInfo(vaultId, keyShareHolderGroupId, opts) {
      opts = opts || {};
      let postBody = opts['updateKeyShareHolderGroupByIdRequest'];
      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling updateKeyShareHolderGroupById");
      }
      // verify the required parameter 'keyShareHolderGroupId' is set
      if (keyShareHolderGroupId === undefined || keyShareHolderGroupId === null) {
        throw new Error("Missing the required parameter 'keyShareHolderGroupId' when calling updateKeyShareHolderGroupById");
      }

      let pathParams = {
        'vault_id': vaultId,
        'key_share_holder_group_id': keyShareHolderGroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = KeyShareHolderGroup;
      return this.apiClient.callApi(
        '/wallets/mpc/vaults/{vault_id}/key_share_holder_groups/{key_share_holder_group_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update key share holder group
     * This operation updates a specified active [Signing Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups). For example, you can use this operation to upgrade a Signing Group to the [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups). 
     * @param {String} vaultId The vault ID, which you can retrieve by calling [List all vaults](/developers/v2/api-references/wallets--mpc-wallet/list-all-mpc-vaults).
     * @param {String} keyShareHolderGroupId The key share group ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateKeyShareHolderGroupByIdRequest} opts.updateKeyShareHolderGroupByIdRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/KeyShareHolderGroup}
     */
    updateKeyShareHolderGroupById(vaultId, keyShareHolderGroupId, opts) {
      return this.updateKeyShareHolderGroupByIdWithHttpInfo(vaultId, keyShareHolderGroupId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update project name
     * This operation updates a project's name. 
     * @param {String} projectId The project ID, which you can retrieve by calling [List all projects](/developers/v2/api-references/wallets--mpc-wallets/list-all-projects).
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateMpcProjectByIdRequest} [updateMpcProjectByIdRequest] The request body to update a project's name.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MPCProject} and HTTP response
     */
    updateMpcProjectByIdWithHttpInfo(projectId, opts) {
      opts = opts || {};
      let postBody = opts['updateMpcProjectByIdRequest'];
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateMpcProjectById");
      }

      let pathParams = {
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MPCProject;
      return this.apiClient.callApi(
        '/wallets/mpc/projects/{project_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update project name
     * This operation updates a project's name. 
     * @param {String} projectId The project ID, which you can retrieve by calling [List all projects](/developers/v2/api-references/wallets--mpc-wallets/list-all-projects).
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateMpcProjectByIdRequest} opts.updateMpcProjectByIdRequest The request body to update a project's name.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MPCProject}
     */
    updateMpcProjectById(projectId, opts) {
      return this.updateMpcProjectByIdWithHttpInfo(projectId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update vault name
     * This operation updates a vault's name. 
     * @param {String} vaultId The vault ID, which you can retrieve by calling [List all vaults](/developers/v2/api-references/wallets--mpc-wallet/list-all-mpc-vaults).
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateMpcVaultByIdRequest} [updateMpcVaultByIdRequest] The request body to update a vault's name.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MPCVault} and HTTP response
     */
    updateMpcVaultByIdWithHttpInfo(vaultId, opts) {
      opts = opts || {};
      let postBody = opts['updateMpcVaultByIdRequest'];
      // verify the required parameter 'vaultId' is set
      if (vaultId === undefined || vaultId === null) {
        throw new Error("Missing the required parameter 'vaultId' when calling updateMpcVaultById");
      }

      let pathParams = {
        'vault_id': vaultId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MPCVault;
      return this.apiClient.callApi(
        '/wallets/mpc/vaults/{vault_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update vault name
     * This operation updates a vault's name. 
     * @param {String} vaultId The vault ID, which you can retrieve by calling [List all vaults](/developers/v2/api-references/wallets--mpc-wallet/list-all-mpc-vaults).
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateMpcVaultByIdRequest} opts.updateMpcVaultByIdRequest The request body to update a vault's name.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MPCVault}
     */
    updateMpcVaultById(vaultId, opts) {
      return this.updateMpcVaultByIdWithHttpInfo(vaultId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
