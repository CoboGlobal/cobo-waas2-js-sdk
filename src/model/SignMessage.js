/**
 * Cobo Wallet as a Service 2.0
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MpcSigningGroup from './MpcSigningGroup';

/**
 * The SignMessage model module.
 * @module model/SignMessage
 * @version 0.1.0
 */
class SignMessage {
    /**
     * Constructs a new <code>SignMessage</code>.
     * The data for create a message-signing transaction.
     * @alias module:model/SignMessage
     * @param requestId {String} Unique id of the request.
     * @param requestType {module:model/SignMessage.RequestTypeEnum} 
     * @param chainId {String} The blockchain on which the token operates.
     */
    constructor(requestId, requestType, chainId) { 
        
        SignMessage.initialize(this, requestId, requestType, chainId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, requestId, requestType, chainId) { 
        obj['request_id'] = requestId;
        obj['request_type'] = requestType;
        obj['chain_id'] = chainId;
    }

    /**
     * Constructs a <code>SignMessage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SignMessage} obj Optional instance to populate.
     * @return {module:model/SignMessage} The populated <code>SignMessage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SignMessage();

            if (data.hasOwnProperty('request_id')) {
                obj['request_id'] = ApiClient.convertToType(data['request_id'], 'String');
            }
            if (data.hasOwnProperty('request_type')) {
                obj['request_type'] = ApiClient.convertToType(data['request_type'], 'String');
            }
            if (data.hasOwnProperty('from_wallet_id')) {
                obj['from_wallet_id'] = ApiClient.convertToType(data['from_wallet_id'], 'String');
            }
            if (data.hasOwnProperty('from_address_str')) {
                obj['from_address_str'] = ApiClient.convertToType(data['from_address_str'], 'String');
            }
            if (data.hasOwnProperty('chain_id')) {
                obj['chain_id'] = ApiClient.convertToType(data['chain_id'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('structured_data')) {
                obj['structured_data'] = ApiClient.convertToType(data['structured_data'], 'String');
            }
            if (data.hasOwnProperty('mpc_used_key_group')) {
                obj['mpc_used_key_group'] = MpcSigningGroup.constructFromObject(data['mpc_used_key_group']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SignMessage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SignMessage</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SignMessage.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['request_id'] && !(typeof data['request_id'] === 'string' || data['request_id'] instanceof String)) {
            throw new Error("Expected the field `request_id` to be a primitive type in the JSON string but got " + data['request_id']);
        }
        // ensure the json data is a string
        if (data['request_type'] && !(typeof data['request_type'] === 'string' || data['request_type'] instanceof String)) {
            throw new Error("Expected the field `request_type` to be a primitive type in the JSON string but got " + data['request_type']);
        }
        // ensure the json data is a string
        if (data['from_wallet_id'] && !(typeof data['from_wallet_id'] === 'string' || data['from_wallet_id'] instanceof String)) {
            throw new Error("Expected the field `from_wallet_id` to be a primitive type in the JSON string but got " + data['from_wallet_id']);
        }
        // ensure the json data is a string
        if (data['from_address_str'] && !(typeof data['from_address_str'] === 'string' || data['from_address_str'] instanceof String)) {
            throw new Error("Expected the field `from_address_str` to be a primitive type in the JSON string but got " + data['from_address_str']);
        }
        // ensure the json data is a string
        if (data['chain_id'] && !(typeof data['chain_id'] === 'string' || data['chain_id'] instanceof String)) {
            throw new Error("Expected the field `chain_id` to be a primitive type in the JSON string but got " + data['chain_id']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['structured_data'] && !(typeof data['structured_data'] === 'string' || data['structured_data'] instanceof String)) {
            throw new Error("Expected the field `structured_data` to be a primitive type in the JSON string but got " + data['structured_data']);
        }
        // validate the optional field `mpc_used_key_group`
        if (data['mpc_used_key_group']) { // data not null
          MpcSigningGroup.validateJSON(data['mpc_used_key_group']);
        }

        return true;
    }


}

SignMessage.RequiredProperties = ["request_id", "request_type", "chain_id"];

/**
 * Unique id of the request.
 * @member {String} request_id
 */
SignMessage.prototype['request_id'] = undefined;

/**
 * @member {module:model/SignMessage.RequestTypeEnum} request_type
 */
SignMessage.prototype['request_type'] = undefined;

/**
 * Unique id of the wallet to sign message.
 * @member {String} from_wallet_id
 */
SignMessage.prototype['from_wallet_id'] = undefined;

/**
 * signing address
 * @member {String} from_address_str
 */
SignMessage.prototype['from_address_str'] = undefined;

/**
 * The blockchain on which the token operates.
 * @member {String} chain_id
 */
SignMessage.prototype['chain_id'] = undefined;

/**
 * Raw data to be signed, Base 64 encoded
 * @member {String} message
 */
SignMessage.prototype['message'] = undefined;

/**
 * Structured data to be signed, JSON encoded
 * @member {String} structured_data
 */
SignMessage.prototype['structured_data'] = undefined;

/**
 * @member {module:model/MpcSigningGroup} mpc_used_key_group
 */
SignMessage.prototype['mpc_used_key_group'] = undefined;





/**
 * Allowed values for the <code>request_type</code> property.
 * @enum {String}
 * @readonly
 */
SignMessage['RequestTypeEnum'] = {

    /**
     * value: "Transfer"
     * @const
     */
    "Transfer": "Transfer",

    /**
     * value: "Call"
     * @const
     */
    "Call": "Call",

    /**
     * value: "Sign"
     * @const
     */
    "Sign": "Sign"
};



export default SignMessage;

