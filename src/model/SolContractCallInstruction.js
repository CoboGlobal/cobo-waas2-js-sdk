/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SolContractCallAccount from './SolContractCallAccount';

/**
 * The SolContractCallInstruction model module.
 * @module model/SolContractCallInstruction
 */
class SolContractCallInstruction {
    /**
     * Constructs a new <code>SolContractCallInstruction</code>.
     * The information about the Solana instruction.
     * @alias module:model/SolContractCallInstruction
     * @param accounts {Array.<module:model/SolContractCallAccount>} 
     * @param data {String} The Base64-encoded instruction data used for interacting with a Solana program. 
     * @param program_id {String} The address of the Solana program (smart contract).  
     */
    constructor(accounts, data, program_id) { 
        
        SolContractCallInstruction.initialize(this, accounts, data, program_id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accounts, data, program_id) { 
        obj['accounts'] = accounts;
        obj['data'] = data;
        obj['program_id'] = program_id;
    }

    /**
     * Constructs a <code>SolContractCallInstruction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SolContractCallInstruction} obj Optional instance to populate.
     * @return {module:model/SolContractCallInstruction} The populated <code>SolContractCallInstruction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SolContractCallInstruction();

            if (data.hasOwnProperty('accounts')) {
                obj['accounts'] = ApiClient.convertToType(data['accounts'], [SolContractCallAccount]);
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], 'String');
            }
            if (data.hasOwnProperty('program_id')) {
                obj['program_id'] = ApiClient.convertToType(data['program_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SolContractCallInstruction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SolContractCallInstruction</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SolContractCallInstruction.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['accounts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['accounts'])) {
                throw new Error("Expected the field `accounts` to be an array in the JSON data but got " + data['accounts']);
            }
            // validate the optional field `accounts` (array)
            for (const item of data['accounts']) {
                SolContractCallAccount.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['data'] && !(typeof data['data'] === 'string' || data['data'] instanceof String)) {
            throw new Error("Expected the field `data` to be a primitive type in the JSON string but got " + data['data']);
        }
        // ensure the json data is a string
        if (data['program_id'] && !(typeof data['program_id'] === 'string' || data['program_id'] instanceof String)) {
            throw new Error("Expected the field `program_id` to be a primitive type in the JSON string but got " + data['program_id']);
        }

        return true;
    }


}

SolContractCallInstruction.RequiredProperties = ["accounts", "data", "program_id"];

/**
 * @member {Array.<module:model/SolContractCallAccount>} accounts
 */
SolContractCallInstruction.prototype['accounts'] = undefined;

/**
 * The Base64-encoded instruction data used for interacting with a Solana program. 
 * @member {String} data
 */
SolContractCallInstruction.prototype['data'] = undefined;

/**
 * The address of the Solana program (smart contract).  
 * @member {String} program_id
 */
SolContractCallInstruction.prototype['program_id'] = undefined;






export default SolContractCallInstruction;

