/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FeeType from './FeeType';
import StakingPoolType from './StakingPoolType';

/**
 * The BabylonStakeEstimatedFee model module.
 * @module model/BabylonStakeEstimatedFee
 */
class BabylonStakeEstimatedFee {
    /**
     * Constructs a new <code>BabylonStakeEstimatedFee</code>.
     * @alias module:model/BabylonStakeEstimatedFee
     */
    constructor() { 
        
        BabylonStakeEstimatedFee.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BabylonStakeEstimatedFee</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BabylonStakeEstimatedFee} obj Optional instance to populate.
     * @return {module:model/BabylonStakeEstimatedFee} The populated <code>BabylonStakeEstimatedFee</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BabylonStakeEstimatedFee();

            if (data.hasOwnProperty('pool_type')) {
                obj['pool_type'] = StakingPoolType.constructFromObject(data['pool_type']);
            }
            if (data.hasOwnProperty('fee_type')) {
                obj['fee_type'] = FeeType.constructFromObject(data['fee_type']);
            }
            if (data.hasOwnProperty('fee_amount')) {
                obj['fee_amount'] = ApiClient.convertToType(data['fee_amount'], 'String');
            }
            if (data.hasOwnProperty('token_id')) {
                obj['token_id'] = ApiClient.convertToType(data['token_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BabylonStakeEstimatedFee</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BabylonStakeEstimatedFee</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['fee_amount'] && !(typeof data['fee_amount'] === 'string' || data['fee_amount'] instanceof String)) {
            throw new Error("Expected the field `fee_amount` to be a primitive type in the JSON string but got " + data['fee_amount']);
        }
        // ensure the json data is a string
        if (data['token_id'] && !(typeof data['token_id'] === 'string' || data['token_id'] instanceof String)) {
            throw new Error("Expected the field `token_id` to be a primitive type in the JSON string but got " + data['token_id']);
        }

        return true;
    }


}



/**
 * @member {module:model/StakingPoolType} pool_type
 */
BabylonStakeEstimatedFee.prototype['pool_type'] = undefined;

/**
 * @member {module:model/FeeType} fee_type
 */
BabylonStakeEstimatedFee.prototype['fee_type'] = undefined;

/**
 * The amount of the estimated fee.
 * @member {String} fee_amount
 */
BabylonStakeEstimatedFee.prototype['fee_amount'] = undefined;

/**
 * The token ID of the staking fee.
 * @member {String} token_id
 */
BabylonStakeEstimatedFee.prototype['token_id'] = undefined;






export default BabylonStakeEstimatedFee;

