/**
 * Cobo Wallet as a Service 2.0
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EvmLegacyFeeBasePrice from './EvmLegacyFeeBasePrice';
import FeeData from './FeeData';
import FeeType from './FeeType';

/**
 * The TransactionEvmLegacyFee model module.
 * @module model/TransactionEvmLegacyFee
 * @version 0.4.1
 */
class TransactionEvmLegacyFee {
    /**
     * Constructs a new <code>TransactionEvmLegacyFee</code>.
     * The transaction fee actually charged by the chain that uses the legacy fee model.  The transaction fee is calculated by multiplying the gas fee price by the used gas. This can be expressed as: Transaction fee &#x3D; (gas price) * used gas. 
     * @alias module:model/TransactionEvmLegacyFee
     * @implements module:model/EvmLegacyFeeBasePrice
     * @implements module:model/FeeData
     * @param gasPrice {String} The gas price, in wei. The gas price represents the amount of ETH that must be paid to validators for processing transactions.
     * @param gasLimit {String} The gas limit. It represents the maximum number of gas units that you are willing to pay for the execution of a transaction or Ethereum Virtual Machine (EVM) operation. The gas unit cost of each operation varies.
     * @param feeType {module:model/FeeType} 
     */
    constructor(gasPrice, gasLimit, feeType) { 
        EvmLegacyFeeBasePrice.initialize(this, gasPrice);FeeData.initialize(this, gasLimit);
        TransactionEvmLegacyFee.initialize(this, gasPrice, gasLimit, feeType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, gasPrice, gasLimit, feeType) { 
        obj['gas_price'] = gasPrice;
        obj['gas_limit'] = gasLimit || '21000';
        obj['fee_type'] = feeType;
    }

    /**
     * Constructs a <code>TransactionEvmLegacyFee</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransactionEvmLegacyFee} obj Optional instance to populate.
     * @return {module:model/TransactionEvmLegacyFee} The populated <code>TransactionEvmLegacyFee</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransactionEvmLegacyFee();
            EvmLegacyFeeBasePrice.constructFromObject(data, obj);
            FeeData.constructFromObject(data, obj);

            if (data.hasOwnProperty('gas_price')) {
                obj['gas_price'] = ApiClient.convertToType(data['gas_price'], 'String');
            }
            if (data.hasOwnProperty('gas_limit')) {
                obj['gas_limit'] = ApiClient.convertToType(data['gas_limit'], 'String');
            }
            if (data.hasOwnProperty('fee_type')) {
                obj['fee_type'] = FeeType.constructFromObject(data['fee_type']);
            }
            if (data.hasOwnProperty('fee_used')) {
                obj['fee_used'] = ApiClient.convertToType(data['fee_used'], 'String');
            }
            if (data.hasOwnProperty('gas_used')) {
                obj['gas_used'] = ApiClient.convertToType(data['gas_used'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransactionEvmLegacyFee</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransactionEvmLegacyFee</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TransactionEvmLegacyFee.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['gas_price'] && !(typeof data['gas_price'] === 'string' || data['gas_price'] instanceof String)) {
            throw new Error("Expected the field `gas_price` to be a primitive type in the JSON string but got " + data['gas_price']);
        }
        // ensure the json data is a string
        if (data['gas_limit'] && !(typeof data['gas_limit'] === 'string' || data['gas_limit'] instanceof String)) {
            throw new Error("Expected the field `gas_limit` to be a primitive type in the JSON string but got " + data['gas_limit']);
        }
        // ensure the json data is a string
        if (data['fee_used'] && !(typeof data['fee_used'] === 'string' || data['fee_used'] instanceof String)) {
            throw new Error("Expected the field `fee_used` to be a primitive type in the JSON string but got " + data['fee_used']);
        }
        // ensure the json data is a string
        if (data['gas_used'] && !(typeof data['gas_used'] === 'string' || data['gas_used'] instanceof String)) {
            throw new Error("Expected the field `gas_used` to be a primitive type in the JSON string but got " + data['gas_used']);
        }

        return true;
    }


}

TransactionEvmLegacyFee.RequiredProperties = ["gas_price", "gas_limit", "fee_type"];

/**
 * The gas price, in wei. The gas price represents the amount of ETH that must be paid to validators for processing transactions.
 * @member {String} gas_price
 */
TransactionEvmLegacyFee.prototype['gas_price'] = undefined;

/**
 * The gas limit. It represents the maximum number of gas units that you are willing to pay for the execution of a transaction or Ethereum Virtual Machine (EVM) operation. The gas unit cost of each operation varies.
 * @member {String} gas_limit
 * @default '21000'
 */
TransactionEvmLegacyFee.prototype['gas_limit'] = '21000';

/**
 * @member {module:model/FeeType} fee_type
 */
TransactionEvmLegacyFee.prototype['fee_type'] = undefined;

/**
 * The transaction fee.
 * @member {String} fee_used
 */
TransactionEvmLegacyFee.prototype['fee_used'] = undefined;

/**
 * The gas units used in the transaction.
 * @member {String} gas_used
 */
TransactionEvmLegacyFee.prototype['gas_used'] = undefined;


// Implement EvmLegacyFeeBasePrice interface:
/**
 * The gas price, in wei. The gas price represents the amount of ETH that must be paid to validators for processing transactions.
 * @member {String} gas_price
 */
EvmLegacyFeeBasePrice.prototype['gas_price'] = undefined;
// Implement FeeData interface:
/**
 * The gas limit. It represents the maximum number of gas units that you are willing to pay for the execution of a transaction or Ethereum Virtual Machine (EVM) operation. The gas unit cost of each operation varies.
 * @member {String} gas_limit
 * @default '21000'
 */
FeeData.prototype['gas_limit'] = '21000';




export default TransactionEvmLegacyFee;

