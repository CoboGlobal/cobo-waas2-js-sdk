/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GraphQLErrorLocationsInner from './GraphQLErrorLocationsInner';

/**
 * The GraphQLError model module.
 * @module model/GraphQLError
 */
class GraphQLError {
    /**
     * Constructs a new <code>GraphQLError</code>.
     * Details of an error in the GraphQL operation.
     * @alias module:model/GraphQLError
     */
    constructor() { 
        
        GraphQLError.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GraphQLError</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GraphQLError} obj Optional instance to populate.
     * @return {module:model/GraphQLError} The populated <code>GraphQLError</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GraphQLError();

            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('locations')) {
                obj['locations'] = ApiClient.convertToType(data['locations'], [GraphQLErrorLocationsInner]);
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GraphQLError</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GraphQLError</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        if (data['locations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['locations'])) {
                throw new Error("Expected the field `locations` to be an array in the JSON data but got " + data['locations']);
            }
            // validate the optional field `locations` (array)
            for (const item of data['locations']) {
                GraphQLErrorLocationsInner.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['path'])) {
            throw new Error("Expected the field `path` to be an array in the JSON data but got " + data['path']);
        }

        return true;
    }


}



/**
 * The error message.
 * @member {String} message
 */
GraphQLError.prototype['message'] = undefined;

/**
 * The locations in the query where the error occurred.
 * @member {Array.<module:model/GraphQLErrorLocationsInner>} locations
 */
GraphQLError.prototype['locations'] = undefined;

/**
 * The path in the response where the error occurred.
 * @member {Array.<String>} path
 */
GraphQLError.prototype['path'] = undefined;






export default GraphQLError;

