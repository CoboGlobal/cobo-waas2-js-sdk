/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BabylonAirdropPop model module.
 * @module model/BabylonAirdropPop
 */
class BabylonAirdropPop {
    /**
     * Constructs a new <code>BabylonAirdropPop</code>.
     * Pop information to be used for airdrop registration.
     * @alias module:model/BabylonAirdropPop
     * @param baby_address {String} BABY address
     * @param btc_address {String} BTC address
     * @param btc_public_key {String} BTC public key in hex format
     * @param btc_sign_baby {String} BTC sign BABY
     * @param baby_sign_btc {String} BABY sign BTC
     * @param baby_public_key {String} BABY public key in base64 format
     */
    constructor(baby_address, btc_address, btc_public_key, btc_sign_baby, baby_sign_btc, baby_public_key) { 
        
        BabylonAirdropPop.initialize(this, baby_address, btc_address, btc_public_key, btc_sign_baby, baby_sign_btc, baby_public_key);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, baby_address, btc_address, btc_public_key, btc_sign_baby, baby_sign_btc, baby_public_key) { 
        obj['baby_address'] = baby_address;
        obj['btc_address'] = btc_address;
        obj['btc_public_key'] = btc_public_key;
        obj['btc_sign_baby'] = btc_sign_baby;
        obj['baby_sign_btc'] = baby_sign_btc;
        obj['baby_public_key'] = baby_public_key;
    }

    /**
     * Constructs a <code>BabylonAirdropPop</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BabylonAirdropPop} obj Optional instance to populate.
     * @return {module:model/BabylonAirdropPop} The populated <code>BabylonAirdropPop</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BabylonAirdropPop();

            if (data.hasOwnProperty('baby_address')) {
                obj['baby_address'] = ApiClient.convertToType(data['baby_address'], 'String');
            }
            if (data.hasOwnProperty('btc_address')) {
                obj['btc_address'] = ApiClient.convertToType(data['btc_address'], 'String');
            }
            if (data.hasOwnProperty('btc_public_key')) {
                obj['btc_public_key'] = ApiClient.convertToType(data['btc_public_key'], 'String');
            }
            if (data.hasOwnProperty('btc_sign_baby')) {
                obj['btc_sign_baby'] = ApiClient.convertToType(data['btc_sign_baby'], 'String');
            }
            if (data.hasOwnProperty('baby_sign_btc')) {
                obj['baby_sign_btc'] = ApiClient.convertToType(data['baby_sign_btc'], 'String');
            }
            if (data.hasOwnProperty('baby_public_key')) {
                obj['baby_public_key'] = ApiClient.convertToType(data['baby_public_key'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BabylonAirdropPop</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BabylonAirdropPop</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BabylonAirdropPop.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['baby_address'] && !(typeof data['baby_address'] === 'string' || data['baby_address'] instanceof String)) {
            throw new Error("Expected the field `baby_address` to be a primitive type in the JSON string but got " + data['baby_address']);
        }
        // ensure the json data is a string
        if (data['btc_address'] && !(typeof data['btc_address'] === 'string' || data['btc_address'] instanceof String)) {
            throw new Error("Expected the field `btc_address` to be a primitive type in the JSON string but got " + data['btc_address']);
        }
        // ensure the json data is a string
        if (data['btc_public_key'] && !(typeof data['btc_public_key'] === 'string' || data['btc_public_key'] instanceof String)) {
            throw new Error("Expected the field `btc_public_key` to be a primitive type in the JSON string but got " + data['btc_public_key']);
        }
        // ensure the json data is a string
        if (data['btc_sign_baby'] && !(typeof data['btc_sign_baby'] === 'string' || data['btc_sign_baby'] instanceof String)) {
            throw new Error("Expected the field `btc_sign_baby` to be a primitive type in the JSON string but got " + data['btc_sign_baby']);
        }
        // ensure the json data is a string
        if (data['baby_sign_btc'] && !(typeof data['baby_sign_btc'] === 'string' || data['baby_sign_btc'] instanceof String)) {
            throw new Error("Expected the field `baby_sign_btc` to be a primitive type in the JSON string but got " + data['baby_sign_btc']);
        }
        // ensure the json data is a string
        if (data['baby_public_key'] && !(typeof data['baby_public_key'] === 'string' || data['baby_public_key'] instanceof String)) {
            throw new Error("Expected the field `baby_public_key` to be a primitive type in the JSON string but got " + data['baby_public_key']);
        }

        return true;
    }


}

BabylonAirdropPop.RequiredProperties = ["baby_address", "btc_address", "btc_public_key", "btc_sign_baby", "baby_sign_btc", "baby_public_key"];

/**
 * BABY address
 * @member {String} baby_address
 */
BabylonAirdropPop.prototype['baby_address'] = undefined;

/**
 * BTC address
 * @member {String} btc_address
 */
BabylonAirdropPop.prototype['btc_address'] = undefined;

/**
 * BTC public key in hex format
 * @member {String} btc_public_key
 */
BabylonAirdropPop.prototype['btc_public_key'] = undefined;

/**
 * BTC sign BABY
 * @member {String} btc_sign_baby
 */
BabylonAirdropPop.prototype['btc_sign_baby'] = undefined;

/**
 * BABY sign BTC
 * @member {String} baby_sign_btc
 */
BabylonAirdropPop.prototype['baby_sign_btc'] = undefined;

/**
 * BABY public key in base64 format
 * @member {String} baby_public_key
 */
BabylonAirdropPop.prototype['baby_public_key'] = undefined;






export default BabylonAirdropPop;

