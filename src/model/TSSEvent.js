/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TSSEventData from './TSSEventData';
import TSSEventType from './TSSEventType';

/**
 * The TSSEvent model module.
 * @module model/TSSEvent
 */
class TSSEvent {
    /**
     * Constructs a new <code>TSSEvent</code>.
     * The TSS Node event payload.
     * @alias module:model/TSSEvent
     * @param event_type {module:model/TSSEventType} 
     */
    constructor(event_type) { 
        
        TSSEvent.initialize(this, event_type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, event_type) { 
        obj['event_type'] = event_type;
    }

    /**
     * Constructs a <code>TSSEvent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TSSEvent} obj Optional instance to populate.
     * @return {module:model/TSSEvent} The populated <code>TSSEvent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TSSEvent();

            if (data.hasOwnProperty('event_id')) {
                obj['event_id'] = ApiClient.convertToType(data['event_id'], 'String');
            }
            if (data.hasOwnProperty('created_timestamp')) {
                obj['created_timestamp'] = ApiClient.convertToType(data['created_timestamp'], 'Number');
            }
            if (data.hasOwnProperty('node_id')) {
                obj['node_id'] = ApiClient.convertToType(data['node_id'], 'String');
            }
            if (data.hasOwnProperty('event_type')) {
                obj['event_type'] = TSSEventType.constructFromObject(data['event_type']);
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = TSSEventData.constructFromObject(data['data']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TSSEvent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TSSEvent</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TSSEvent.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['event_id'] && !(typeof data['event_id'] === 'string' || data['event_id'] instanceof String)) {
            throw new Error("Expected the field `event_id` to be a primitive type in the JSON string but got " + data['event_id']);
        }
        // ensure the json data is a string
        if (data['node_id'] && !(typeof data['node_id'] === 'string' || data['node_id'] instanceof String)) {
            throw new Error("Expected the field `node_id` to be a primitive type in the JSON string but got " + data['node_id']);
        }
        // validate the optional field `data`
        if (data['data']) { // data not null
          if (!!TSSEventData.validateJSON) {
            TSSEventData.validateJSON(data['data']);
          }
        }

        return true;
    }


}

TSSEvent.RequiredProperties = ["event_type"];

/**
 * The event ID.
 * @member {String} event_id
 */
TSSEvent.prototype['event_id'] = undefined;

/**
 * The time when the event occurred, in Unix timestamp format, measured in milliseconds.
 * @member {Number} created_timestamp
 */
TSSEvent.prototype['created_timestamp'] = undefined;

/**
 * The event publisher's TSS Node ID.
 * @member {String} node_id
 */
TSSEvent.prototype['node_id'] = undefined;

/**
 * @member {module:model/TSSEventType} event_type
 */
TSSEvent.prototype['event_type'] = undefined;

/**
 * @member {module:model/TSSEventData} data
 */
TSSEvent.prototype['data'] = undefined;






export default TSSEvent;

