/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SolContractCallInstruction from './SolContractCallInstruction';
import TokenizationContractCallType from './TokenizationContractCallType';

/**
 * The TokenizationSolContractCallParams model module.
 * @module model/TokenizationSolContractCallParams
 */
class TokenizationSolContractCallParams {
    /**
     * Constructs a new <code>TokenizationSolContractCallParams</code>.
     * The information about the Solana program call.
     * @alias module:model/TokenizationSolContractCallParams
     * @param instructions {Array.<module:model/SolContractCallInstruction>} 
     */
    constructor(instructions) { 
        
        TokenizationSolContractCallParams.initialize(this, instructions);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, instructions) { 
        obj['instructions'] = instructions;
    }

    /**
     * Constructs a <code>TokenizationSolContractCallParams</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TokenizationSolContractCallParams} obj Optional instance to populate.
     * @return {module:model/TokenizationSolContractCallParams} The populated <code>TokenizationSolContractCallParams</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TokenizationSolContractCallParams();

            if (data.hasOwnProperty('type')) {
                obj['type'] = TokenizationContractCallType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('instructions')) {
                obj['instructions'] = ApiClient.convertToType(data['instructions'], [SolContractCallInstruction]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TokenizationSolContractCallParams</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TokenizationSolContractCallParams</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TokenizationSolContractCallParams.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['instructions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['instructions'])) {
                throw new Error("Expected the field `instructions` to be an array in the JSON data but got " + data['instructions']);
            }
            // validate the optional field `instructions` (array)
            for (const item of data['instructions']) {
                SolContractCallInstruction.validateJSON(item);
            };
        }

        return true;
    }


}

TokenizationSolContractCallParams.RequiredProperties = ["instructions"];

/**
 * @member {module:model/TokenizationContractCallType} type
 */
TokenizationSolContractCallParams.prototype['type'] = undefined;

/**
 * @member {Array.<module:model/SolContractCallInstruction>} instructions
 */
TokenizationSolContractCallParams.prototype['instructions'] = undefined;






export default TokenizationSolContractCallParams;

