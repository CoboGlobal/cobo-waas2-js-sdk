/**
 * Cobo Wallet as a Service 2.0
 * Cobo WaaS 2.0 enables you to programmatically access Cobo's full suite of crypto wallet technologies with powerful and flexible access controls.  # Wallet technologies - Custodial Wallet - MPC Wallet - Smart Contract Wallet (Based on Safe{Wallet}) - Exchange Wallet  # Risk Control technologies - Workflow - Access Control List (ACL)  # Risk Control targets - Wallet Management   - User/team and their permission management   - Risk control configurations, e.g. whitelist, blacklist, rate-limiting etc. - Blockchain Interaction   - Crypto transfer   - Smart Contract Invocation  # Important HTTPS only. RESTful, resource oriented  # Get Started Set up your APIs or get authorization  # Authentication and Authorization CoboAuth  # Request and Response application/json  # Error Handling  ### Common error codes | Error Code | Description | | -- | -- |  ### API-specific error codes For error codes that are dedicated to a specific API, see the Error codes section in each API specification, for example, /v3/wallets.  # Rate and Usage Limiting  # Idempotent Request  # Pagination # Support [Developer Hub](https://cobo.com/developers) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UpdateWalletByIdRequest model module.
 * @module model/UpdateWalletByIdRequest
 * @version 0.1.0
 */
class UpdateWalletByIdRequest {
    /**
     * Constructs a new <code>UpdateWalletByIdRequest</code>.
     * @alias module:model/UpdateWalletByIdRequest
     */
    constructor() { 
        
        UpdateWalletByIdRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateWalletByIdRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateWalletByIdRequest} obj Optional instance to populate.
     * @return {module:model/UpdateWalletByIdRequest} The populated <code>UpdateWalletByIdRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateWalletByIdRequest();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('apikey')) {
                obj['apikey'] = ApiClient.convertToType(data['apikey'], 'String');
            }
            if (data.hasOwnProperty('secret')) {
                obj['secret'] = ApiClient.convertToType(data['secret'], 'String');
            }
            if (data.hasOwnProperty('passphrase')) {
                obj['passphrase'] = ApiClient.convertToType(data['passphrase'], 'String');
            }
            if (data.hasOwnProperty('ga_code')) {
                obj['ga_code'] = ApiClient.convertToType(data['ga_code'], 'String');
            }
            if (data.hasOwnProperty('sub_account_ids')) {
                obj['sub_account_ids'] = ApiClient.convertToType(data['sub_account_ids'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateWalletByIdRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateWalletByIdRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['apikey'] && !(typeof data['apikey'] === 'string' || data['apikey'] instanceof String)) {
            throw new Error("Expected the field `apikey` to be a primitive type in the JSON string but got " + data['apikey']);
        }
        // ensure the json data is a string
        if (data['secret'] && !(typeof data['secret'] === 'string' || data['secret'] instanceof String)) {
            throw new Error("Expected the field `secret` to be a primitive type in the JSON string but got " + data['secret']);
        }
        // ensure the json data is a string
        if (data['passphrase'] && !(typeof data['passphrase'] === 'string' || data['passphrase'] instanceof String)) {
            throw new Error("Expected the field `passphrase` to be a primitive type in the JSON string but got " + data['passphrase']);
        }
        // ensure the json data is a string
        if (data['ga_code'] && !(typeof data['ga_code'] === 'string' || data['ga_code'] instanceof String)) {
            throw new Error("Expected the field `ga_code` to be a primitive type in the JSON string but got " + data['ga_code']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['sub_account_ids'])) {
            throw new Error("Expected the field `sub_account_ids` to be an array in the JSON data but got " + data['sub_account_ids']);
        }

        return true;
    }


}



/**
 * @member {String} name
 */
UpdateWalletByIdRequest.prototype['name'] = undefined;

/**
 * The API Key for the exchange.
 * @member {String} apikey
 */
UpdateWalletByIdRequest.prototype['apikey'] = undefined;

/**
 * The API Secret for the exchange.
 * @member {String} secret
 */
UpdateWalletByIdRequest.prototype['secret'] = undefined;

/**
 * The passphrase for the exchange.
 * @member {String} passphrase
 */
UpdateWalletByIdRequest.prototype['passphrase'] = undefined;

/**
 * The ga_code for the exchange.
 * @member {String} ga_code
 */
UpdateWalletByIdRequest.prototype['ga_code'] = undefined;

/**
 * The unique identifier associated with the exchange sub-account. It can be an email address, username, or a custom account ID.
 * @member {Array.<String>} sub_account_ids
 */
UpdateWalletByIdRequest.prototype['sub_account_ids'] = undefined;






export default UpdateWalletByIdRequest;

