/**
 * Cobo Wallet as a Service 2.0
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ChainInfo model module.
 * @module model/ChainInfo
 * @version 0.1.0
 */
class ChainInfo {
    /**
     * Constructs a new <code>ChainInfo</code>.
     * The chain information.
     * @alias module:model/ChainInfo
     * @param chainId {String} The chain on which the token operates.
     */
    constructor(chainId) { 
        
        ChainInfo.initialize(this, chainId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, chainId) { 
        obj['chain_id'] = chainId;
    }

    /**
     * Constructs a <code>ChainInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChainInfo} obj Optional instance to populate.
     * @return {module:model/ChainInfo} The populated <code>ChainInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChainInfo();

            if (data.hasOwnProperty('chain_id')) {
                obj['chain_id'] = ApiClient.convertToType(data['chain_id'], 'String');
            }
            if (data.hasOwnProperty('symbol')) {
                obj['symbol'] = ApiClient.convertToType(data['symbol'], 'String');
            }
            if (data.hasOwnProperty('icon_url')) {
                obj['icon_url'] = ApiClient.convertToType(data['icon_url'], 'String');
            }
            if (data.hasOwnProperty('explorer_tx_url')) {
                obj['explorer_tx_url'] = ApiClient.convertToType(data['explorer_tx_url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChainInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChainInfo</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ChainInfo.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['chain_id'] && !(typeof data['chain_id'] === 'string' || data['chain_id'] instanceof String)) {
            throw new Error("Expected the field `chain_id` to be a primitive type in the JSON string but got " + data['chain_id']);
        }
        // ensure the json data is a string
        if (data['symbol'] && !(typeof data['symbol'] === 'string' || data['symbol'] instanceof String)) {
            throw new Error("Expected the field `symbol` to be a primitive type in the JSON string but got " + data['symbol']);
        }
        // ensure the json data is a string
        if (data['icon_url'] && !(typeof data['icon_url'] === 'string' || data['icon_url'] instanceof String)) {
            throw new Error("Expected the field `icon_url` to be a primitive type in the JSON string but got " + data['icon_url']);
        }
        // ensure the json data is a string
        if (data['explorer_tx_url'] && !(typeof data['explorer_tx_url'] === 'string' || data['explorer_tx_url'] instanceof String)) {
            throw new Error("Expected the field `explorer_tx_url` to be a primitive type in the JSON string but got " + data['explorer_tx_url']);
        }

        return true;
    }


}

ChainInfo.RequiredProperties = ["chain_id"];

/**
 * The chain on which the token operates.
 * @member {String} chain_id
 */
ChainInfo.prototype['chain_id'] = undefined;

/**
 * The chain symbol.
 * @member {String} symbol
 */
ChainInfo.prototype['symbol'] = undefined;

/**
 * The URL of the chain icon.
 * @member {String} icon_url
 */
ChainInfo.prototype['icon_url'] = undefined;

/**
 * The transaction URL on the blockchain explorer.
 * @member {String} explorer_tx_url
 */
ChainInfo.prototype['explorer_tx_url'] = undefined;






export default ChainInfo;

