/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: support@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BaseStakeExtra from './BaseStakeExtra';
import StakingPoolType from './StakingPoolType';

/**
 * The BabylonStakingExtra model module.
 * @module model/BabylonStakingExtra
 */
class BabylonStakingExtra {
    /**
     * Constructs a new <code>BabylonStakingExtra</code>.
     * @alias module:model/BabylonStakingExtra
     * @implements module:model/BaseStakeExtra
     * @param pool_type {module:model/StakingPoolType} 
     * @param pos_chain {String} The pos chain of the stake.
     */
    constructor(pool_type, pos_chain) { 
        BaseStakeExtra.initialize(this, pool_type);
        BabylonStakingExtra.initialize(this, pool_type, pos_chain);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, pool_type, pos_chain) { 
        obj['pool_type'] = pool_type;
        obj['pos_chain'] = pos_chain;
    }

    /**
     * Constructs a <code>BabylonStakingExtra</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BabylonStakingExtra} obj Optional instance to populate.
     * @return {module:model/BabylonStakingExtra} The populated <code>BabylonStakingExtra</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BabylonStakingExtra();
            BaseStakeExtra.constructFromObject(data, obj);

            if (data.hasOwnProperty('pool_type')) {
                obj['pool_type'] = StakingPoolType.constructFromObject(data['pool_type']);
            }
            if (data.hasOwnProperty('pos_chain')) {
                obj['pos_chain'] = ApiClient.convertToType(data['pos_chain'], 'String');
            }
            if (data.hasOwnProperty('unlock_timestamp')) {
                obj['unlock_timestamp'] = ApiClient.convertToType(data['unlock_timestamp'], 'Number');
            }
            if (data.hasOwnProperty('unlock_block_height')) {
                obj['unlock_block_height'] = ApiClient.convertToType(data['unlock_block_height'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BabylonStakingExtra</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BabylonStakingExtra</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BabylonStakingExtra.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['pos_chain'] && !(typeof data['pos_chain'] === 'string' || data['pos_chain'] instanceof String)) {
            throw new Error("Expected the field `pos_chain` to be a primitive type in the JSON string but got " + data['pos_chain']);
        }

        return true;
    }


}

BabylonStakingExtra.RequiredProperties = ["pool_type", "pos_chain"];

/**
 * @member {module:model/StakingPoolType} pool_type
 */
BabylonStakingExtra.prototype['pool_type'] = undefined;

/**
 * The pos chain of the stake.
 * @member {String} pos_chain
 */
BabylonStakingExtra.prototype['pos_chain'] = undefined;

/**
 * The unlock time.
 * @member {Number} unlock_timestamp
 */
BabylonStakingExtra.prototype['unlock_timestamp'] = undefined;

/**
 * The unlock block height.
 * @member {Number} unlock_block_height
 */
BabylonStakingExtra.prototype['unlock_block_height'] = undefined;


// Implement BaseStakeExtra interface:
/**
 * @member {module:model/StakingPoolType} pool_type
 */
BaseStakeExtra.prototype['pool_type'] = undefined;




export default BabylonStakingExtra;

