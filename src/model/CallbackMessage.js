/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Transaction from './Transaction';

/**
 * The CallbackMessage model module.
 * @module model/CallbackMessage
 */
class CallbackMessage {
    /**
     * Constructs a new <code>CallbackMessage</code>.
     * The information about a callback message.
     * @alias module:model/CallbackMessage
     * @param id {String} The callback message ID.
     * @param created_timestamp {Number} The time when the callback message was created, in Unix timestamp format, measured in milliseconds.
     * @param updated_timestamp {Number} The time when the callback message was updated, in Unix timestamp format, measured in milliseconds.
     * @param request_id {String} The request ID of the transaction.
     * @param transaction_id {String} The transaction ID.
     * @param url {String} The callback endpoint URL.
     * @param data {module:model/Transaction} 
     * @param status {module:model/CallbackMessage.StatusEnum} The callback message status. Possible values include `Denied`, `Approved`, and `Failed`. 
     */
    constructor(id, created_timestamp, updated_timestamp, request_id, transaction_id, url, data, status) { 
        
        CallbackMessage.initialize(this, id, created_timestamp, updated_timestamp, request_id, transaction_id, url, data, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, created_timestamp, updated_timestamp, request_id, transaction_id, url, data, status) { 
        obj['id'] = id;
        obj['created_timestamp'] = created_timestamp;
        obj['updated_timestamp'] = updated_timestamp;
        obj['request_id'] = request_id;
        obj['transaction_id'] = transaction_id;
        obj['url'] = url;
        obj['data'] = data;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>CallbackMessage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CallbackMessage} obj Optional instance to populate.
     * @return {module:model/CallbackMessage} The populated <code>CallbackMessage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CallbackMessage();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('created_timestamp')) {
                obj['created_timestamp'] = ApiClient.convertToType(data['created_timestamp'], 'Number');
            }
            if (data.hasOwnProperty('updated_timestamp')) {
                obj['updated_timestamp'] = ApiClient.convertToType(data['updated_timestamp'], 'Number');
            }
            if (data.hasOwnProperty('request_id')) {
                obj['request_id'] = ApiClient.convertToType(data['request_id'], 'String');
            }
            if (data.hasOwnProperty('transaction_id')) {
                obj['transaction_id'] = ApiClient.convertToType(data['transaction_id'], 'String');
            }
            if (data.hasOwnProperty('wallet_id')) {
                obj['wallet_id'] = ApiClient.convertToType(data['wallet_id'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = Transaction.constructFromObject(data['data']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('result')) {
                obj['result'] = ApiClient.convertToType(data['result'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CallbackMessage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CallbackMessage</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CallbackMessage.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['request_id'] && !(typeof data['request_id'] === 'string' || data['request_id'] instanceof String)) {
            throw new Error("Expected the field `request_id` to be a primitive type in the JSON string but got " + data['request_id']);
        }
        // ensure the json data is a string
        if (data['transaction_id'] && !(typeof data['transaction_id'] === 'string' || data['transaction_id'] instanceof String)) {
            throw new Error("Expected the field `transaction_id` to be a primitive type in the JSON string but got " + data['transaction_id']);
        }
        // ensure the json data is a string
        if (data['wallet_id'] && !(typeof data['wallet_id'] === 'string' || data['wallet_id'] instanceof String)) {
            throw new Error("Expected the field `wallet_id` to be a primitive type in the JSON string but got " + data['wallet_id']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // validate the optional field `data`
        if (data['data']) { // data not null
          if (!!Transaction.validateJSON) {
            Transaction.validateJSON(data['data']);
          }
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['result'] && !(typeof data['result'] === 'string' || data['result'] instanceof String)) {
            throw new Error("Expected the field `result` to be a primitive type in the JSON string but got " + data['result']);
        }

        return true;
    }


}

CallbackMessage.RequiredProperties = ["id", "created_timestamp", "updated_timestamp", "request_id", "transaction_id", "url", "data", "status"];

/**
 * The callback message ID.
 * @member {String} id
 */
CallbackMessage.prototype['id'] = undefined;

/**
 * The time when the callback message was created, in Unix timestamp format, measured in milliseconds.
 * @member {Number} created_timestamp
 */
CallbackMessage.prototype['created_timestamp'] = undefined;

/**
 * The time when the callback message was updated, in Unix timestamp format, measured in milliseconds.
 * @member {Number} updated_timestamp
 */
CallbackMessage.prototype['updated_timestamp'] = undefined;

/**
 * The request ID of the transaction.
 * @member {String} request_id
 */
CallbackMessage.prototype['request_id'] = undefined;

/**
 * The transaction ID.
 * @member {String} transaction_id
 */
CallbackMessage.prototype['transaction_id'] = undefined;

/**
 * The wallet ID.
 * @member {String} wallet_id
 */
CallbackMessage.prototype['wallet_id'] = undefined;

/**
 * The callback endpoint URL.
 * @member {String} url
 */
CallbackMessage.prototype['url'] = undefined;

/**
 * @member {module:model/Transaction} data
 */
CallbackMessage.prototype['data'] = undefined;

/**
 * The callback message status. Possible values include `Denied`, `Approved`, and `Failed`. 
 * @member {module:model/CallbackMessage.StatusEnum} status
 */
CallbackMessage.prototype['status'] = undefined;

/**
 * The callback message result. Possible values include `ok` and `deny`. 
 * @member {module:model/CallbackMessage.ResultEnum} result
 */
CallbackMessage.prototype['result'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
CallbackMessage['StatusEnum'] = {

    /**
     * value: "Denied"
     * @const
     */
    "Denied": "Denied",

    /**
     * value: "Approved"
     * @const
     */
    "Approved": "Approved",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed",

    /**
     * value: "unknown_default_open_api"
     * @const
     */
    "unknown_default_open_api": "unknown_default_open_api"
};


/**
 * Allowed values for the <code>result</code> property.
 * @enum {String}
 * @readonly
 */
CallbackMessage['ResultEnum'] = {

    /**
     * value: "ok"
     * @const
     */
    "ok": "ok",

    /**
     * value: "deny"
     * @const
     */
    "deny": "deny",

    /**
     * value: "unknown_default_open_api"
     * @const
     */
    "unknown_default_open_api": "unknown_default_open_api"
};



export default CallbackMessage;

