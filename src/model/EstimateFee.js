/**
 * Cobo Wallet as a Service 2.0
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MpcSigningGroup from './MpcSigningGroup';
import SmartContractCall from './SmartContractCall';
import TransactionFee from './TransactionFee';
import Transfer from './Transfer';
import TransferDestination from './TransferDestination';
import TransferSource from './TransferSource';

/**
 * The EstimateFee model module.
 * @module model/EstimateFee
 * @version 0.1.0
 */
class EstimateFee {
    /**
     * Constructs a new <code>EstimateFee</code>.
     * @alias module:model/EstimateFee
     * @param {(module:model/SmartContractCall|module:model/Transfer)} instance The actual instance to initialize EstimateFee.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "Transfer") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                Transfer.validateJSON(instance); // throw an exception if no match
                // create Transfer from JS object
                this.actualInstance = Transfer.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into Transfer
            errorMessages.push("Failed to construct Transfer: " + err)
        }

        try {
            if (typeof instance === "SmartContractCall") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                SmartContractCall.validateJSON(instance); // throw an exception if no match
                // create SmartContractCall from JS object
                this.actualInstance = SmartContractCall.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into SmartContractCall
            errorMessages.push("Failed to construct SmartContractCall: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `EstimateFee` with oneOf schemas SmartContractCall, Transfer. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `EstimateFee` with oneOf schemas SmartContractCall, Transfer. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>EstimateFee</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EstimateFee} obj Optional instance to populate.
     * @return {module:model/EstimateFee} The populated <code>EstimateFee</code> instance.
     */
    static constructFromObject(data, obj) {
        return new EstimateFee(data);
    }

    /**
     * Gets the actual instance, which can be <code>SmartContractCall</code>, <code>Transfer</code>.
     * @return {(module:model/SmartContractCall|module:model/Transfer)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>SmartContractCall</code>, <code>Transfer</code>.
     * @param {(module:model/SmartContractCall|module:model/Transfer)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = EstimateFee.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of EstimateFee from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/EstimateFee} An instance of EstimateFee.
     */
    static fromJSON = function(json_string){
        return EstimateFee.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * Unique id of the request.
 * @member {String} request_id
 */
EstimateFee.prototype['request_id'] = undefined;

/**
 * @member {module:model/EstimateFee.RequestTypeEnum} request_type
 */
EstimateFee.prototype['request_type'] = undefined;

/**
 * @member {module:model/TransferSource} source
 */
EstimateFee.prototype['source'] = undefined;

/**
 * ID of the token. Unique in all chains scope.
 * @member {String} token_id
 */
EstimateFee.prototype['token_id'] = undefined;

/**
 * Transaction value (Note that this is an absolute value. If you trade 1.5 ETH, then the value is 1.5) 
 * @member {String} amount
 */
EstimateFee.prototype['amount'] = undefined;

/**
 * @member {module:model/TransferDestination} destination
 */
EstimateFee.prototype['destination'] = undefined;

/**
 * The category names for transfer.
 * @member {Array.<String>} category_names
 */
EstimateFee.prototype['category_names'] = undefined;

/**
 * The description for transfer.
 * @member {String} description
 */
EstimateFee.prototype['description'] = undefined;

/**
 * @member {module:model/TransactionFee} fee
 */
EstimateFee.prototype['fee'] = undefined;

/**
 * Unique id of the wallet to transfer from.
 * @member {String} from_wallet_id
 */
EstimateFee.prototype['from_wallet_id'] = undefined;

/**
 * From address
 * @member {String} from_address_str
 */
EstimateFee.prototype['from_address_str'] = undefined;

/**
 * The blockchain on which the token operates.
 * @member {String} chain_id
 */
EstimateFee.prototype['chain_id'] = undefined;

/**
 * To address
 * @member {String} to_address_str
 */
EstimateFee.prototype['to_address_str'] = undefined;

/**
 * Transaction value (Note that this is an absolute value. If you trade 1.5 ETH, then the value is 1.5) 
 * @member {String} value
 */
EstimateFee.prototype['value'] = undefined;

/**
 * calldata for this transaction. Commonly used as part of contract interaction. 
 * @member {Blob} calldata
 */
EstimateFee.prototype['calldata'] = undefined;

/**
 * @member {module:model/MpcSigningGroup} mpc_used_key_group
 */
EstimateFee.prototype['mpc_used_key_group'] = undefined;


EstimateFee.OneOf = ["SmartContractCall", "Transfer"];

export default EstimateFee;

