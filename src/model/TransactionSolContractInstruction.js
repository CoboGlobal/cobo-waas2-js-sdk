/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TransactionSolContractAccount from './TransactionSolContractAccount';

/**
 * The TransactionSolContractInstruction model module.
 * @module model/TransactionSolContractInstruction
 */
class TransactionSolContractInstruction {
    /**
     * Constructs a new <code>TransactionSolContractInstruction</code>.
     * sol contract instruction
     * @alias module:model/TransactionSolContractInstruction
     */
    constructor() { 
        
        TransactionSolContractInstruction.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TransactionSolContractInstruction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransactionSolContractInstruction} obj Optional instance to populate.
     * @return {module:model/TransactionSolContractInstruction} The populated <code>TransactionSolContractInstruction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransactionSolContractInstruction();

            if (data.hasOwnProperty('accounts')) {
                obj['accounts'] = ApiClient.convertToType(data['accounts'], [TransactionSolContractAccount]);
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], 'String');
            }
            if (data.hasOwnProperty('program_id')) {
                obj['program_id'] = ApiClient.convertToType(data['program_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransactionSolContractInstruction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransactionSolContractInstruction</code>.
     */
    static validateJSON(data) {
        if (data['accounts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['accounts'])) {
                throw new Error("Expected the field `accounts` to be an array in the JSON data but got " + data['accounts']);
            }
            // validate the optional field `accounts` (array)
            for (const item of data['accounts']) {
                TransactionSolContractAccount.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['data'] && !(typeof data['data'] === 'string' || data['data'] instanceof String)) {
            throw new Error("Expected the field `data` to be a primitive type in the JSON string but got " + data['data']);
        }
        // ensure the json data is a string
        if (data['program_id'] && !(typeof data['program_id'] === 'string' || data['program_id'] instanceof String)) {
            throw new Error("Expected the field `program_id` to be a primitive type in the JSON string but got " + data['program_id']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/TransactionSolContractAccount>} accounts
 */
TransactionSolContractInstruction.prototype['accounts'] = undefined;

/**
 * data used for calling Solana contract.. 
 * @member {String} data
 */
TransactionSolContractInstruction.prototype['data'] = undefined;

/**
 * contract address. when calling a Solana contract, the to_address parameter needs to match the program_id parameter. If multiple contracts are being called, then the to_address parameter should match the program_id parameter of the first instruction. 
 * @member {String} program_id
 */
TransactionSolContractInstruction.prototype['program_id'] = undefined;






export default TransactionSolContractInstruction;

