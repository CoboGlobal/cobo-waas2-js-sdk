/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SwapTokenPair model module.
 * @module model/SwapTokenPair
 */
class SwapTokenPair {
    /**
     * Constructs a new <code>SwapTokenPair</code>.
     * @alias module:model/SwapTokenPair
     */
    constructor() { 
        
        SwapTokenPair.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SwapTokenPair</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SwapTokenPair} obj Optional instance to populate.
     * @return {module:model/SwapTokenPair} The populated <code>SwapTokenPair</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SwapTokenPair();

            if (data.hasOwnProperty('pay_token_id')) {
                obj['pay_token_id'] = ApiClient.convertToType(data['pay_token_id'], 'String');
            }
            if (data.hasOwnProperty('receive_token_id')) {
                obj['receive_token_id'] = ApiClient.convertToType(data['receive_token_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SwapTokenPair</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SwapTokenPair</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['pay_token_id'] && !(typeof data['pay_token_id'] === 'string' || data['pay_token_id'] instanceof String)) {
            throw new Error("Expected the field `pay_token_id` to be a primitive type in the JSON string but got " + data['pay_token_id']);
        }
        // ensure the json data is a string
        if (data['receive_token_id'] && !(typeof data['receive_token_id'] === 'string' || data['receive_token_id'] instanceof String)) {
            throw new Error("Expected the field `receive_token_id` to be a primitive type in the JSON string but got " + data['receive_token_id']);
        }

        return true;
    }


}



/**
 * The source token symbol.
 * @member {String} pay_token_id
 */
SwapTokenPair.prototype['pay_token_id'] = undefined;

/**
 * The target token symbol.
 * @member {String} receive_token_id
 */
SwapTokenPair.prototype['receive_token_id'] = undefined;






export default SwapTokenPair;

