/**
 * Cobo Wallet as a Service 2.0
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AddressEncoding from './AddressEncoding';

/**
 * The AddressInfo model module.
 * @module model/AddressInfo
 * @version 1.0.0
 */
class AddressInfo {
    /**
     * Constructs a new <code>AddressInfo</code>.
     * The address information.
     * @alias module:model/AddressInfo
     * @param address {String} The wallet address.
     * @param chain_id {String} The chain ID, which is the unique identifier of a blockchain. You can retrieve the IDs of all the chains you can use by calling [List enabled chains](/v2/api-references/wallets/list-enabled-chains).
     */
    constructor(address, chain_id) { 
        
        AddressInfo.initialize(this, address, chain_id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, address, chain_id) { 
        obj['address'] = address;
        obj['chain_id'] = chain_id;
    }

    /**
     * Constructs a <code>AddressInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AddressInfo} obj Optional instance to populate.
     * @return {module:model/AddressInfo} The populated <code>AddressInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AddressInfo();

            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('chain_id')) {
                obj['chain_id'] = ApiClient.convertToType(data['chain_id'], 'String');
            }
            if (data.hasOwnProperty('memo')) {
                obj['memo'] = ApiClient.convertToType(data['memo'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('encoding')) {
                obj['encoding'] = AddressEncoding.constructFromObject(data['encoding']);
            }
            if (data.hasOwnProperty('pubkey')) {
                obj['pubkey'] = ApiClient.convertToType(data['pubkey'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AddressInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AddressInfo</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AddressInfo.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // ensure the json data is a string
        if (data['chain_id'] && !(typeof data['chain_id'] === 'string' || data['chain_id'] instanceof String)) {
            throw new Error("Expected the field `chain_id` to be a primitive type in the JSON string but got " + data['chain_id']);
        }
        // ensure the json data is a string
        if (data['memo'] && !(typeof data['memo'] === 'string' || data['memo'] instanceof String)) {
            throw new Error("Expected the field `memo` to be a primitive type in the JSON string but got " + data['memo']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is a string
        if (data['pubkey'] && !(typeof data['pubkey'] === 'string' || data['pubkey'] instanceof String)) {
            throw new Error("Expected the field `pubkey` to be a primitive type in the JSON string but got " + data['pubkey']);
        }

        return true;
    }


}

AddressInfo.RequiredProperties = ["address", "chain_id"];

/**
 * The wallet address.
 * @member {String} address
 */
AddressInfo.prototype['address'] = undefined;

/**
 * The chain ID, which is the unique identifier of a blockchain. You can retrieve the IDs of all the chains you can use by calling [List enabled chains](/v2/api-references/wallets/list-enabled-chains).
 * @member {String} chain_id
 */
AddressInfo.prototype['chain_id'] = undefined;

/**
 * The memo code.
 * @member {String} memo
 */
AddressInfo.prototype['memo'] = undefined;

/**
 * The derivation path of the address. This property applies to MPC Wallets only.
 * @member {String} path
 */
AddressInfo.prototype['path'] = undefined;

/**
 * @member {module:model/AddressEncoding} encoding
 */
AddressInfo.prototype['encoding'] = undefined;

/**
 * The public key of the address. This property applies to MPC Wallets only.
 * @member {String} pubkey
 */
AddressInfo.prototype['pubkey'] = undefined;






export default AddressInfo;

