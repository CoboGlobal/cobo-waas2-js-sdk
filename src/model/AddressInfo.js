/**
 * Cobo Wallet as a Service 2.0
 * Cobo WaaS 2.0 enables you to programmatically access Cobo's full suite of crypto wallet technologies with powerful and flexible access controls.  # Wallet technologies - Custodial Wallet - MPC Wallet - Smart Contract Wallet (Based on Safe{Wallet}) - Exchange Wallet  # Risk Control technologies - Workflow - Access Control List (ACL)  # Risk Control targets - Wallet Management   - User/team and their permission management   - Risk control configurations, e.g. whitelist, blacklist, rate-limiting etc. - Blockchain Interaction   - Crypto transfer   - Smart Contract Invocation  # Important HTTPS only. RESTful, resource oriented  # Get Started Set up your APIs or get authorization  # Authentication and Authorization CoboAuth  # Request and Response application/json  # Error Handling  ### Common error codes | Error Code | Description | | -- | -- |  ### API-specific error codes For error codes that are dedicated to a specific API, see the Error codes section in each API specification, for example, /v3/wallets.  # Rate and Usage Limiting  # Idempotent Request  # Pagination # Support [Developer Hub](https://cobo.com/developers) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AddressInfo model module.
 * @module model/AddressInfo
 * @version 0.1.0
 */
class AddressInfo {
    /**
     * Constructs a new <code>AddressInfo</code>.
     * The data for address information.
     * @alias module:model/AddressInfo
     * @param addressId {String} 
     * @param addressStr {String} Then blockchain address
     * @param tokenId {String} ID of the token. Unique in all chains scope.
     */
    constructor(addressId, addressStr, tokenId) { 
        
        AddressInfo.initialize(this, addressId, addressStr, tokenId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, addressId, addressStr, tokenId) { 
        obj['address_id'] = addressId;
        obj['address_str'] = addressStr;
        obj['token_id'] = tokenId;
    }

    /**
     * Constructs a <code>AddressInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AddressInfo} obj Optional instance to populate.
     * @return {module:model/AddressInfo} The populated <code>AddressInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AddressInfo();

            if (data.hasOwnProperty('address_id')) {
                obj['address_id'] = ApiClient.convertToType(data['address_id'], 'String');
            }
            if (data.hasOwnProperty('address_str')) {
                obj['address_str'] = ApiClient.convertToType(data['address_str'], 'String');
            }
            if (data.hasOwnProperty('token_id')) {
                obj['token_id'] = ApiClient.convertToType(data['token_id'], 'String');
            }
            if (data.hasOwnProperty('memo')) {
                obj['memo'] = ApiClient.convertToType(data['memo'], 'String');
            }
            if (data.hasOwnProperty('is_internal')) {
                obj['is_internal'] = ApiClient.convertToType(data['is_internal'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AddressInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AddressInfo</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AddressInfo.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['address_id'] && !(typeof data['address_id'] === 'string' || data['address_id'] instanceof String)) {
            throw new Error("Expected the field `address_id` to be a primitive type in the JSON string but got " + data['address_id']);
        }
        // ensure the json data is a string
        if (data['address_str'] && !(typeof data['address_str'] === 'string' || data['address_str'] instanceof String)) {
            throw new Error("Expected the field `address_str` to be a primitive type in the JSON string but got " + data['address_str']);
        }
        // ensure the json data is a string
        if (data['token_id'] && !(typeof data['token_id'] === 'string' || data['token_id'] instanceof String)) {
            throw new Error("Expected the field `token_id` to be a primitive type in the JSON string but got " + data['token_id']);
        }
        // ensure the json data is a string
        if (data['memo'] && !(typeof data['memo'] === 'string' || data['memo'] instanceof String)) {
            throw new Error("Expected the field `memo` to be a primitive type in the JSON string but got " + data['memo']);
        }

        return true;
    }


}

AddressInfo.RequiredProperties = ["address_id", "address_str", "token_id"];

/**
 * @member {String} address_id
 */
AddressInfo.prototype['address_id'] = undefined;

/**
 * Then blockchain address
 * @member {String} address_str
 */
AddressInfo.prototype['address_str'] = undefined;

/**
 * ID of the token. Unique in all chains scope.
 * @member {String} token_id
 */
AddressInfo.prototype['token_id'] = undefined;

/**
 * From address memo
 * @member {String} memo
 */
AddressInfo.prototype['memo'] = undefined;

/**
 * Ture if the address is in same fund pool, False otherwise
 * @member {Boolean} is_internal
 * @default false
 */
AddressInfo.prototype['is_internal'] = false;






export default AddressInfo;

