/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import WalletSubtype from './WalletSubtype';
import WalletType from './WalletType';

/**
 * The Scopes model module.
 * @module model/Scopes
 */
class Scopes {
    /**
     * Constructs a new <code>Scopes</code>.
     * The wallet scopes associated with this API key.
     * @alias module:model/Scopes
     */
    constructor() { 
        
        Scopes.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Scopes</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Scopes} obj Optional instance to populate.
     * @return {module:model/Scopes} The populated <code>Scopes</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Scopes();

            if (data.hasOwnProperty('wallet_types')) {
                obj['wallet_types'] = ApiClient.convertToType(data['wallet_types'], [WalletType]);
            }
            if (data.hasOwnProperty('wallet_subtypes')) {
                obj['wallet_subtypes'] = ApiClient.convertToType(data['wallet_subtypes'], [WalletSubtype]);
            }
            if (data.hasOwnProperty('wallet_ids')) {
                obj['wallet_ids'] = ApiClient.convertToType(data['wallet_ids'], ['String']);
            }
            if (data.hasOwnProperty('vault_ids')) {
                obj['vault_ids'] = ApiClient.convertToType(data['vault_ids'], ['String']);
            }
            if (data.hasOwnProperty('project_ids')) {
                obj['project_ids'] = ApiClient.convertToType(data['project_ids'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Scopes</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Scopes</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['wallet_types'])) {
            throw new Error("Expected the field `wallet_types` to be an array in the JSON data but got " + data['wallet_types']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['wallet_subtypes'])) {
            throw new Error("Expected the field `wallet_subtypes` to be an array in the JSON data but got " + data['wallet_subtypes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['wallet_ids'])) {
            throw new Error("Expected the field `wallet_ids` to be an array in the JSON data but got " + data['wallet_ids']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['vault_ids'])) {
            throw new Error("Expected the field `vault_ids` to be an array in the JSON data but got " + data['vault_ids']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['project_ids'])) {
            throw new Error("Expected the field `project_ids` to be an array in the JSON data but got " + data['project_ids']);
        }

        return true;
    }


}



/**
 * The list of wallet types that this API key can access. Possible values include:   - `Custodial`: [Custodial Wallets](https://manuals.cobo.com/en/portal/custodial-wallets/introduction)   - `MPC`: [MPC Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction)   - `SmartContract`: [Smart Contract Wallets](https://manuals.cobo.com/en/portal/smart-contract-wallets/introduction)   - `Exchange`: [Exchange Wallets](https://manuals.cobo.com/en/portal/exchange-wallets/introduction) 
 * @member {Array.<module:model/WalletType>} wallet_types
 */
Scopes.prototype['wallet_types'] = undefined;

/**
 * The list of wallet sub-types that this API key can access. Possible values include:   - `Asset`: Custodial Wallets (Asset Wallets).   - `Org-Controlled`: MPC Wallets (Organization-Controlled Wallets).   - `User-Controlled`: MPC Wallets (User-Controlled Wallets).   - `Safe{Wallet}`: Smart Contract Wallets (Safe).   - `Main`: Exchange Wallets (Main Account).   - `Sub`: Exchange Wallets (Sub Account). 
 * @member {Array.<module:model/WalletSubtype>} wallet_subtypes
 */
Scopes.prototype['wallet_subtypes'] = undefined;

/**
 * The list of wallet IDs that this API key can access.
 * @member {Array.<String>} wallet_ids
 */
Scopes.prototype['wallet_ids'] = undefined;

/**
 * (Applicable to MPC Wallets only) The list of vault IDs that this API key can access.
 * @member {Array.<String>} vault_ids
 */
Scopes.prototype['vault_ids'] = undefined;

/**
 * (Applicable to MPC Wallets only) The list of project IDs that this API key can access.
 * @member {Array.<String>} project_ids
 */
Scopes.prototype['project_ids'] = undefined;






export default Scopes;

