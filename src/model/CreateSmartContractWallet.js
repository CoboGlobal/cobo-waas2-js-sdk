/**
 * Cobo Wallet as a Service 2.0
 * Cobo WaaS 2.0 enables you to programmatically access Cobo's full suite of crypto wallet technologies with powerful and flexible access controls.  # Wallet technologies - Custodial Wallet - MPC Wallet - Smart Contract Wallet (Based on Safe{Wallet}) - Exchange Wallet  # Risk Control technologies - Workflow - Access Control List (ACL)  # Risk Control targets - Wallet Management   - User/team and their permission management   - Risk control configurations, e.g. whitelist, blacklist, rate-limiting etc. - Blockchain Interaction   - Crypto transfer   - Smart Contract Invocation  # Important HTTPS only. RESTful, resource oriented  # Get Started Set up your APIs or get authorization  # Authentication and Authorization CoboAuth  # Request and Response application/json  # Error Handling  ### Common error codes | Error Code | Description | | -- | -- |  ### API-specific error codes For error codes that are dedicated to a specific API, see the Error codes section in each API specification, for example, /v3/wallets.  # Rate and Usage Limiting  # Idempotent Request  # Pagination # Support [Developer Hub](https://cobo.com/developers) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateSafeWallet from './CreateSafeWallet';
import SafeWalletAllOfInitiator from './SafeWalletAllOfInitiator';
import SmartContractWalletType from './SmartContractWalletType';

/**
 * The CreateSmartContractWallet model module.
 * @module model/CreateSmartContractWallet
 * @version 0.1.0
 */
class CreateSmartContractWallet {
    /**
     * Constructs a new <code>CreateSmartContractWallet</code>.
     * @alias module:model/CreateSmartContractWallet
     * @param {(module:model/CreateSafeWallet)} instance The actual instance to initialize CreateSmartContractWallet.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "CreateSafeWallet") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                CreateSafeWallet.validateJSON(instance); // throw an exception if no match
                // create CreateSafeWallet from JS object
                this.actualInstance = CreateSafeWallet.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into CreateSafeWallet
            errorMessages.push("Failed to construct CreateSafeWallet: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `CreateSmartContractWallet` with oneOf schemas CreateSafeWallet. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `CreateSmartContractWallet` with oneOf schemas CreateSafeWallet. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>CreateSmartContractWallet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateSmartContractWallet} obj Optional instance to populate.
     * @return {module:model/CreateSmartContractWallet} The populated <code>CreateSmartContractWallet</code> instance.
     */
    static constructFromObject(data, obj) {
        return new CreateSmartContractWallet(data);
    }

    /**
     * Gets the actual instance, which can be <code>CreateSafeWallet</code>.
     * @return {(module:model/CreateSafeWallet)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>CreateSafeWallet</code>.
     * @param {(module:model/CreateSafeWallet)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = CreateSmartContractWallet.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of CreateSmartContractWallet from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/CreateSmartContractWallet} An instance of CreateSmartContractWallet.
     */
    static fromJSON = function(json_string){
        return CreateSmartContractWallet.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {String} name
 */
CreateSmartContractWallet.prototype['name'] = undefined;

/**
 * @member {module:model/CreateSmartContractWallet.WalletTypeEnum} wallet_type
 */
CreateSmartContractWallet.prototype['wallet_type'] = undefined;

/**
 * @member {module:model/CreateSmartContractWallet.WalletSubtypeEnum} wallet_subtype
 */
CreateSmartContractWallet.prototype['wallet_subtype'] = undefined;

/**
 * The label of the wallet.
 * @member {String} label
 */
CreateSmartContractWallet.prototype['label'] = undefined;

/**
 * The chain id the wallet is on.
 * @member {String} chain_id
 */
CreateSmartContractWallet.prototype['chain_id'] = undefined;

/**
 * @member {module:model/SmartContractWalletType} smart_contract_wallet_type
 */
CreateSmartContractWallet.prototype['smart_contract_wallet_type'] = undefined;

/**
 * The address of the smart contract wallet. If this is not provided, WaaS 2.0 will create a new safe wallet and setup cobo safe module for user. In this case, threshold, owners is required.
 * @member {String} safe_address
 */
CreateSmartContractWallet.prototype['safe_address'] = undefined;

/**
 * The owners of the smart contract wallet. This MUST be provided when user want to create a new safe wallet.
 * @member {Array.<String>} owners
 */
CreateSmartContractWallet.prototype['owners'] = undefined;

/**
 * The threshold of required confirmations for the smart contract wallet. This MUST be provided when user want to create a new safe wallet.
 * @member {Number} threshold
 */
CreateSmartContractWallet.prototype['threshold'] = undefined;

/**
 * The address of the cobo safe module. Cobo safe module must has been created & enabled when import a existing safe wallet.
 * @member {String} cobo_safe_address
 */
CreateSmartContractWallet.prototype['cobo_safe_address'] = undefined;

/**
 * @member {module:model/SafeWalletAllOfInitiator} initiator
 */
CreateSmartContractWallet.prototype['initiator'] = undefined;


CreateSmartContractWallet.OneOf = ["CreateSafeWallet"];

export default CreateSmartContractWallet;

