/**
 * Cobo Wallet as a Service 2.0
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BabylonValidator from './BabylonValidator';
import EigenlayerValidator from './EigenlayerValidator';

/**
 * The PoolDetailsAllOfValidatorsInfo model module.
 * @module model/PoolDetailsAllOfValidatorsInfo
 */
class PoolDetailsAllOfValidatorsInfo {
    /**
     * Constructs a new <code>PoolDetailsAllOfValidatorsInfo</code>.
     * @alias module:model/PoolDetailsAllOfValidatorsInfo
     * @param {(module:model/BabylonValidator|module:model/EigenlayerValidator)} instance The actual instance to initialize PoolDetailsAllOfValidatorsInfo.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (instance instanceof BabylonValidator) {
                this.actualInstance = instance;
            } else if(BabylonValidator.validateJSON(instance)){
                // plain JS object
                // create BabylonValidator from JS object
                this.actualInstance = BabylonValidator.constructFromObject(instance);
            } else {
                return;
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into BabylonValidator
            errorMessages.push("Failed to construct BabylonValidator: " + err)
        }

        try {
            if (instance instanceof EigenlayerValidator) {
                this.actualInstance = instance;
            } else if(EigenlayerValidator.validateJSON(instance)){
                // plain JS object
                // create EigenlayerValidator from JS object
                this.actualInstance = EigenlayerValidator.constructFromObject(instance);
            } else {
                return;
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into EigenlayerValidator
            errorMessages.push("Failed to construct EigenlayerValidator: " + err)
        }

        // if (match > 1) {
        //    throw new Error("Multiple matches found constructing `PoolDetailsAllOfValidatorsInfo` with oneOf schemas BabylonValidator, EigenlayerValidator. Input: " + JSON.stringify(instance));
        // } else
        if (match === 0) {
        //    this.actualInstance = null; // clear the actual instance in case there are multiple matches
        //    throw new Error("No match found constructing `PoolDetailsAllOfValidatorsInfo` with oneOf schemas BabylonValidator, EigenlayerValidator. Details: " +
        //                    errorMessages.join(", "));
        return;
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>PoolDetailsAllOfValidatorsInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PoolDetailsAllOfValidatorsInfo} obj Optional instance to populate.
     * @return {module:model/PoolDetailsAllOfValidatorsInfo} The populated <code>PoolDetailsAllOfValidatorsInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        return new PoolDetailsAllOfValidatorsInfo(data);
    }

    /**
     * Gets the actual instance, which can be <code>BabylonValidator</code>, <code>EigenlayerValidator</code>.
     * @return {(module:model/BabylonValidator|module:model/EigenlayerValidator)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>BabylonValidator</code>, <code>EigenlayerValidator</code>.
     * @param {(module:model/BabylonValidator|module:model/EigenlayerValidator)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = PoolDetailsAllOfValidatorsInfo.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of PoolDetailsAllOfValidatorsInfo from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/PoolDetailsAllOfValidatorsInfo} An instance of PoolDetailsAllOfValidatorsInfo.
     */
    static fromJSON = function(json_string){
        return PoolDetailsAllOfValidatorsInfo.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * The URL of the validator's icon.
 * @member {String} icon_url
 */
PoolDetailsAllOfValidatorsInfo.prototype['icon_url'] = undefined;

/**
 * The name of validator.
 * @member {String} name
 */
PoolDetailsAllOfValidatorsInfo.prototype['name'] = undefined;

/**
 * The priority of validator.
 * @member {Number} priority
 */
PoolDetailsAllOfValidatorsInfo.prototype['priority'] = undefined;

/**
 * The public key of validator.
 * @member {String} public_key
 */
PoolDetailsAllOfValidatorsInfo.prototype['public_key'] = undefined;

/**
 * The commission of validator.
 * @member {Number} commission_rate
 */
PoolDetailsAllOfValidatorsInfo.prototype['commission_rate'] = undefined;

/**
 * The list of supported pos chains.
 * @member {Array.<module:model/PoolDetailsAllOfValidatorsInfo.SupportedPosChainsEnum>} supported_pos_chains
 */
PoolDetailsAllOfValidatorsInfo.prototype['supported_pos_chains'] = undefined;

/**
 * The address of validator.
 * @member {String} address
 */
PoolDetailsAllOfValidatorsInfo.prototype['address'] = undefined;


PoolDetailsAllOfValidatorsInfo.OneOf = ["BabylonValidator", "EigenlayerValidator"];

export default PoolDetailsAllOfValidatorsInfo;

