/**
 * Cobo Wallet as a Service 2.0
 * Cobo WaaS 2.0 enables you to programmatically access Cobo's full suite of crypto wallet technologies with powerful and flexible access controls.  # Wallet technologies - Custodial Wallet - MPC Wallet - Smart Contract Wallet (Based on Safe{Wallet}) - Exchange Wallet  # Risk Control technologies - Workflow - Access Control List (ACL)  # Risk Control targets - Wallet Management   - User/team and their permission management   - Risk control configurations, e.g. whitelist, blacklist, rate-limiting etc. - Blockchain Interaction   - Crypto transfer   - Smart Contract Invocation  # Important HTTPS only. RESTful, resource oriented  # Get Started Set up your APIs or get authorization  # Authentication and Authorization CoboAuth  # Request and Response application/json  # Error Handling  ### Common error codes | Error Code | Description | | -- | -- |  ### API-specific error codes For error codes that are dedicated to a specific API, see the Error codes section in each API specification, for example, /v3/wallets.  # Rate and Usage Limiting  # Idempotent Request  # Pagination # Support [Developer Hub](https://cobo.com/developers) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UTXO model module.
 * @module model/UTXO
 * @version 0.1.0
 */
class UTXO {
    /**
     * Constructs a new <code>UTXO</code>.
     * utxo information.
     * @alias module:model/UTXO
     */
    constructor() { 
        
        UTXO.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UTXO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UTXO} obj Optional instance to populate.
     * @return {module:model/UTXO} The populated <code>UTXO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UTXO();

            if (data.hasOwnProperty('tx_hash')) {
                obj['tx_hash'] = ApiClient.convertToType(data['tx_hash'], 'String');
            }
            if (data.hasOwnProperty('vout_n')) {
                obj['vout_n'] = ApiClient.convertToType(data['vout_n'], 'Number');
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'String');
            }
            if (data.hasOwnProperty('is_coinbase')) {
                obj['is_coinbase'] = ApiClient.convertToType(data['is_coinbase'], 'Boolean');
            }
            if (data.hasOwnProperty('confirmed_number')) {
                obj['confirmed_number'] = ApiClient.convertToType(data['confirmed_number'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UTXO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UTXO</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['tx_hash'] && !(typeof data['tx_hash'] === 'string' || data['tx_hash'] instanceof String)) {
            throw new Error("Expected the field `tx_hash` to be a primitive type in the JSON string but got " + data['tx_hash']);
        }
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // ensure the json data is a string
        if (data['amount'] && !(typeof data['amount'] === 'string' || data['amount'] instanceof String)) {
            throw new Error("Expected the field `amount` to be a primitive type in the JSON string but got " + data['amount']);
        }

        return true;
    }


}



/**
 * Transaction hash of the UTXO.
 * @member {String} tx_hash
 */
UTXO.prototype['tx_hash'] = undefined;

/**
 * Output index of the UTXO.
 * @member {Number} vout_n
 */
UTXO.prototype['vout_n'] = undefined;

/**
 * Address of the UTXO.
 * @member {String} address
 */
UTXO.prototype['address'] = undefined;

/**
 * UTXO amount in decimal places (e.g. one bitcoin is divisible to eight decimal places, and 100000000 represents 1 BTC).
 * @member {String} amount
 */
UTXO.prototype['amount'] = undefined;

/**
 * Whether the UTXO is a coinbase transaction.
 * @member {Boolean} is_coinbase
 */
UTXO.prototype['is_coinbase'] = undefined;

/**
 * Number of confirmations for the UTXO.
 * @member {Number} confirmed_number
 */
UTXO.prototype['confirmed_number'] = undefined;






export default UTXO;

