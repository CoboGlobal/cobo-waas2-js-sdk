/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BaseStakeExtra from './BaseStakeExtra';
import StakingPoolType from './StakingPoolType';

/**
 * The EthUnstakeExtra model module.
 * @module model/EthUnstakeExtra
 */
class EthUnstakeExtra {
    /**
     * Constructs a new <code>EthUnstakeExtra</code>.
     * @alias module:model/EthUnstakeExtra
     * @implements module:model/BaseStakeExtra
     * @param pool_type {module:model/StakingPoolType} 
     * @param validator_pubkeys {Array.<String>} A list of public keys identifying the validators to unstake from the Ethereum Beacon Chain.
     */
    constructor(pool_type, validator_pubkeys) { 
        BaseStakeExtra.initialize(this, pool_type);
        EthUnstakeExtra.initialize(this, pool_type, validator_pubkeys);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, pool_type, validator_pubkeys) { 
        obj['pool_type'] = pool_type;
        obj['validator_pubkeys'] = validator_pubkeys;
    }

    /**
     * Constructs a <code>EthUnstakeExtra</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EthUnstakeExtra} obj Optional instance to populate.
     * @return {module:model/EthUnstakeExtra} The populated <code>EthUnstakeExtra</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EthUnstakeExtra();
            BaseStakeExtra.constructFromObject(data, obj);

            if (data.hasOwnProperty('pool_type')) {
                obj['pool_type'] = StakingPoolType.constructFromObject(data['pool_type']);
            }
            if (data.hasOwnProperty('validator_pubkeys')) {
                obj['validator_pubkeys'] = ApiClient.convertToType(data['validator_pubkeys'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EthUnstakeExtra</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EthUnstakeExtra</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EthUnstakeExtra.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['validator_pubkeys'])) {
            throw new Error("Expected the field `validator_pubkeys` to be an array in the JSON data but got " + data['validator_pubkeys']);
        }

        return true;
    }


}

EthUnstakeExtra.RequiredProperties = ["pool_type", "validator_pubkeys"];

/**
 * @member {module:model/StakingPoolType} pool_type
 */
EthUnstakeExtra.prototype['pool_type'] = undefined;

/**
 * A list of public keys identifying the validators to unstake from the Ethereum Beacon Chain.
 * @member {Array.<String>} validator_pubkeys
 */
EthUnstakeExtra.prototype['validator_pubkeys'] = undefined;


// Implement BaseStakeExtra interface:
/**
 * @member {module:model/StakingPoolType} pool_type
 */
BaseStakeExtra.prototype['pool_type'] = undefined;




export default EthUnstakeExtra;

