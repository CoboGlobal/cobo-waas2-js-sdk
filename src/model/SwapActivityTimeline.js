/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SwapActivityTimeline model module.
 * @module model/SwapActivityTimeline
 */
class SwapActivityTimeline {
    /**
     * Constructs a new <code>SwapActivityTimeline</code>.
     * The timeline of the swap activity.
     * @alias module:model/SwapActivityTimeline
     * @param action {String} The action of the swap activity. Possible values include:   - `Submitted`: The swap request is submitted.   - `Pending Authorization`: The swap request is pending authorization.   - `Bridge {Token}`: The token is being bridged to the target chain.   - `Swap {Token}`: The token is being swapped on the target chain.   - `Cobo Confirmation`: The swap result is waiting for Cobo confirmation. 
     * @param status {String} The status of the action. Possible values include:   - `Success`: The action is successfully completed.   - `Processing`: The action is being processed.   - `Failed`: The action has failed. 
     */
    constructor(action, status) { 
        
        SwapActivityTimeline.initialize(this, action, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, action, status) { 
        obj['action'] = action;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>SwapActivityTimeline</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SwapActivityTimeline} obj Optional instance to populate.
     * @return {module:model/SwapActivityTimeline} The populated <code>SwapActivityTimeline</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SwapActivityTimeline();

            if (data.hasOwnProperty('action')) {
                obj['action'] = ApiClient.convertToType(data['action'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SwapActivityTimeline</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SwapActivityTimeline</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SwapActivityTimeline.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['action'] && !(typeof data['action'] === 'string' || data['action'] instanceof String)) {
            throw new Error("Expected the field `action` to be a primitive type in the JSON string but got " + data['action']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}

SwapActivityTimeline.RequiredProperties = ["action", "status"];

/**
 * The action of the swap activity. Possible values include:   - `Submitted`: The swap request is submitted.   - `Pending Authorization`: The swap request is pending authorization.   - `Bridge {Token}`: The token is being bridged to the target chain.   - `Swap {Token}`: The token is being swapped on the target chain.   - `Cobo Confirmation`: The swap result is waiting for Cobo confirmation. 
 * @member {String} action
 */
SwapActivityTimeline.prototype['action'] = undefined;

/**
 * The status of the action. Possible values include:   - `Success`: The action is successfully completed.   - `Processing`: The action is being processed.   - `Failed`: The action has failed. 
 * @member {String} status
 */
SwapActivityTimeline.prototype['status'] = undefined;

/**
 * The time when the action took place, in Unix timestamp format, measured in milliseconds.  
 * @member {Number} timestamp
 */
SwapActivityTimeline.prototype['timestamp'] = undefined;






export default SwapActivityTimeline;

