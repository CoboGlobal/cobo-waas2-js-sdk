/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SettlementInfo model module.
 * @module model/SettlementInfo
 */
class SettlementInfo {
    /**
     * Constructs a new <code>SettlementInfo</code>.
     * @alias module:model/SettlementInfo
     * @param available_amount {String} The amount available for settlement in the specified cryptocurrency token.
     */
    constructor(available_amount) { 
        
        SettlementInfo.initialize(this, available_amount);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, available_amount) { 
        obj['available_amount'] = available_amount;
    }

    /**
     * Constructs a <code>SettlementInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SettlementInfo} obj Optional instance to populate.
     * @return {module:model/SettlementInfo} The populated <code>SettlementInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SettlementInfo();

            if (data.hasOwnProperty('merchant_id')) {
                obj['merchant_id'] = ApiClient.convertToType(data['merchant_id'], 'String');
            }
            if (data.hasOwnProperty('token_id')) {
                obj['token_id'] = ApiClient.convertToType(data['token_id'], 'String');
            }
            if (data.hasOwnProperty('available_amount')) {
                obj['available_amount'] = ApiClient.convertToType(data['available_amount'], 'String');
            }
            if (data.hasOwnProperty('available_currency_balance')) {
                obj['available_currency_balance'] = ApiClient.convertToType(data['available_currency_balance'], 'String');
            }
            if (data.hasOwnProperty('pending_amount')) {
                obj['pending_amount'] = ApiClient.convertToType(data['pending_amount'], 'String');
            }
            if (data.hasOwnProperty('pending_currency_balance')) {
                obj['pending_currency_balance'] = ApiClient.convertToType(data['pending_currency_balance'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SettlementInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SettlementInfo</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SettlementInfo.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['merchant_id'] && !(typeof data['merchant_id'] === 'string' || data['merchant_id'] instanceof String)) {
            throw new Error("Expected the field `merchant_id` to be a primitive type in the JSON string but got " + data['merchant_id']);
        }
        // ensure the json data is a string
        if (data['token_id'] && !(typeof data['token_id'] === 'string' || data['token_id'] instanceof String)) {
            throw new Error("Expected the field `token_id` to be a primitive type in the JSON string but got " + data['token_id']);
        }
        // ensure the json data is a string
        if (data['available_amount'] && !(typeof data['available_amount'] === 'string' || data['available_amount'] instanceof String)) {
            throw new Error("Expected the field `available_amount` to be a primitive type in the JSON string but got " + data['available_amount']);
        }
        // ensure the json data is a string
        if (data['available_currency_balance'] && !(typeof data['available_currency_balance'] === 'string' || data['available_currency_balance'] instanceof String)) {
            throw new Error("Expected the field `available_currency_balance` to be a primitive type in the JSON string but got " + data['available_currency_balance']);
        }
        // ensure the json data is a string
        if (data['pending_amount'] && !(typeof data['pending_amount'] === 'string' || data['pending_amount'] instanceof String)) {
            throw new Error("Expected the field `pending_amount` to be a primitive type in the JSON string but got " + data['pending_amount']);
        }
        // ensure the json data is a string
        if (data['pending_currency_balance'] && !(typeof data['pending_currency_balance'] === 'string' || data['pending_currency_balance'] instanceof String)) {
            throw new Error("Expected the field `pending_currency_balance` to be a primitive type in the JSON string but got " + data['pending_currency_balance']);
        }

        return true;
    }


}

SettlementInfo.RequiredProperties = ["available_amount"];

/**
 * The merchant ID. For payment gateway balance, this field will be empty.
 * @member {String} merchant_id
 */
SettlementInfo.prototype['merchant_id'] = undefined;

/**
 * The ID of the cryptocurrency token.
 * @member {String} token_id
 */
SettlementInfo.prototype['token_id'] = undefined;

/**
 * The amount available for settlement in the specified cryptocurrency token.
 * @member {String} available_amount
 */
SettlementInfo.prototype['available_amount'] = undefined;

/**
 * The available currency balance.
 * @member {String} available_currency_balance
 */
SettlementInfo.prototype['available_currency_balance'] = undefined;

/**
 * The pending amount.
 * @member {String} pending_amount
 */
SettlementInfo.prototype['pending_amount'] = undefined;

/**
 * The pending currency balance.
 * @member {String} pending_currency_balance
 */
SettlementInfo.prototype['pending_currency_balance'] = undefined;






export default SettlementInfo;

