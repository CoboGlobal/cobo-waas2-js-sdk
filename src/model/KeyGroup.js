/**
 * Cobo Wallet as a Service 2.0
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import KeyGroupStatus from './KeyGroupStatus';
import KeyGroupType from './KeyGroupType';
import KeyHolder from './KeyHolder';
import TSSGroupId from './TSSGroupId';

/**
 * The KeyGroup model module.
 * @module model/KeyGroup
 * @version 0.1.0
 */
class KeyGroup {
    /**
     * Constructs a new <code>KeyGroup</code>.
     * The data for mpc key group information.
     * @alias module:model/KeyGroup
     */
    constructor() { 
        
        KeyGroup.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>KeyGroup</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/KeyGroup} obj Optional instance to populate.
     * @return {module:model/KeyGroup} The populated <code>KeyGroup</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new KeyGroup();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = KeyGroupType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('tss_group_ids')) {
                obj['tss_group_ids'] = ApiClient.convertToType(data['tss_group_ids'], [TSSGroupId]);
            }
            if (data.hasOwnProperty('key_holders')) {
                obj['key_holders'] = ApiClient.convertToType(data['key_holders'], [KeyHolder]);
            }
            if (data.hasOwnProperty('node_count')) {
                obj['node_count'] = ApiClient.convertToType(data['node_count'], 'Number');
            }
            if (data.hasOwnProperty('threshold')) {
                obj['threshold'] = ApiClient.convertToType(data['threshold'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = KeyGroupStatus.constructFromObject(data['status']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>KeyGroup</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>KeyGroup</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['tss_group_ids']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tss_group_ids'])) {
                throw new Error("Expected the field `tss_group_ids` to be an array in the JSON data but got " + data['tss_group_ids']);
            }
            // validate the optional field `tss_group_ids` (array)
            for (const item of data['tss_group_ids']) {
                TSSGroupId.validateJSON(item);
            };
        }
        if (data['key_holders']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['key_holders'])) {
                throw new Error("Expected the field `key_holders` to be an array in the JSON data but got " + data['key_holders']);
            }
            // validate the optional field `key_holders` (array)
            for (const item of data['key_holders']) {
                KeyHolder.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Unique id of the key group
 * @member {String} id
 */
KeyGroup.prototype['id'] = undefined;

/**
 * @member {module:model/KeyGroupType} type
 */
KeyGroup.prototype['type'] = undefined;

/**
 * @member {Array.<module:model/TSSGroupId>} tss_group_ids
 */
KeyGroup.prototype['tss_group_ids'] = undefined;

/**
 * @member {Array.<module:model/KeyHolder>} key_holders
 */
KeyGroup.prototype['key_holders'] = undefined;

/**
 * @member {Number} node_count
 */
KeyGroup.prototype['node_count'] = undefined;

/**
 * @member {Number} threshold
 */
KeyGroup.prototype['threshold'] = undefined;

/**
 * @member {module:model/KeyGroupStatus} status
 */
KeyGroup.prototype['status'] = undefined;






export default KeyGroup;

