/**
 * Cobo Wallet as a Service 2.0
 * Cobo WaaS 2.0 enables you to programmatically access Cobo's full suite of crypto wallet technologies with powerful and flexible access controls.  # Wallet technologies - Custodial Wallet - MPC Wallet - Smart Contract Wallet (Based on Safe{Wallet}) - Exchange Wallet  # Risk Control technologies - Workflow - Access Control List (ACL)  # Risk Control targets - Wallet Management   - User/team and their permission management   - Risk control configurations, e.g. whitelist, blacklist, rate-limiting etc. - Blockchain Interaction   - Crypto transfer   - Smart Contract Invocation  # Important HTTPS only. RESTful, resource oriented  # Get Started Set up your APIs or get authorization  # Authentication and Authorization CoboAuth  # Request and Response application/json  # Error Handling  ### Common error codes | Error Code | Description | | -- | -- |  ### API-specific error codes For error codes that are dedicated to a specific API, see the Error codes section in each API specification, for example, /v3/wallets.  # Rate and Usage Limiting  # Idempotent Request  # Pagination # Support [Developer Hub](https://cobo.com/developers) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MPCVaultType from './MPCVaultType';

/**
 * The CreateMpcVaultRequest model module.
 * @module model/CreateMpcVaultRequest
 * @version 0.1.0
 */
class CreateMpcVaultRequest {
    /**
     * Constructs a new <code>CreateMpcVaultRequest</code>.
     * @alias module:model/CreateMpcVaultRequest
     * @param name {String} The name of the mpc vault.
     * @param vaultType {module:model/MPCVaultType} 
     */
    constructor(name, vaultType) { 
        
        CreateMpcVaultRequest.initialize(this, name, vaultType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, vaultType) { 
        obj['name'] = name;
        obj['vault_type'] = vaultType;
    }

    /**
     * Constructs a <code>CreateMpcVaultRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateMpcVaultRequest} obj Optional instance to populate.
     * @return {module:model/CreateMpcVaultRequest} The populated <code>CreateMpcVaultRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateMpcVaultRequest();

            if (data.hasOwnProperty('project_id')) {
                obj['project_id'] = ApiClient.convertToType(data['project_id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('vault_type')) {
                obj['vault_type'] = MPCVaultType.constructFromObject(data['vault_type']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateMpcVaultRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateMpcVaultRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateMpcVaultRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['project_id'] && !(typeof data['project_id'] === 'string' || data['project_id'] instanceof String)) {
            throw new Error("Expected the field `project_id` to be a primitive type in the JSON string but got " + data['project_id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

CreateMpcVaultRequest.RequiredProperties = ["name", "vault_type"];

/**
 * The id of the mpc project.
 * @member {String} project_id
 */
CreateMpcVaultRequest.prototype['project_id'] = undefined;

/**
 * The name of the mpc vault.
 * @member {String} name
 */
CreateMpcVaultRequest.prototype['name'] = undefined;

/**
 * @member {module:model/MPCVaultType} vault_type
 */
CreateMpcVaultRequest.prototype['vault_type'] = undefined;






export default CreateMpcVaultRequest;

