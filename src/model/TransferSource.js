/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CoboSafeDelegate from './CoboSafeDelegate';
import CustodialTransferSource from './CustodialTransferSource';
import CustodialWeb3TransferSource from './CustodialWeb3TransferSource';
import ExchangeTransferSource from './ExchangeTransferSource';
import MpcSigningGroup from './MpcSigningGroup';
import MpcTransferSource from './MpcTransferSource';
import SafeTransferSource from './SafeTransferSource';
import TransactionUtxo from './TransactionUtxo';
import WalletSubtype from './WalletSubtype';

/**
 * The TransferSource model module.
 * @module model/TransferSource
 */
class TransferSource {
    /**
     * Constructs a new <code>TransferSource</code>.
     * @alias module:model/TransferSource
     * @param {(module:model/CustodialTransferSource|module:model/CustodialWeb3TransferSource|module:model/ExchangeTransferSource|module:model/MpcTransferSource|module:model/SafeTransferSource)} instance The actual instance to initialize TransferSource.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        var discriminatorValue = instance["source_type"];

        if (discriminatorValue) {
            switch(discriminatorValue) {
                case "Asset":
                    this.actualInstance = CustodialTransferSource.constructFromObject(instance);
                    match++;
                    break;
                case "Main":
                    this.actualInstance = ExchangeTransferSource.constructFromObject(instance);
                    match++;
                    break;
                case "Org-Controlled":
                    this.actualInstance = MpcTransferSource.constructFromObject(instance);
                    match++;
                    break;
                case "Safe{Wallet}":
                    this.actualInstance = SafeTransferSource.constructFromObject(instance);
                    match++;
                    break;
                case "Sub":
                    this.actualInstance = ExchangeTransferSource.constructFromObject(instance);
                    match++;
                    break;
                case "User-Controlled":
                    this.actualInstance = MpcTransferSource.constructFromObject(instance);
                    match++;
                    break;
                case "Web3":
                    this.actualInstance = CustodialWeb3TransferSource.constructFromObject(instance);
                    match++;
                    break;
                default:
                    errorMessages.push("Unrecognized discriminator value: " + discriminatorValue);
                    break;
            }
            return;
        }

        try {
            if (instance instanceof CustodialTransferSource) {
                this.actualInstance = instance;
            } else if(!!CustodialTransferSource.validateJSON && CustodialTransferSource.validateJSON(instance)){
                // plain JS object
                // create CustodialTransferSource from JS object
                this.actualInstance = CustodialTransferSource.constructFromObject(instance);
            } else {
                if(CustodialTransferSource.constructFromObject(instance)) {
                    if (!!CustodialTransferSource.constructFromObject(instance).toJSON) {
                        if (CustodialTransferSource.constructFromObject(instance).toJSON()) {
                            this.actualInstance = CustodialTransferSource.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = CustodialTransferSource.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into CustodialTransferSource
            errorMessages.push("Failed to construct CustodialTransferSource: " + err)
        }

        try {
            if (instance instanceof CustodialWeb3TransferSource) {
                this.actualInstance = instance;
            } else if(!!CustodialWeb3TransferSource.validateJSON && CustodialWeb3TransferSource.validateJSON(instance)){
                // plain JS object
                // create CustodialWeb3TransferSource from JS object
                this.actualInstance = CustodialWeb3TransferSource.constructFromObject(instance);
            } else {
                if(CustodialWeb3TransferSource.constructFromObject(instance)) {
                    if (!!CustodialWeb3TransferSource.constructFromObject(instance).toJSON) {
                        if (CustodialWeb3TransferSource.constructFromObject(instance).toJSON()) {
                            this.actualInstance = CustodialWeb3TransferSource.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = CustodialWeb3TransferSource.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into CustodialWeb3TransferSource
            errorMessages.push("Failed to construct CustodialWeb3TransferSource: " + err)
        }

        try {
            if (instance instanceof MpcTransferSource) {
                this.actualInstance = instance;
            } else if(!!MpcTransferSource.validateJSON && MpcTransferSource.validateJSON(instance)){
                // plain JS object
                // create MpcTransferSource from JS object
                this.actualInstance = MpcTransferSource.constructFromObject(instance);
            } else {
                if(MpcTransferSource.constructFromObject(instance)) {
                    if (!!MpcTransferSource.constructFromObject(instance).toJSON) {
                        if (MpcTransferSource.constructFromObject(instance).toJSON()) {
                            this.actualInstance = MpcTransferSource.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = MpcTransferSource.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into MpcTransferSource
            errorMessages.push("Failed to construct MpcTransferSource: " + err)
        }

        try {
            if (instance instanceof SafeTransferSource) {
                this.actualInstance = instance;
            } else if(!!SafeTransferSource.validateJSON && SafeTransferSource.validateJSON(instance)){
                // plain JS object
                // create SafeTransferSource from JS object
                this.actualInstance = SafeTransferSource.constructFromObject(instance);
            } else {
                if(SafeTransferSource.constructFromObject(instance)) {
                    if (!!SafeTransferSource.constructFromObject(instance).toJSON) {
                        if (SafeTransferSource.constructFromObject(instance).toJSON()) {
                            this.actualInstance = SafeTransferSource.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = SafeTransferSource.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into SafeTransferSource
            errorMessages.push("Failed to construct SafeTransferSource: " + err)
        }

        try {
            if (instance instanceof ExchangeTransferSource) {
                this.actualInstance = instance;
            } else if(!!ExchangeTransferSource.validateJSON && ExchangeTransferSource.validateJSON(instance)){
                // plain JS object
                // create ExchangeTransferSource from JS object
                this.actualInstance = ExchangeTransferSource.constructFromObject(instance);
            } else {
                if(ExchangeTransferSource.constructFromObject(instance)) {
                    if (!!ExchangeTransferSource.constructFromObject(instance).toJSON) {
                        if (ExchangeTransferSource.constructFromObject(instance).toJSON()) {
                            this.actualInstance = ExchangeTransferSource.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = ExchangeTransferSource.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ExchangeTransferSource
            errorMessages.push("Failed to construct ExchangeTransferSource: " + err)
        }

        // if (match > 1) {
        //    throw new Error("Multiple matches found constructing `TransferSource` with oneOf schemas CustodialTransferSource, CustodialWeb3TransferSource, ExchangeTransferSource, MpcTransferSource, SafeTransferSource. Input: " + JSON.stringify(instance));
        // } else
        if (match === 0) {
        //    this.actualInstance = null; // clear the actual instance in case there are multiple matches
        //    throw new Error("No match found constructing `TransferSource` with oneOf schemas CustodialTransferSource, CustodialWeb3TransferSource, ExchangeTransferSource, MpcTransferSource, SafeTransferSource. Details: " +
        //                    errorMessages.join(", "));
        return;
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>TransferSource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransferSource} obj Optional instance to populate.
     * @return {module:model/TransferSource} The populated <code>TransferSource</code> instance.
     */
    static constructFromObject(data, obj) {
        return new TransferSource(data);
    }

    /**
     * Gets the actual instance, which can be <code>CustodialTransferSource</code>, <code>CustodialWeb3TransferSource</code>, <code>ExchangeTransferSource</code>, <code>MpcTransferSource</code>, <code>SafeTransferSource</code>.
     * @return {(module:model/CustodialTransferSource|module:model/CustodialWeb3TransferSource|module:model/ExchangeTransferSource|module:model/MpcTransferSource|module:model/SafeTransferSource)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>CustodialTransferSource</code>, <code>CustodialWeb3TransferSource</code>, <code>ExchangeTransferSource</code>, <code>MpcTransferSource</code>, <code>SafeTransferSource</code>.
     * @param {(module:model/CustodialTransferSource|module:model/CustodialWeb3TransferSource|module:model/ExchangeTransferSource|module:model/MpcTransferSource|module:model/SafeTransferSource)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = TransferSource.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of TransferSource from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/TransferSource} An instance of TransferSource.
     */
    static fromJSON = function(json_string){
        return TransferSource.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {module:model/WalletSubtype} source_type
 */
TransferSource.prototype['source_type'] = undefined;

/**
 * The wallet ID.
 * @member {String} wallet_id
 */
TransferSource.prototype['wallet_id'] = undefined;

/**
 * The wallet address.
 * @member {String} address
 */
TransferSource.prototype['address'] = undefined;

/**
 * @member {Array.<module:model/TransactionUtxo>} included_utxos
 */
TransferSource.prototype['included_utxos'] = undefined;

/**
 * @member {Array.<module:model/TransactionUtxo>} excluded_utxos
 */
TransferSource.prototype['excluded_utxos'] = undefined;

/**
 * @member {module:model/MpcSigningGroup} mpc_used_key_share_holder_group
 */
TransferSource.prototype['mpc_used_key_share_holder_group'] = undefined;

/**
 * @member {module:model/CoboSafeDelegate} delegate
 */
TransferSource.prototype['delegate'] = undefined;

/**
 * The trading account type.
 * @member {String} trading_account_type
 */
TransferSource.prototype['trading_account_type'] = undefined;


TransferSource.OneOf = ["CustodialTransferSource", "CustodialWeb3TransferSource", "ExchangeTransferSource", "MpcTransferSource", "SafeTransferSource"];

export default TransferSource;

