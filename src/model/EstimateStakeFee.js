/**
 * Cobo Wallet as a Service 2.0
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ActivityType from './ActivityType';
import BaseEstimateStakingFee from './BaseEstimateStakingFee';
import CreateStakeActivity from './CreateStakeActivity';
import CreateStakeActivityExtra from './CreateStakeActivityExtra';
import StakingSource from './StakingSource';
import TransactionRequestFee from './TransactionRequestFee';

/**
 * The EstimateStakeFee model module.
 * @module model/EstimateStakeFee
 * @version 1.0.0
 */
class EstimateStakeFee {
    /**
     * Constructs a new <code>EstimateStakeFee</code>.
     * @alias module:model/EstimateStakeFee
     * @implements module:model/BaseEstimateStakingFee
     * @implements module:model/CreateStakeActivity
     * @param activity_type {module:model/ActivityType} 
     * @param pool_id {String} The id of the staking pool
     * @param amount {String} The amount to stake
     * @param fee {module:model/TransactionRequestFee} 
     * @param extra {module:model/CreateStakeActivityExtra} 
     */
    constructor(activity_type, pool_id, amount, fee, extra) { 
        BaseEstimateStakingFee.initialize(this, activity_type);CreateStakeActivity.initialize(this, pool_id, amount, fee, extra);
        EstimateStakeFee.initialize(this, activity_type, pool_id, amount, fee, extra);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, activity_type, pool_id, amount, fee, extra) { 
        obj['activity_type'] = activity_type;
        obj['pool_id'] = pool_id;
        obj['amount'] = amount;
        obj['fee'] = fee;
        obj['extra'] = extra;
    }

    /**
     * Constructs a <code>EstimateStakeFee</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EstimateStakeFee} obj Optional instance to populate.
     * @return {module:model/EstimateStakeFee} The populated <code>EstimateStakeFee</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EstimateStakeFee();
            BaseEstimateStakingFee.constructFromObject(data, obj);
            CreateStakeActivity.constructFromObject(data, obj);

            if (data.hasOwnProperty('activity_type')) {
                obj['activity_type'] = ActivityType.constructFromObject(data['activity_type']);
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = StakingSource.constructFromObject(data['source']);
            }
            if (data.hasOwnProperty('pool_id')) {
                obj['pool_id'] = ApiClient.convertToType(data['pool_id'], 'String');
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'String');
            }
            if (data.hasOwnProperty('fee')) {
                obj['fee'] = TransactionRequestFee.constructFromObject(data['fee']);
            }
            if (data.hasOwnProperty('extra')) {
                obj['extra'] = CreateStakeActivityExtra.constructFromObject(data['extra']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EstimateStakeFee</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EstimateStakeFee</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EstimateStakeFee.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `source`
        if (data['source']) { // data not null
          StakingSource.validateJSON(data['source']);
        }
        // ensure the json data is a string
        if (data['pool_id'] && !(typeof data['pool_id'] === 'string' || data['pool_id'] instanceof String)) {
            throw new Error("Expected the field `pool_id` to be a primitive type in the JSON string but got " + data['pool_id']);
        }
        // ensure the json data is a string
        if (data['amount'] && !(typeof data['amount'] === 'string' || data['amount'] instanceof String)) {
            throw new Error("Expected the field `amount` to be a primitive type in the JSON string but got " + data['amount']);
        }
        // validate the optional field `fee`
        if (data['fee']) { // data not null
          TransactionRequestFee.validateJSON(data['fee']);
        }
        // validate the optional field `extra`
        if (data['extra']) { // data not null
          CreateStakeActivityExtra.validateJSON(data['extra']);
        }

        return true;
    }


}

EstimateStakeFee.RequiredProperties = ["activity_type", "pool_id", "amount", "fee", "extra"];

/**
 * @member {module:model/ActivityType} activity_type
 */
EstimateStakeFee.prototype['activity_type'] = undefined;

/**
 * @member {module:model/StakingSource} source
 */
EstimateStakeFee.prototype['source'] = undefined;

/**
 * The id of the staking pool
 * @member {String} pool_id
 */
EstimateStakeFee.prototype['pool_id'] = undefined;

/**
 * The amount to stake
 * @member {String} amount
 */
EstimateStakeFee.prototype['amount'] = undefined;

/**
 * @member {module:model/TransactionRequestFee} fee
 */
EstimateStakeFee.prototype['fee'] = undefined;

/**
 * @member {module:model/CreateStakeActivityExtra} extra
 */
EstimateStakeFee.prototype['extra'] = undefined;


// Implement BaseEstimateStakingFee interface:
/**
 * @member {module:model/ActivityType} activity_type
 */
BaseEstimateStakingFee.prototype['activity_type'] = undefined;
// Implement CreateStakeActivity interface:
/**
 * @member {module:model/StakingSource} source
 */
CreateStakeActivity.prototype['source'] = undefined;
/**
 * The id of the staking pool
 * @member {String} pool_id
 */
CreateStakeActivity.prototype['pool_id'] = undefined;
/**
 * The amount to stake
 * @member {String} amount
 */
CreateStakeActivity.prototype['amount'] = undefined;
/**
 * @member {module:model/TransactionRequestFee} fee
 */
CreateStakeActivity.prototype['fee'] = undefined;
/**
 * @member {module:model/CreateStakeActivityExtra} extra
 */
CreateStakeActivity.prototype['extra'] = undefined;




export default EstimateStakeFee;

