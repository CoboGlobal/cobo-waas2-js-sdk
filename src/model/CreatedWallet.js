/**
 * Cobo Wallet as a Service 2.0
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateCustodialWallet from './CreateCustodialWallet';
import CreateExchangeWallet from './CreateExchangeWallet';
import CreateMpcWallet from './CreateMpcWallet';
import CreateSmartContractWallet from './CreateSmartContractWallet';
import ExchangeId from './ExchangeId';
import SmartContractInitiator from './SmartContractInitiator';
import SmartContractWalletType from './SmartContractWalletType';
import WalletSubtype from './WalletSubtype';
import WalletType from './WalletType';

/**
 * The CreatedWallet model module.
 * @module model/CreatedWallet
 * @version 0.4.5
 */
class CreatedWallet {
    /**
     * Constructs a new <code>CreatedWallet</code>.
     * @alias module:model/CreatedWallet
     * @param {(module:model/CreateCustodialWallet|module:model/CreateExchangeWallet|module:model/CreateMpcWallet|module:model/CreateSmartContractWallet)} instance The actual instance to initialize CreatedWallet.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "CreateCustodialWallet") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                CreateCustodialWallet.validateJSON(instance); // throw an exception if no match
                // create CreateCustodialWallet from JS object
                this.actualInstance = CreateCustodialWallet.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into CreateCustodialWallet
            errorMessages.push("Failed to construct CreateCustodialWallet: " + err)
        }

        try {
            if (typeof instance === "CreateMpcWallet") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                CreateMpcWallet.validateJSON(instance); // throw an exception if no match
                // create CreateMpcWallet from JS object
                this.actualInstance = CreateMpcWallet.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into CreateMpcWallet
            errorMessages.push("Failed to construct CreateMpcWallet: " + err)
        }

        try {
            if (typeof instance === "CreateSmartContractWallet") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                CreateSmartContractWallet.validateJSON(instance); // throw an exception if no match
                // create CreateSmartContractWallet from JS object
                this.actualInstance = CreateSmartContractWallet.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into CreateSmartContractWallet
            errorMessages.push("Failed to construct CreateSmartContractWallet: " + err)
        }

        try {
            if (typeof instance === "CreateExchangeWallet") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                CreateExchangeWallet.validateJSON(instance); // throw an exception if no match
                // create CreateExchangeWallet from JS object
                this.actualInstance = CreateExchangeWallet.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into CreateExchangeWallet
            errorMessages.push("Failed to construct CreateExchangeWallet: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `CreatedWallet` with oneOf schemas CreateCustodialWallet, CreateExchangeWallet, CreateMpcWallet, CreateSmartContractWallet. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `CreatedWallet` with oneOf schemas CreateCustodialWallet, CreateExchangeWallet, CreateMpcWallet, CreateSmartContractWallet. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>CreatedWallet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreatedWallet} obj Optional instance to populate.
     * @return {module:model/CreatedWallet} The populated <code>CreatedWallet</code> instance.
     */
    static constructFromObject(data, obj) {
        return new CreatedWallet(data);
    }

    /**
     * Gets the actual instance, which can be <code>CreateCustodialWallet</code>, <code>CreateExchangeWallet</code>, <code>CreateMpcWallet</code>, <code>CreateSmartContractWallet</code>.
     * @return {(module:model/CreateCustodialWallet|module:model/CreateExchangeWallet|module:model/CreateMpcWallet|module:model/CreateSmartContractWallet)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>CreateCustodialWallet</code>, <code>CreateExchangeWallet</code>, <code>CreateMpcWallet</code>, <code>CreateSmartContractWallet</code>.
     * @param {(module:model/CreateCustodialWallet|module:model/CreateExchangeWallet|module:model/CreateMpcWallet|module:model/CreateSmartContractWallet)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = CreatedWallet.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of CreatedWallet from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/CreatedWallet} An instance of CreatedWallet.
     */
    static fromJSON = function(json_string){
        return CreatedWallet.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * The wallet name.
 * @member {String} name
 */
CreatedWallet.prototype['name'] = undefined;

/**
 * @member {module:model/WalletType} wallet_type
 */
CreatedWallet.prototype['wallet_type'] = undefined;

/**
 * @member {module:model/WalletSubtype} wallet_subtype
 */
CreatedWallet.prototype['wallet_subtype'] = undefined;

/**
 * The ID of the owning vault. You can call [List all vaults](/v2/api-references/wallets--mpc-wallets/list-all-vaults) to retrieve all vault IDs under your organization.
 * @member {String} vault_id
 */
CreatedWallet.prototype['vault_id'] = undefined;

/**
 * @member {module:model/ExchangeId} exchange_id
 */
CreatedWallet.prototype['exchange_id'] = undefined;

/**
 * The API key of your exchange account.
 * @member {String} apikey
 */
CreatedWallet.prototype['apikey'] = undefined;

/**
 * The API secret of your exchange account.
 * @member {String} secret
 */
CreatedWallet.prototype['secret'] = undefined;

/**
 * The passphrase of your exchange account.
 * @member {String} passphrase
 */
CreatedWallet.prototype['passphrase'] = undefined;

/**
 * The memo you use when applying for the API key of your exchange account.
 * @member {String} memo
 */
CreatedWallet.prototype['memo'] = undefined;

/**
 * The identifier of your exchange account. - For Binance, this is email address of your exchange account. - For OKX, this is the user name of your exchange account. 
 * @member {String} account_identify
 */
CreatedWallet.prototype['account_identify'] = undefined;

/**
 * The GA code for the exchange.
 * @member {String} ga_code
 */
CreatedWallet.prototype['ga_code'] = undefined;

/**
 * The ID of the Exchange Wallet (Main Account).
 * @member {String} main_wallet_id
 */
CreatedWallet.prototype['main_wallet_id'] = undefined;


CreatedWallet.OneOf = ["CreateCustodialWallet", "CreateExchangeWallet", "CreateMpcWallet", "CreateSmartContractWallet"];

export default CreatedWallet;

