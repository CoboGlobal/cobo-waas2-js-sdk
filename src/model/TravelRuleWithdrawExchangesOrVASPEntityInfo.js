/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SelectedEntityType from './SelectedEntityType';
import TravelRuleWithdrawLegalEntity from './TravelRuleWithdrawLegalEntity';
import TravelRuleWithdrawNaturalEntity from './TravelRuleWithdrawNaturalEntity';

/**
 * The TravelRuleWithdrawExchangesOrVASPEntityInfo model module.
 * @module model/TravelRuleWithdrawExchangesOrVASPEntityInfo
 */
class TravelRuleWithdrawExchangesOrVASPEntityInfo {
    /**
     * Constructs a new <code>TravelRuleWithdrawExchangesOrVASPEntityInfo</code>.
     * @alias module:model/TravelRuleWithdrawExchangesOrVASPEntityInfo
     * @param {(module:model/TravelRuleWithdrawLegalEntity|module:model/TravelRuleWithdrawNaturalEntity)} instance The actual instance to initialize TravelRuleWithdrawExchangesOrVASPEntityInfo.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        var discriminatorValue = instance["selected_entity_type"];

        if (discriminatorValue) {
            switch(discriminatorValue) {
                case "LEGAL":
                    this.actualInstance = TravelRuleWithdrawLegalEntity.constructFromObject(instance);
                    match++;
                    break;
                case "NATURAL":
                    this.actualInstance = TravelRuleWithdrawNaturalEntity.constructFromObject(instance);
                    match++;
                    break;
                default:
                    errorMessages.push("Unrecognized discriminator value: " + discriminatorValue);
                    break;
            }
            return;
        }

        try {
            if (instance instanceof TravelRuleWithdrawLegalEntity) {
                this.actualInstance = instance;
            } else if(!!TravelRuleWithdrawLegalEntity.validateJSON && TravelRuleWithdrawLegalEntity.validateJSON(instance)){
                // plain JS object
                // create TravelRuleWithdrawLegalEntity from JS object
                this.actualInstance = TravelRuleWithdrawLegalEntity.constructFromObject(instance);
            } else {
                if(TravelRuleWithdrawLegalEntity.constructFromObject(instance)) {
                    if (!!TravelRuleWithdrawLegalEntity.constructFromObject(instance).toJSON) {
                        if (TravelRuleWithdrawLegalEntity.constructFromObject(instance).toJSON()) {
                            this.actualInstance = TravelRuleWithdrawLegalEntity.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = TravelRuleWithdrawLegalEntity.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TravelRuleWithdrawLegalEntity
            errorMessages.push("Failed to construct TravelRuleWithdrawLegalEntity: " + err)
        }

        try {
            if (instance instanceof TravelRuleWithdrawNaturalEntity) {
                this.actualInstance = instance;
            } else if(!!TravelRuleWithdrawNaturalEntity.validateJSON && TravelRuleWithdrawNaturalEntity.validateJSON(instance)){
                // plain JS object
                // create TravelRuleWithdrawNaturalEntity from JS object
                this.actualInstance = TravelRuleWithdrawNaturalEntity.constructFromObject(instance);
            } else {
                if(TravelRuleWithdrawNaturalEntity.constructFromObject(instance)) {
                    if (!!TravelRuleWithdrawNaturalEntity.constructFromObject(instance).toJSON) {
                        if (TravelRuleWithdrawNaturalEntity.constructFromObject(instance).toJSON()) {
                            this.actualInstance = TravelRuleWithdrawNaturalEntity.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = TravelRuleWithdrawNaturalEntity.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TravelRuleWithdrawNaturalEntity
            errorMessages.push("Failed to construct TravelRuleWithdrawNaturalEntity: " + err)
        }

        // if (match > 1) {
        //    throw new Error("Multiple matches found constructing `TravelRuleWithdrawExchangesOrVASPEntityInfo` with oneOf schemas TravelRuleWithdrawLegalEntity, TravelRuleWithdrawNaturalEntity. Input: " + JSON.stringify(instance));
        // } else
        if (match === 0) {
        //    this.actualInstance = null; // clear the actual instance in case there are multiple matches
        //    throw new Error("No match found constructing `TravelRuleWithdrawExchangesOrVASPEntityInfo` with oneOf schemas TravelRuleWithdrawLegalEntity, TravelRuleWithdrawNaturalEntity. Details: " +
        //                    errorMessages.join(", "));
        return;
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>TravelRuleWithdrawExchangesOrVASPEntityInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TravelRuleWithdrawExchangesOrVASPEntityInfo} obj Optional instance to populate.
     * @return {module:model/TravelRuleWithdrawExchangesOrVASPEntityInfo} The populated <code>TravelRuleWithdrawExchangesOrVASPEntityInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        return new TravelRuleWithdrawExchangesOrVASPEntityInfo(data);
    }

    /**
     * Gets the actual instance, which can be <code>TravelRuleWithdrawLegalEntity</code>, <code>TravelRuleWithdrawNaturalEntity</code>.
     * @return {(module:model/TravelRuleWithdrawLegalEntity|module:model/TravelRuleWithdrawNaturalEntity)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>TravelRuleWithdrawLegalEntity</code>, <code>TravelRuleWithdrawNaturalEntity</code>.
     * @param {(module:model/TravelRuleWithdrawLegalEntity|module:model/TravelRuleWithdrawNaturalEntity)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = TravelRuleWithdrawExchangesOrVASPEntityInfo.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of TravelRuleWithdrawExchangesOrVASPEntityInfo from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/TravelRuleWithdrawExchangesOrVASPEntityInfo} An instance of TravelRuleWithdrawExchangesOrVASPEntityInfo.
     */
    static fromJSON = function(json_string){
        return TravelRuleWithdrawExchangesOrVASPEntityInfo.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {module:model/SelectedEntityType} selected_entity_type
 */
TravelRuleWithdrawExchangesOrVASPEntityInfo.prototype['selected_entity_type'] = undefined;

/**
 * The legal name of the entity.
 * @member {String} legal_name
 */
TravelRuleWithdrawExchangesOrVASPEntityInfo.prototype['legal_name'] = undefined;

/**
 * The date of incorporation of the entity.
 * @member {Date} date_of_incorporation
 */
TravelRuleWithdrawExchangesOrVASPEntityInfo.prototype['date_of_incorporation'] = undefined;

/**
 * The place of incorporation of the entity.
 * @member {String} place_of_incorporation
 */
TravelRuleWithdrawExchangesOrVASPEntityInfo.prototype['place_of_incorporation'] = undefined;

/**
 * The first name of the natural person.
 * @member {String} first_name
 */
TravelRuleWithdrawExchangesOrVASPEntityInfo.prototype['first_name'] = undefined;

/**
 * The last name of the natural person.
 * @member {String} last_name
 */
TravelRuleWithdrawExchangesOrVASPEntityInfo.prototype['last_name'] = undefined;

/**
 * The date of birth of the natural person.
 * @member {Date} date_of_birth
 */
TravelRuleWithdrawExchangesOrVASPEntityInfo.prototype['date_of_birth'] = undefined;

/**
 * The place of birth of the natural person.
 * @member {String} place_of_birth
 */
TravelRuleWithdrawExchangesOrVASPEntityInfo.prototype['place_of_birth'] = undefined;


TravelRuleWithdrawExchangesOrVASPEntityInfo.OneOf = ["TravelRuleWithdrawLegalEntity", "TravelRuleWithdrawNaturalEntity"];

export default TravelRuleWithdrawExchangesOrVASPEntityInfo;

