/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TransactionEvmContractMethod from './TransactionEvmContractMethod';

/**
 * The TransactionEvmCalldataInfo model module.
 * @module model/TransactionEvmCalldataInfo
 */
class TransactionEvmCalldataInfo {
    /**
     * Constructs a new <code>TransactionEvmCalldataInfo</code>.
     * @alias module:model/TransactionEvmCalldataInfo
     */
    constructor() { 
        
        TransactionEvmCalldataInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TransactionEvmCalldataInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransactionEvmCalldataInfo} obj Optional instance to populate.
     * @return {module:model/TransactionEvmCalldataInfo} The populated <code>TransactionEvmCalldataInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransactionEvmCalldataInfo();

            if (data.hasOwnProperty('chain_id')) {
                obj['chain_id'] = ApiClient.convertToType(data['chain_id'], 'String');
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('impl_address')) {
                obj['impl_address'] = ApiClient.convertToType(data['impl_address'], 'String');
            }
            if (data.hasOwnProperty('impl_name')) {
                obj['impl_name'] = ApiClient.convertToType(data['impl_name'], 'String');
            }
            if (data.hasOwnProperty('proxy')) {
                obj['proxy'] = ApiClient.convertToType(data['proxy'], 'Boolean');
            }
            if (data.hasOwnProperty('method')) {
                obj['method'] = TransactionEvmContractMethod.constructFromObject(data['method']);
            }
            if (data.hasOwnProperty('params')) {
                obj['params'] = ApiClient.convertToType(data['params'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransactionEvmCalldataInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransactionEvmCalldataInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['chain_id'] && !(typeof data['chain_id'] === 'string' || data['chain_id'] instanceof String)) {
            throw new Error("Expected the field `chain_id` to be a primitive type in the JSON string but got " + data['chain_id']);
        }
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['impl_address'] && !(typeof data['impl_address'] === 'string' || data['impl_address'] instanceof String)) {
            throw new Error("Expected the field `impl_address` to be a primitive type in the JSON string but got " + data['impl_address']);
        }
        // ensure the json data is a string
        if (data['impl_name'] && !(typeof data['impl_name'] === 'string' || data['impl_name'] instanceof String)) {
            throw new Error("Expected the field `impl_name` to be a primitive type in the JSON string but got " + data['impl_name']);
        }
        // validate the optional field `method`
        if (data['method']) { // data not null
          if (!!TransactionEvmContractMethod.validateJSON) {
            TransactionEvmContractMethod.validateJSON(data['method']);
          }
        }
        // ensure the json data is a string
        if (data['params'] && !(typeof data['params'] === 'string' || data['params'] instanceof String)) {
            throw new Error("Expected the field `params` to be a primitive type in the JSON string but got " + data['params']);
        }

        return true;
    }


}



/**
 * The ID of the chain on which the smart contract is issued.
 * @member {String} chain_id
 */
TransactionEvmCalldataInfo.prototype['chain_id'] = undefined;

/**
 * The address of the smart contract.
 * @member {String} address
 */
TransactionEvmCalldataInfo.prototype['address'] = undefined;

/**
 * The name of the smart contract.
 * @member {String} name
 */
TransactionEvmCalldataInfo.prototype['name'] = undefined;

/**
 * The address of the implementation smart contract. This property is applicable only when the specified smart contract is a proxy contract.
 * @member {String} impl_address
 */
TransactionEvmCalldataInfo.prototype['impl_address'] = undefined;

/**
 * The name of the implementation smart contract. This property is applicable only when the specified smart contract is a proxy contract.
 * @member {String} impl_name
 */
TransactionEvmCalldataInfo.prototype['impl_name'] = undefined;

/**
 * Whether the specified smart contract address is a proxy contract. - `true`: The specified smart contract address is a proxy contract. - `false`: The specified smart contract address is not a proxy contract. 
 * @member {Boolean} proxy
 */
TransactionEvmCalldataInfo.prototype['proxy'] = undefined;

/**
 * @member {module:model/TransactionEvmContractMethod} method
 */
TransactionEvmCalldataInfo.prototype['method'] = undefined;

/**
 * The parameters of the contract method are represented as a JSON array of arrays. Each element in the outer array is itself an array containing three elements that provide detailed information about a specific parameter: - Parameter name: The unique identifier of the parameter, such as `kind`, `swaps`, and `to`. - Parameter type: The Solidity data type of the parameter, such as `uint8`, `tuple[]`, `address[]`, and `int256[]`. - Parameter value: The actual value of the parameter. If the parameter type is a basic type such as `uint256` or `address`, this value is a single element. If the parameter type is a complex type such as `tuple[]` or `address[]`, the value is a nested array, with each inner array containing parameter names, types, and values. 
 * @member {String} params
 */
TransactionEvmCalldataInfo.prototype['params'] = undefined;






export default TransactionEvmCalldataInfo;

