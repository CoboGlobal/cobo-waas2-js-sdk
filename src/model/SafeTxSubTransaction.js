/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SafeTxDecodedData from './SafeTxDecodedData';

/**
 * The SafeTxSubTransaction model module.
 * @module model/SafeTxSubTransaction
 */
class SafeTxSubTransaction {
    /**
     * Constructs a new <code>SafeTxSubTransaction</code>.
     * The information about the sub-transaction.
     * @alias module:model/SafeTxSubTransaction
     */
    constructor() { 
        
        SafeTxSubTransaction.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SafeTxSubTransaction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SafeTxSubTransaction} obj Optional instance to populate.
     * @return {module:model/SafeTxSubTransaction} The populated <code>SafeTxSubTransaction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SafeTxSubTransaction();

            if (data.hasOwnProperty('operation')) {
                obj['operation'] = ApiClient.convertToType(data['operation'], 'String');
            }
            if (data.hasOwnProperty('to')) {
                obj['to'] = ApiClient.convertToType(data['to'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
            if (data.hasOwnProperty('wei')) {
                obj['wei'] = ApiClient.convertToType(data['wei'], 'String');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], 'String');
            }
            if (data.hasOwnProperty('data_decoded')) {
                obj['data_decoded'] = SafeTxDecodedData.constructFromObject(data['data_decoded']);
            }
            if (data.hasOwnProperty('to_contract_name')) {
                obj['to_contract_name'] = ApiClient.convertToType(data['to_contract_name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SafeTxSubTransaction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SafeTxSubTransaction</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['operation'] && !(typeof data['operation'] === 'string' || data['operation'] instanceof String)) {
            throw new Error("Expected the field `operation` to be a primitive type in the JSON string but got " + data['operation']);
        }
        // ensure the json data is a string
        if (data['to'] && !(typeof data['to'] === 'string' || data['to'] instanceof String)) {
            throw new Error("Expected the field `to` to be a primitive type in the JSON string but got " + data['to']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }
        // ensure the json data is a string
        if (data['wei'] && !(typeof data['wei'] === 'string' || data['wei'] instanceof String)) {
            throw new Error("Expected the field `wei` to be a primitive type in the JSON string but got " + data['wei']);
        }
        // ensure the json data is a string
        if (data['data'] && !(typeof data['data'] === 'string' || data['data'] instanceof String)) {
            throw new Error("Expected the field `data` to be a primitive type in the JSON string but got " + data['data']);
        }
        // validate the optional field `data_decoded`
        if (data['data_decoded']) { // data not null
          if (!!SafeTxDecodedData.validateJSON) {
            SafeTxDecodedData.validateJSON(data['data_decoded']);
          }
        }
        // ensure the json data is a string
        if (data['to_contract_name'] && !(typeof data['to_contract_name'] === 'string' || data['to_contract_name'] instanceof String)) {
            throw new Error("Expected the field `to_contract_name` to be a primitive type in the JSON string but got " + data['to_contract_name']);
        }

        return true;
    }


}



/**
 * The type of operation in the sub-transaction.
 * @member {String} operation
 */
SafeTxSubTransaction.prototype['operation'] = undefined;

/**
 * The destination address of the sub-transaction.
 * @member {String} to
 */
SafeTxSubTransaction.prototype['to'] = undefined;

/**
 * The human-readable transaction value, for example, `1 ETH`.
 * @member {String} value
 */
SafeTxSubTransaction.prototype['value'] = undefined;

/**
 * The transaction amount in Wei
 * @member {String} wei
 */
SafeTxSubTransaction.prototype['wei'] = undefined;

/**
 * Encoded transaction data
 * @member {String} data
 */
SafeTxSubTransaction.prototype['data'] = undefined;

/**
 * @member {module:model/SafeTxDecodedData} data_decoded
 */
SafeTxSubTransaction.prototype['data_decoded'] = undefined;

/**
 * The name of the recipient contract (if available).
 * @member {String} to_contract_name
 */
SafeTxSubTransaction.prototype['to_contract_name'] = undefined;






export default SafeTxSubTransaction;

