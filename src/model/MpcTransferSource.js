/**
 * Cobo Wallet as a Service 2.0
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MpcSigningGroup from './MpcSigningGroup';
import MpcTransferSourceAccountInput from './MpcTransferSourceAccountInput';
import MpcTransferSourceUtxoInputs from './MpcTransferSourceUtxoInputs';
import WalletSubtype from './WalletSubtype';

/**
 * The MpcTransferSource model module.
 * @module model/MpcTransferSource
 * @version 0.1.0
 */
class MpcTransferSource {
    /**
     * Constructs a new <code>MpcTransferSource</code>.
     * The base data for transfer source.
     * @alias module:model/MpcTransferSource
     * @param sourceType {module:model/WalletSubtype} 
     * @param walletId {String} Unique id of the wallet to transfer from.
     */
    constructor(sourceType, walletId) { 
        
        MpcTransferSource.initialize(this, sourceType, walletId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, sourceType, walletId) { 
        obj['source_type'] = sourceType;
        obj['wallet_id'] = walletId;
    }

    /**
     * Constructs a <code>MpcTransferSource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MpcTransferSource} obj Optional instance to populate.
     * @return {module:model/MpcTransferSource} The populated <code>MpcTransferSource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MpcTransferSource();

            if (data.hasOwnProperty('source_type')) {
                obj['source_type'] = WalletSubtype.constructFromObject(data['source_type']);
            }
            if (data.hasOwnProperty('wallet_id')) {
                obj['wallet_id'] = ApiClient.convertToType(data['wallet_id'], 'String');
            }
            if (data.hasOwnProperty('account_input')) {
                obj['account_input'] = MpcTransferSourceAccountInput.constructFromObject(data['account_input']);
            }
            if (data.hasOwnProperty('utxo_inputs')) {
                obj['utxo_inputs'] = MpcTransferSourceUtxoInputs.constructFromObject(data['utxo_inputs']);
            }
            if (data.hasOwnProperty('mpc_used_key_group')) {
                obj['mpc_used_key_group'] = MpcSigningGroup.constructFromObject(data['mpc_used_key_group']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MpcTransferSource</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MpcTransferSource</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MpcTransferSource.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['wallet_id'] && !(typeof data['wallet_id'] === 'string' || data['wallet_id'] instanceof String)) {
            throw new Error("Expected the field `wallet_id` to be a primitive type in the JSON string but got " + data['wallet_id']);
        }
        // validate the optional field `account_input`
        if (data['account_input']) { // data not null
          MpcTransferSourceAccountInput.validateJSON(data['account_input']);
        }
        // validate the optional field `utxo_inputs`
        if (data['utxo_inputs']) { // data not null
          MpcTransferSourceUtxoInputs.validateJSON(data['utxo_inputs']);
        }
        // validate the optional field `mpc_used_key_group`
        if (data['mpc_used_key_group']) { // data not null
          MpcSigningGroup.validateJSON(data['mpc_used_key_group']);
        }

        return true;
    }


}

MpcTransferSource.RequiredProperties = ["source_type", "wallet_id"];

/**
 * @member {module:model/WalletSubtype} source_type
 */
MpcTransferSource.prototype['source_type'] = undefined;

/**
 * Unique id of the wallet to transfer from.
 * @member {String} wallet_id
 */
MpcTransferSource.prototype['wallet_id'] = undefined;

/**
 * @member {module:model/MpcTransferSourceAccountInput} account_input
 */
MpcTransferSource.prototype['account_input'] = undefined;

/**
 * @member {module:model/MpcTransferSourceUtxoInputs} utxo_inputs
 */
MpcTransferSource.prototype['utxo_inputs'] = undefined;

/**
 * @member {module:model/MpcSigningGroup} mpc_used_key_group
 */
MpcTransferSource.prototype['mpc_used_key_group'] = undefined;






export default MpcTransferSource;

