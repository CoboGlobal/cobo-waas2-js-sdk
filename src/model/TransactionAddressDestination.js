/**
 * Cobo Wallet as a Service 2.0
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TransactionAddressDestinationAccountOutput from './TransactionAddressDestinationAccountOutput';
import TransactionAddressDestinationUtxoOutputs from './TransactionAddressDestinationUtxoOutputs';
import TransactionDestinationType from './TransactionDestinationType';

/**
 * The TransactionAddressDestination model module.
 * @module model/TransactionAddressDestination
 * @version 0.1.0
 */
class TransactionAddressDestination {
    /**
     * Constructs a new <code>TransactionAddressDestination</code>.
     * The information about the transaction destination.
     * @alias module:model/TransactionAddressDestination
     * @param destinationType {module:model/TransactionDestinationType} 
     * @param tokenId {String} The token ID, which is the unique identifier of a token. You can retrieve the IDs of all the tokens you can use by calling [List organization enabled tokens](/v2/api-references/wallets/list-organization-enabled-tokens).
     */
    constructor(destinationType, tokenId) { 
        
        TransactionAddressDestination.initialize(this, destinationType, tokenId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, destinationType, tokenId) { 
        obj['destination_type'] = destinationType;
        obj['token_id'] = tokenId;
    }

    /**
     * Constructs a <code>TransactionAddressDestination</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransactionAddressDestination} obj Optional instance to populate.
     * @return {module:model/TransactionAddressDestination} The populated <code>TransactionAddressDestination</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransactionAddressDestination();

            if (data.hasOwnProperty('destination_type')) {
                obj['destination_type'] = TransactionDestinationType.constructFromObject(data['destination_type']);
            }
            if (data.hasOwnProperty('token_id')) {
                obj['token_id'] = ApiClient.convertToType(data['token_id'], 'String');
            }
            if (data.hasOwnProperty('asset_id')) {
                obj['asset_id'] = ApiClient.convertToType(data['asset_id'], 'String');
            }
            if (data.hasOwnProperty('account_output')) {
                obj['account_output'] = TransactionAddressDestinationAccountOutput.constructFromObject(data['account_output']);
            }
            if (data.hasOwnProperty('utxo_outputs')) {
                obj['utxo_outputs'] = TransactionAddressDestinationUtxoOutputs.constructFromObject(data['utxo_outputs']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransactionAddressDestination</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransactionAddressDestination</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TransactionAddressDestination.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['token_id'] && !(typeof data['token_id'] === 'string' || data['token_id'] instanceof String)) {
            throw new Error("Expected the field `token_id` to be a primitive type in the JSON string but got " + data['token_id']);
        }
        // ensure the json data is a string
        if (data['asset_id'] && !(typeof data['asset_id'] === 'string' || data['asset_id'] instanceof String)) {
            throw new Error("Expected the field `asset_id` to be a primitive type in the JSON string but got " + data['asset_id']);
        }
        // validate the optional field `account_output`
        if (data['account_output']) { // data not null
          TransactionAddressDestinationAccountOutput.validateJSON(data['account_output']);
        }
        // validate the optional field `utxo_outputs`
        if (data['utxo_outputs']) { // data not null
          TransactionAddressDestinationUtxoOutputs.validateJSON(data['utxo_outputs']);
        }

        return true;
    }


}

TransactionAddressDestination.RequiredProperties = ["destination_type", "token_id"];

/**
 * @member {module:model/TransactionDestinationType} destination_type
 */
TransactionAddressDestination.prototype['destination_type'] = undefined;

/**
 * The token ID, which is the unique identifier of a token. You can retrieve the IDs of all the tokens you can use by calling [List organization enabled tokens](/v2/api-references/wallets/list-organization-enabled-tokens).
 * @member {String} token_id
 */
TransactionAddressDestination.prototype['token_id'] = undefined;

/**
 * (This concept applies to Exchange Wallets only) The asset ID. An asset is a digital representation of a valuable resource on a blockchain network. Exchange Wallets group your holdings by asset, even if the same asset exists on different blockchains. For example, if your Exchange Wallet has 1 USDT on Ethereum and 1 USDT on TRON, then your asset balance is 2 USDT.
 * @member {String} asset_id
 */
TransactionAddressDestination.prototype['asset_id'] = undefined;

/**
 * @member {module:model/TransactionAddressDestinationAccountOutput} account_output
 */
TransactionAddressDestination.prototype['account_output'] = undefined;

/**
 * @member {module:model/TransactionAddressDestinationUtxoOutputs} utxo_outputs
 */
TransactionAddressDestination.prototype['utxo_outputs'] = undefined;






export default TransactionAddressDestination;

