/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Scopes from './Scopes';

/**
 * The RoleScopes model module.
 * @module model/RoleScopes
 */
class RoleScopes {
    /**
     * Constructs a new <code>RoleScopes</code>.
     * @alias module:model/RoleScopes
     * @param role_name {String} The user role associated with this API key.
     * @param scopes {module:model/Scopes} 
     */
    constructor(role_name, scopes) { 
        
        RoleScopes.initialize(this, role_name, scopes);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, role_name, scopes) { 
        obj['role_name'] = role_name;
        obj['scopes'] = scopes;
    }

    /**
     * Constructs a <code>RoleScopes</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RoleScopes} obj Optional instance to populate.
     * @return {module:model/RoleScopes} The populated <code>RoleScopes</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RoleScopes();

            if (data.hasOwnProperty('role_name')) {
                obj['role_name'] = ApiClient.convertToType(data['role_name'], 'String');
            }
            if (data.hasOwnProperty('scopes')) {
                obj['scopes'] = Scopes.constructFromObject(data['scopes']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RoleScopes</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RoleScopes</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RoleScopes.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['role_name'] && !(typeof data['role_name'] === 'string' || data['role_name'] instanceof String)) {
            throw new Error("Expected the field `role_name` to be a primitive type in the JSON string but got " + data['role_name']);
        }
        // validate the optional field `scopes`
        if (data['scopes']) { // data not null
          if (!!Scopes.validateJSON) {
            Scopes.validateJSON(data['scopes']);
          }
        }

        return true;
    }


}

RoleScopes.RequiredProperties = ["role_name", "scopes"];

/**
 * The user role associated with this API key.
 * @member {String} role_name
 */
RoleScopes.prototype['role_name'] = undefined;

/**
 * @member {module:model/Scopes} scopes
 */
RoleScopes.prototype['scopes'] = undefined;






export default RoleScopes;

