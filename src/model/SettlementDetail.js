/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BankAccount from './BankAccount';
import PaymentTransaction from './PaymentTransaction';
import SettleStatus from './SettleStatus';

/**
 * The SettlementDetail model module.
 * @module model/SettlementDetail
 */
class SettlementDetail {
    /**
     * Constructs a new <code>SettlementDetail</code>.
     * @alias module:model/SettlementDetail
     */
    constructor() { 
        
        SettlementDetail.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SettlementDetail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SettlementDetail} obj Optional instance to populate.
     * @return {module:model/SettlementDetail} The populated <code>SettlementDetail</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SettlementDetail();

            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('token_id')) {
                obj['token_id'] = ApiClient.convertToType(data['token_id'], 'String');
            }
            if (data.hasOwnProperty('chain_id')) {
                obj['chain_id'] = ApiClient.convertToType(data['chain_id'], 'String');
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = SettleStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('bank_account')) {
                obj['bank_account'] = BankAccount.constructFromObject(data['bank_account']);
            }
            if (data.hasOwnProperty('transactions')) {
                obj['transactions'] = ApiClient.convertToType(data['transactions'], [PaymentTransaction]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SettlementDetail</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SettlementDetail</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['token_id'] && !(typeof data['token_id'] === 'string' || data['token_id'] instanceof String)) {
            throw new Error("Expected the field `token_id` to be a primitive type in the JSON string but got " + data['token_id']);
        }
        // ensure the json data is a string
        if (data['chain_id'] && !(typeof data['chain_id'] === 'string' || data['chain_id'] instanceof String)) {
            throw new Error("Expected the field `chain_id` to be a primitive type in the JSON string but got " + data['chain_id']);
        }
        // ensure the json data is a string
        if (data['amount'] && !(typeof data['amount'] === 'string' || data['amount'] instanceof String)) {
            throw new Error("Expected the field `amount` to be a primitive type in the JSON string but got " + data['amount']);
        }
        // validate the optional field `bank_account`
        if (data['bank_account']) { // data not null
          if (!!BankAccount.validateJSON) {
            BankAccount.validateJSON(data['bank_account']);
          }
        }
        if (data['transactions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['transactions'])) {
                throw new Error("Expected the field `transactions` to be an array in the JSON data but got " + data['transactions']);
            }
            // validate the optional field `transactions` (array)
            for (const item of data['transactions']) {
                PaymentTransaction.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The fiat currency for the settlement.
 * @member {String} currency
 */
SettlementDetail.prototype['currency'] = undefined;

/**
 * The ID of the cryptocurrency settled.
 * @member {String} token_id
 */
SettlementDetail.prototype['token_id'] = undefined;

/**
 * The ID of the blockchain network on which the settlement occurred.
 * @member {String} chain_id
 */
SettlementDetail.prototype['chain_id'] = undefined;

/**
 * The settlement amount.  - If `token_id` is specified, this represents the settlement amount in the specified cryptocurrency.  - If `token_id` is not specified, this represents the settlement amount in the specified fiat currency. 
 * @member {String} amount
 */
SettlementDetail.prototype['amount'] = undefined;

/**
 * @member {module:model/SettleStatus} status
 */
SettlementDetail.prototype['status'] = undefined;

/**
 * @member {module:model/BankAccount} bank_account
 */
SettlementDetail.prototype['bank_account'] = undefined;

/**
 * An array of transactions associated with this settlement request. Each transaction represents a separate blockchain operation related to the settlement process.
 * @member {Array.<module:model/PaymentTransaction>} transactions
 */
SettlementDetail.prototype['transactions'] = undefined;






export default SettlementDetail;

