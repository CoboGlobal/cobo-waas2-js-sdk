/**
 * Cobo Wallet as a Service 2.0
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EvmEip1559TransactionFee from './EvmEip1559TransactionFee';
import EvmLegacyTransactionFee from './EvmLegacyTransactionFee';
import FeeType from './FeeType';
import FixedFee from './FixedFee';
import UtxoTransactionFee from './UtxoTransactionFee';

/**
 * The TransactionTransferFee model module.
 * @module model/TransactionTransferFee
 * @version 0.2.5
 */
class TransactionTransferFee {
    /**
     * Constructs a new <code>TransactionTransferFee</code>.
     * @alias module:model/TransactionTransferFee
     * @param {(module:model/EvmEip1559TransactionFee|module:model/EvmLegacyTransactionFee|module:model/FixedFee|module:model/UtxoTransactionFee)} instance The actual instance to initialize TransactionTransferFee.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "EvmEip1559TransactionFee") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                EvmEip1559TransactionFee.validateJSON(instance); // throw an exception if no match
                // create EvmEip1559TransactionFee from JS object
                this.actualInstance = EvmEip1559TransactionFee.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into EvmEip1559TransactionFee
            errorMessages.push("Failed to construct EvmEip1559TransactionFee: " + err)
        }

        try {
            if (typeof instance === "EvmLegacyTransactionFee") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                EvmLegacyTransactionFee.validateJSON(instance); // throw an exception if no match
                // create EvmLegacyTransactionFee from JS object
                this.actualInstance = EvmLegacyTransactionFee.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into EvmLegacyTransactionFee
            errorMessages.push("Failed to construct EvmLegacyTransactionFee: " + err)
        }

        try {
            if (typeof instance === "UtxoTransactionFee") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                UtxoTransactionFee.validateJSON(instance); // throw an exception if no match
                // create UtxoTransactionFee from JS object
                this.actualInstance = UtxoTransactionFee.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into UtxoTransactionFee
            errorMessages.push("Failed to construct UtxoTransactionFee: " + err)
        }

        try {
            if (typeof instance === "FixedFee") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                FixedFee.validateJSON(instance); // throw an exception if no match
                // create FixedFee from JS object
                this.actualInstance = FixedFee.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into FixedFee
            errorMessages.push("Failed to construct FixedFee: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `TransactionTransferFee` with oneOf schemas EvmEip1559TransactionFee, EvmLegacyTransactionFee, FixedFee, UtxoTransactionFee. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `TransactionTransferFee` with oneOf schemas EvmEip1559TransactionFee, EvmLegacyTransactionFee, FixedFee, UtxoTransactionFee. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>TransactionTransferFee</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransactionTransferFee} obj Optional instance to populate.
     * @return {module:model/TransactionTransferFee} The populated <code>TransactionTransferFee</code> instance.
     */
    static constructFromObject(data, obj) {
        return new TransactionTransferFee(data);
    }

    /**
     * Gets the actual instance, which can be <code>EvmEip1559TransactionFee</code>, <code>EvmLegacyTransactionFee</code>, <code>FixedFee</code>, <code>UtxoTransactionFee</code>.
     * @return {(module:model/EvmEip1559TransactionFee|module:model/EvmLegacyTransactionFee|module:model/FixedFee|module:model/UtxoTransactionFee)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>EvmEip1559TransactionFee</code>, <code>EvmLegacyTransactionFee</code>, <code>FixedFee</code>, <code>UtxoTransactionFee</code>.
     * @param {(module:model/EvmEip1559TransactionFee|module:model/EvmLegacyTransactionFee|module:model/FixedFee|module:model/UtxoTransactionFee)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = TransactionTransferFee.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of TransactionTransferFee from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/TransactionTransferFee} An instance of TransactionTransferFee.
     */
    static fromJSON = function(json_string){
        return TransactionTransferFee.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {module:model/FeeType} fee_type
 */
TransactionTransferFee.prototype['fee_type'] = undefined;

/**
 * The token ID of the transaction fee.
 * @member {String} token_id
 */
TransactionTransferFee.prototype['token_id'] = undefined;

/**
 * The maximum priority fee, in wei. The maximum priority fee represents the highest amount of miner tips that you are willing to pay for your transaction.
 * @member {String} max_priority_fee
 */
TransactionTransferFee.prototype['max_priority_fee'] = undefined;

/**
 * The base fee price of the chain, in wei.
 * @member {String} base_fee
 */
TransactionTransferFee.prototype['base_fee'] = undefined;

/**
 * The gas limit. It represents the maximum number of gas units that you are willing to pay for the execution of a transaction or Ethereum Virtual Machine (EVM) operation. The gas unit cost of each operation varies.
 * @member {String} gas_limit
 * @default '21000'
 */
TransactionTransferFee.prototype['gas_limit'] = '21000';

/**
 * The gas price, in wei. The gas price represents the amount of ETH that must be paid to validators for processing transactions.
 * @member {String} gas_price
 */
TransactionTransferFee.prototype['gas_price'] = undefined;

/**
 * The fee rate in sat/vByte. The fee rate represents the satoshis you are willing to pay for each byte of data that your transaction will consume on the blockchain.
 * @member {String} fee_rate
 */
TransactionTransferFee.prototype['fee_rate'] = undefined;

/**
 * The maximum fee that you are willing to pay for the transaction. The transaction will fail if the transaction fee exceeds the maximum fee.
 * @member {String} max_fee_amount
 */
TransactionTransferFee.prototype['max_fee_amount'] = undefined;


TransactionTransferFee.OneOf = ["EvmEip1559TransactionFee", "EvmLegacyTransactionFee", "FixedFee", "UtxoTransactionFee"];

export default TransactionTransferFee;

