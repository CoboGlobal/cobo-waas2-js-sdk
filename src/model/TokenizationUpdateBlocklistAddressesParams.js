/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TokenizationTokenOperationSource from './TokenizationTokenOperationSource';
import TokenizationUpdateAddressAction from './TokenizationUpdateAddressAction';
import TokenizationUpdateBlocklistAddressesParamsAddressesInner from './TokenizationUpdateBlocklistAddressesParamsAddressesInner';

/**
 * The TokenizationUpdateBlocklistAddressesParams model module.
 * @module model/TokenizationUpdateBlocklistAddressesParams
 */
class TokenizationUpdateBlocklistAddressesParams {
    /**
     * Constructs a new <code>TokenizationUpdateBlocklistAddressesParams</code>.
     * @alias module:model/TokenizationUpdateBlocklistAddressesParams
     * @param action {module:model/TokenizationUpdateAddressAction} 
     * @param source {module:model/TokenizationTokenOperationSource} 
     * @param addresses {Array.<module:model/TokenizationUpdateBlocklistAddressesParamsAddressesInner>} A list of addresses to manage. For 'add' operations, notes can be provided. For 'remove' operations, notes are ignored.
     */
    constructor(action, source, addresses) { 
        
        TokenizationUpdateBlocklistAddressesParams.initialize(this, action, source, addresses);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, action, source, addresses) { 
        obj['action'] = action;
        obj['source'] = source;
        obj['addresses'] = addresses;
    }

    /**
     * Constructs a <code>TokenizationUpdateBlocklistAddressesParams</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TokenizationUpdateBlocklistAddressesParams} obj Optional instance to populate.
     * @return {module:model/TokenizationUpdateBlocklistAddressesParams} The populated <code>TokenizationUpdateBlocklistAddressesParams</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TokenizationUpdateBlocklistAddressesParams();

            if (data.hasOwnProperty('action')) {
                obj['action'] = TokenizationUpdateAddressAction.constructFromObject(data['action']);
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = TokenizationTokenOperationSource.constructFromObject(data['source']);
            }
            if (data.hasOwnProperty('addresses')) {
                obj['addresses'] = ApiClient.convertToType(data['addresses'], [TokenizationUpdateBlocklistAddressesParamsAddressesInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TokenizationUpdateBlocklistAddressesParams</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TokenizationUpdateBlocklistAddressesParams</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TokenizationUpdateBlocklistAddressesParams.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `source`
        if (data['source']) { // data not null
          if (!!TokenizationTokenOperationSource.validateJSON) {
            TokenizationTokenOperationSource.validateJSON(data['source']);
          }
        }
        if (data['addresses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['addresses'])) {
                throw new Error("Expected the field `addresses` to be an array in the JSON data but got " + data['addresses']);
            }
            // validate the optional field `addresses` (array)
            for (const item of data['addresses']) {
                TokenizationUpdateBlocklistAddressesParamsAddressesInner.validateJSON(item);
            };
        }

        return true;
    }


}

TokenizationUpdateBlocklistAddressesParams.RequiredProperties = ["action", "source", "addresses"];

/**
 * @member {module:model/TokenizationUpdateAddressAction} action
 */
TokenizationUpdateBlocklistAddressesParams.prototype['action'] = undefined;

/**
 * @member {module:model/TokenizationTokenOperationSource} source
 */
TokenizationUpdateBlocklistAddressesParams.prototype['source'] = undefined;

/**
 * A list of addresses to manage. For 'add' operations, notes can be provided. For 'remove' operations, notes are ignored.
 * @member {Array.<module:model/TokenizationUpdateBlocklistAddressesParamsAddressesInner>} addresses
 */
TokenizationUpdateBlocklistAddressesParams.prototype['addresses'] = undefined;






export default TokenizationUpdateBlocklistAddressesParams;

