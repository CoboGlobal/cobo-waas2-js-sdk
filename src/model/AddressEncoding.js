/**
 * Cobo Wallet as a Service 2.0
 * Cobo WaaS 2.0 enables you to programmatically access Cobo's full suite of crypto wallet technologies with powerful and flexible access controls.  # Wallet technologies - Custodial Wallet - MPC Wallet - Smart Contract Wallet (Based on Safe{Wallet}) - Exchange Wallet  # Risk Control technologies - Workflow - Access Control List (ACL)  # Risk Control targets - Wallet Management   - User/team and their permission management   - Risk control configurations, e.g. whitelist, blacklist, rate-limiting etc. - Blockchain Interaction   - Crypto transfer   - Smart Contract Invocation  # Important HTTPS only. RESTful, resource oriented  # Get Started Set up your APIs or get authorization  # Authentication and Authorization CoboAuth  # Request and Response application/json  # Error Handling  ### Common error codes | Error Code | Description | | -- | -- |  ### API-specific error codes For error codes that are dedicated to a specific API, see the Error codes section in each API specification, for example, /v3/wallets.  # Rate and Usage Limiting  # Idempotent Request  # Pagination # Support [Developer Hub](https://cobo.com/developers) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
/**
* Enum class AddressEncoding.
* @enum {}
* @readonly
*/
export default class AddressEncoding {
    
        /**
         * value: "ENCODING_P2PKH"
         * @const
         */
        "P2PKH" = "ENCODING_P2PKH";

    
        /**
         * value: "ENCODING_P2SH_P2WPKH"
         * @const
         */
        "P2SH_P2WPKH" = "ENCODING_P2SH_P2WPKH";

    
        /**
         * value: "ENCODING_BECH32"
         * @const
         */
        "BECH32" = "ENCODING_BECH32";

    
        /**
         * value: "ENCODING_P2PKH_UNCOMPRESSED"
         * @const
         */
        "P2PKH_UNCOMPRESSED" = "ENCODING_P2PKH_UNCOMPRESSED";

    
        /**
         * value: "ENCODING_P2SH_P2MS"
         * @const
         */
        "P2SH_P2MS" = "ENCODING_P2SH_P2MS";

    
        /**
         * value: "ENCODING_P2SH_P2WSH_P2MS"
         * @const
         */
        "P2SH_P2WSH_P2MS" = "ENCODING_P2SH_P2WSH_P2MS";

    
        /**
         * value: "ENCODING_P2TR"
         * @const
         */
        "P2TR" = "ENCODING_P2TR";

    

    /**
    * Returns a <code>AddressEncoding</code> enum value from a Javascript object name.
    * @param {Object} data The plain JavaScript object containing the name of the enum value.
    * @return {module:model/AddressEncoding} The enum <code>AddressEncoding</code> value.
    */
    static constructFromObject(object) {
        return object;
    }
}

