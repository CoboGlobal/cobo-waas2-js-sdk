/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EstimatedFee from './EstimatedFee';
import StakingPoolType from './StakingPoolType';

/**
 * The EthStakeEstimatedFee model module.
 * @module model/EthStakeEstimatedFee
 */
class EthStakeEstimatedFee {
    /**
     * Constructs a new <code>EthStakeEstimatedFee</code>.
     * @alias module:model/EthStakeEstimatedFee
     */
    constructor() { 
        
        EthStakeEstimatedFee.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EthStakeEstimatedFee</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EthStakeEstimatedFee} obj Optional instance to populate.
     * @return {module:model/EthStakeEstimatedFee} The populated <code>EthStakeEstimatedFee</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EthStakeEstimatedFee();

            if (data.hasOwnProperty('pool_type')) {
                obj['pool_type'] = StakingPoolType.constructFromObject(data['pool_type']);
            }
            if (data.hasOwnProperty('fee')) {
                obj['fee'] = EstimatedFee.constructFromObject(data['fee']);
            }
            if (data.hasOwnProperty('validator_pubkeys')) {
                obj['validator_pubkeys'] = ApiClient.convertToType(data['validator_pubkeys'], ['String']);
            }
            if (data.hasOwnProperty('core_btc_staking_address')) {
                obj['core_btc_staking_address'] = ApiClient.convertToType(data['core_btc_staking_address'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EthStakeEstimatedFee</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EthStakeEstimatedFee</code>.
     */
    static validateJSON(data) {
        // validate the optional field `fee`
        if (data['fee']) { // data not null
          if (!!EstimatedFee.validateJSON) {
            EstimatedFee.validateJSON(data['fee']);
          }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['validator_pubkeys'])) {
            throw new Error("Expected the field `validator_pubkeys` to be an array in the JSON data but got " + data['validator_pubkeys']);
        }
        // ensure the json data is a string
        if (data['core_btc_staking_address'] && !(typeof data['core_btc_staking_address'] === 'string' || data['core_btc_staking_address'] instanceof String)) {
            throw new Error("Expected the field `core_btc_staking_address` to be a primitive type in the JSON string but got " + data['core_btc_staking_address']);
        }

        return true;
    }


}



/**
 * @member {module:model/StakingPoolType} pool_type
 */
EthStakeEstimatedFee.prototype['pool_type'] = undefined;

/**
 * @member {module:model/EstimatedFee} fee
 */
EthStakeEstimatedFee.prototype['fee'] = undefined;

/**
 * A list of public keys associated with the Ethereum validators for this staking operation.
 * @member {Array.<String>} validator_pubkeys
 */
EthStakeEstimatedFee.prototype['validator_pubkeys'] = undefined;

/**
 * P2WSH address generated for this staking operation(If the estimated fee is for core BTC staking).
 * @member {String} core_btc_staking_address
 */
EthStakeEstimatedFee.prototype['core_btc_staking_address'] = undefined;






export default EthStakeEstimatedFee;

