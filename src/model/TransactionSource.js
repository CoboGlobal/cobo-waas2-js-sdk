/**
 * Cobo Wallet as a Service 2.0
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExchangeId from './ExchangeId';
import MpcSigningGroup from './MpcSigningGroup';
import TransactionAddressSource from './TransactionAddressSource';
import TransactionCustodialWalletSource from './TransactionCustodialWalletSource';
import TransactionExchangeWalletSource from './TransactionExchangeWalletSource';
import TransactionFeeStationWalletSource from './TransactionFeeStationWalletSource';
import TransactionMPCWalletSource from './TransactionMPCWalletSource';
import TransactionMPCWalletSourceAccountInput from './TransactionMPCWalletSourceAccountInput';
import TransactionMPCWalletSourceUtxoInputsInner from './TransactionMPCWalletSourceUtxoInputsInner';
import TransactionSafeWalletSource from './TransactionSafeWalletSource';
import TransactionSafeWalletSourceDelegate from './TransactionSafeWalletSourceDelegate';
import TransactionSourceType from './TransactionSourceType';

/**
 * The TransactionSource model module.
 * @module model/TransactionSource
 * @version 0.2.6
 */
class TransactionSource {
    /**
     * Constructs a new <code>TransactionSource</code>.
     * @alias module:model/TransactionSource
     * @param {(module:model/TransactionAddressSource|module:model/TransactionCustodialWalletSource|module:model/TransactionExchangeWalletSource|module:model/TransactionFeeStationWalletSource|module:model/TransactionMPCWalletSource|module:model/TransactionSafeWalletSource)} instance The actual instance to initialize TransactionSource.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "TransactionAddressSource") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                TransactionAddressSource.validateJSON(instance); // throw an exception if no match
                // create TransactionAddressSource from JS object
                this.actualInstance = TransactionAddressSource.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TransactionAddressSource
            errorMessages.push("Failed to construct TransactionAddressSource: " + err)
        }

        try {
            if (typeof instance === "TransactionCustodialWalletSource") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                TransactionCustodialWalletSource.validateJSON(instance); // throw an exception if no match
                // create TransactionCustodialWalletSource from JS object
                this.actualInstance = TransactionCustodialWalletSource.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TransactionCustodialWalletSource
            errorMessages.push("Failed to construct TransactionCustodialWalletSource: " + err)
        }

        try {
            if (typeof instance === "TransactionMPCWalletSource") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                TransactionMPCWalletSource.validateJSON(instance); // throw an exception if no match
                // create TransactionMPCWalletSource from JS object
                this.actualInstance = TransactionMPCWalletSource.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TransactionMPCWalletSource
            errorMessages.push("Failed to construct TransactionMPCWalletSource: " + err)
        }

        try {
            if (typeof instance === "TransactionSafeWalletSource") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                TransactionSafeWalletSource.validateJSON(instance); // throw an exception if no match
                // create TransactionSafeWalletSource from JS object
                this.actualInstance = TransactionSafeWalletSource.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TransactionSafeWalletSource
            errorMessages.push("Failed to construct TransactionSafeWalletSource: " + err)
        }

        try {
            if (typeof instance === "TransactionExchangeWalletSource") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                TransactionExchangeWalletSource.validateJSON(instance); // throw an exception if no match
                // create TransactionExchangeWalletSource from JS object
                this.actualInstance = TransactionExchangeWalletSource.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TransactionExchangeWalletSource
            errorMessages.push("Failed to construct TransactionExchangeWalletSource: " + err)
        }

        try {
            if (typeof instance === "TransactionFeeStationWalletSource") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                TransactionFeeStationWalletSource.validateJSON(instance); // throw an exception if no match
                // create TransactionFeeStationWalletSource from JS object
                this.actualInstance = TransactionFeeStationWalletSource.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TransactionFeeStationWalletSource
            errorMessages.push("Failed to construct TransactionFeeStationWalletSource: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `TransactionSource` with oneOf schemas TransactionAddressSource, TransactionCustodialWalletSource, TransactionExchangeWalletSource, TransactionFeeStationWalletSource, TransactionMPCWalletSource, TransactionSafeWalletSource. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `TransactionSource` with oneOf schemas TransactionAddressSource, TransactionCustodialWalletSource, TransactionExchangeWalletSource, TransactionFeeStationWalletSource, TransactionMPCWalletSource, TransactionSafeWalletSource. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>TransactionSource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransactionSource} obj Optional instance to populate.
     * @return {module:model/TransactionSource} The populated <code>TransactionSource</code> instance.
     */
    static constructFromObject(data, obj) {
        return new TransactionSource(data);
    }

    /**
     * Gets the actual instance, which can be <code>TransactionAddressSource</code>, <code>TransactionCustodialWalletSource</code>, <code>TransactionExchangeWalletSource</code>, <code>TransactionFeeStationWalletSource</code>, <code>TransactionMPCWalletSource</code>, <code>TransactionSafeWalletSource</code>.
     * @return {(module:model/TransactionAddressSource|module:model/TransactionCustodialWalletSource|module:model/TransactionExchangeWalletSource|module:model/TransactionFeeStationWalletSource|module:model/TransactionMPCWalletSource|module:model/TransactionSafeWalletSource)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>TransactionAddressSource</code>, <code>TransactionCustodialWalletSource</code>, <code>TransactionExchangeWalletSource</code>, <code>TransactionFeeStationWalletSource</code>, <code>TransactionMPCWalletSource</code>, <code>TransactionSafeWalletSource</code>.
     * @param {(module:model/TransactionAddressSource|module:model/TransactionCustodialWalletSource|module:model/TransactionExchangeWalletSource|module:model/TransactionFeeStationWalletSource|module:model/TransactionMPCWalletSource|module:model/TransactionSafeWalletSource)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = TransactionSource.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of TransactionSource from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/TransactionSource} An instance of TransactionSource.
     */
    static fromJSON = function(json_string){
        return TransactionSource.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {module:model/TransactionSourceType} source_type
 */
TransactionSource.prototype['source_type'] = undefined;

/**
 * @member {module:model/TransactionMPCWalletSourceAccountInput} account_input
 */
TransactionSource.prototype['account_input'] = undefined;

/**
 * @member {Array.<module:model/TransactionMPCWalletSourceUtxoInputsInner>} utxo_inputs
 */
TransactionSource.prototype['utxo_inputs'] = undefined;

/**
 * The Wallet ID.
 * @member {String} wallet_id
 */
TransactionSource.prototype['wallet_id'] = undefined;

/**
 * @member {module:model/MpcSigningGroup} mpc_used_key_group
 */
TransactionSource.prototype['mpc_used_key_group'] = undefined;

/**
 * @member {module:model/TransactionSafeWalletSourceDelegate} delegate
 */
TransactionSource.prototype['delegate'] = undefined;

/**
 * @member {module:model/ExchangeId} exchange_id
 */
TransactionSource.prototype['exchange_id'] = undefined;

/**
 * The exchange trading account or a sub-wallet ID.
 * @member {String} sub_wallet_id
 */
TransactionSource.prototype['sub_wallet_id'] = undefined;


TransactionSource.OneOf = ["TransactionAddressSource", "TransactionCustodialWalletSource", "TransactionExchangeWalletSource", "TransactionFeeStationWalletSource", "TransactionMPCWalletSource", "TransactionSafeWalletSource"];

export default TransactionSource;

