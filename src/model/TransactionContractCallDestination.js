/**
 * Cobo Wallet as a Service 2.0
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TransactionDestinationType from './TransactionDestinationType';

/**
 * The TransactionContractCallDestination model module.
 * @module model/TransactionContractCallDestination
 * @version 0.4.4
 */
class TransactionContractCallDestination {
    /**
     * Constructs a new <code>TransactionContractCallDestination</code>.
     * The information about the transaction destination.
     * @alias module:model/TransactionContractCallDestination
     * @param destination_type {module:model/TransactionDestinationType} 
     * @param address {String} The destination address.
     * @param value {String} The quantity of the token in the transaction. For example, if you trade 1.5 ETH, then the value is `1.5`. 
     * @param calldata {Blob} The data that is used to invoke a specific function or method within the specified contract at the destination address. 
     */
    constructor(destination_type, address, value, calldata) { 
        
        TransactionContractCallDestination.initialize(this, destination_type, address, value, calldata);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, destination_type, address, value, calldata) { 
        obj['destination_type'] = destination_type;
        obj['address'] = address;
        obj['value'] = value;
        obj['calldata'] = calldata;
    }

    /**
     * Constructs a <code>TransactionContractCallDestination</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransactionContractCallDestination} obj Optional instance to populate.
     * @return {module:model/TransactionContractCallDestination} The populated <code>TransactionContractCallDestination</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransactionContractCallDestination();

            if (data.hasOwnProperty('destination_type')) {
                obj['destination_type'] = TransactionDestinationType.constructFromObject(data['destination_type']);
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
            if (data.hasOwnProperty('calldata')) {
                obj['calldata'] = ApiClient.convertToType(data['calldata'], 'Blob');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransactionContractCallDestination</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransactionContractCallDestination</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TransactionContractCallDestination.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}

TransactionContractCallDestination.RequiredProperties = ["destination_type", "address", "value", "calldata"];

/**
 * @member {module:model/TransactionDestinationType} destination_type
 */
TransactionContractCallDestination.prototype['destination_type'] = undefined;

/**
 * The destination address.
 * @member {String} address
 */
TransactionContractCallDestination.prototype['address'] = undefined;

/**
 * The quantity of the token in the transaction. For example, if you trade 1.5 ETH, then the value is `1.5`. 
 * @member {String} value
 */
TransactionContractCallDestination.prototype['value'] = undefined;

/**
 * The data that is used to invoke a specific function or method within the specified contract at the destination address. 
 * @member {Blob} calldata
 */
TransactionContractCallDestination.prototype['calldata'] = undefined;






export default TransactionContractCallDestination;

