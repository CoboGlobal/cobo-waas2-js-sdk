/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: support@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MPCStakeSource from './MPCStakeSource';
import StakeSourceType from './StakeSourceType';

/**
 * The StakingSource model module.
 * @module model/StakingSource
 */
class StakingSource {
    /**
     * Constructs a new <code>StakingSource</code>.
     * @alias module:model/StakingSource
     * @param {(module:model/MPCStakeSource)} instance The actual instance to initialize StakingSource.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        var discriminatorValue = instance["source_type"];

        if (discriminatorValue) {
            switch(discriminatorValue) {
                case "Org-Controlled":
                    this.actualInstance = MpcStakeSource.constructFromObject(instance);
                    match++;
                    break;
                default:
                    errorMessages.push("Unrecognized discriminator value: " + discriminatorValue);
                    break;
            }
            return;
        }

        try {
            if (instance instanceof MPCStakeSource) {
                this.actualInstance = instance;
            } else if(!!MPCStakeSource.validateJSON && MPCStakeSource.validateJSON(instance)){
                // plain JS object
                // create MPCStakeSource from JS object
                this.actualInstance = MPCStakeSource.constructFromObject(instance);
            } else {
                if(MPCStakeSource.constructFromObject(instance)) {
                    if (!!MPCStakeSource.constructFromObject(instance).toJSON) {
                        if (MPCStakeSource.constructFromObject(instance).toJSON()) {
                            this.actualInstance = MPCStakeSource.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = MPCStakeSource.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into MPCStakeSource
            errorMessages.push("Failed to construct MPCStakeSource: " + err)
        }

        // if (match > 1) {
        //    throw new Error("Multiple matches found constructing `StakingSource` with oneOf schemas MPCStakeSource. Input: " + JSON.stringify(instance));
        // } else
        if (match === 0) {
        //    this.actualInstance = null; // clear the actual instance in case there are multiple matches
        //    throw new Error("No match found constructing `StakingSource` with oneOf schemas MPCStakeSource. Details: " +
        //                    errorMessages.join(", "));
        return;
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>StakingSource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StakingSource} obj Optional instance to populate.
     * @return {module:model/StakingSource} The populated <code>StakingSource</code> instance.
     */
    static constructFromObject(data, obj) {
        return new StakingSource(data);
    }

    /**
     * Gets the actual instance, which can be <code>MPCStakeSource</code>.
     * @return {(module:model/MPCStakeSource)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>MPCStakeSource</code>.
     * @param {(module:model/MPCStakeSource)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = StakingSource.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of StakingSource from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/StakingSource} An instance of StakingSource.
     */
    static fromJSON = function(json_string){
        return StakingSource.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {module:model/StakeSourceType} source_type
 */
StakingSource.prototype['source_type'] = undefined;

/**
 * The wallet ID.
 * @member {String} wallet_id
 */
StakingSource.prototype['wallet_id'] = undefined;

/**
 * The wallet address.
 * @member {String} address
 */
StakingSource.prototype['address'] = undefined;


StakingSource.OneOf = ["MPCStakeSource"];

export default StakingSource;

