/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateSwapQuoteRequest model module.
 * @module model/CreateSwapQuoteRequest
 */
class CreateSwapQuoteRequest {
    /**
     * Constructs a new <code>CreateSwapQuoteRequest</code>.
     * @alias module:model/CreateSwapQuoteRequest
     * @param wallet_id {String} The unique identifier of the wallet.
     * @param pay_token_id {String} Unique id of the token to pay.
     * @param receive_token_id {String} Unique id of the token to receive.
     */
    constructor(wallet_id, pay_token_id, receive_token_id) { 
        
        CreateSwapQuoteRequest.initialize(this, wallet_id, pay_token_id, receive_token_id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, wallet_id, pay_token_id, receive_token_id) { 
        obj['wallet_id'] = wallet_id;
        obj['pay_token_id'] = pay_token_id;
        obj['receive_token_id'] = receive_token_id;
    }

    /**
     * Constructs a <code>CreateSwapQuoteRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateSwapQuoteRequest} obj Optional instance to populate.
     * @return {module:model/CreateSwapQuoteRequest} The populated <code>CreateSwapQuoteRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateSwapQuoteRequest();

            if (data.hasOwnProperty('wallet_id')) {
                obj['wallet_id'] = ApiClient.convertToType(data['wallet_id'], 'String');
            }
            if (data.hasOwnProperty('pay_token_id')) {
                obj['pay_token_id'] = ApiClient.convertToType(data['pay_token_id'], 'String');
            }
            if (data.hasOwnProperty('receive_token_id')) {
                obj['receive_token_id'] = ApiClient.convertToType(data['receive_token_id'], 'String');
            }
            if (data.hasOwnProperty('pay_amount')) {
                obj['pay_amount'] = ApiClient.convertToType(data['pay_amount'], 'String');
            }
            if (data.hasOwnProperty('receive_amount')) {
                obj['receive_amount'] = ApiClient.convertToType(data['receive_amount'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateSwapQuoteRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateSwapQuoteRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateSwapQuoteRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['wallet_id'] && !(typeof data['wallet_id'] === 'string' || data['wallet_id'] instanceof String)) {
            throw new Error("Expected the field `wallet_id` to be a primitive type in the JSON string but got " + data['wallet_id']);
        }
        // ensure the json data is a string
        if (data['pay_token_id'] && !(typeof data['pay_token_id'] === 'string' || data['pay_token_id'] instanceof String)) {
            throw new Error("Expected the field `pay_token_id` to be a primitive type in the JSON string but got " + data['pay_token_id']);
        }
        // ensure the json data is a string
        if (data['receive_token_id'] && !(typeof data['receive_token_id'] === 'string' || data['receive_token_id'] instanceof String)) {
            throw new Error("Expected the field `receive_token_id` to be a primitive type in the JSON string but got " + data['receive_token_id']);
        }
        // ensure the json data is a string
        if (data['pay_amount'] && !(typeof data['pay_amount'] === 'string' || data['pay_amount'] instanceof String)) {
            throw new Error("Expected the field `pay_amount` to be a primitive type in the JSON string but got " + data['pay_amount']);
        }
        // ensure the json data is a string
        if (data['receive_amount'] && !(typeof data['receive_amount'] === 'string' || data['receive_amount'] instanceof String)) {
            throw new Error("Expected the field `receive_amount` to be a primitive type in the JSON string but got " + data['receive_amount']);
        }

        return true;
    }


}

CreateSwapQuoteRequest.RequiredProperties = ["wallet_id", "pay_token_id", "receive_token_id"];

/**
 * The unique identifier of the wallet.
 * @member {String} wallet_id
 */
CreateSwapQuoteRequest.prototype['wallet_id'] = undefined;

/**
 * Unique id of the token to pay.
 * @member {String} pay_token_id
 */
CreateSwapQuoteRequest.prototype['pay_token_id'] = undefined;

/**
 * Unique id of the token to receive.
 * @member {String} receive_token_id
 */
CreateSwapQuoteRequest.prototype['receive_token_id'] = undefined;

/**
 * Amount of tokens to pay. For example \"0.5 BTC\". Note: Either pay_amount or receive_amount must be provided, but not both. 
 * @member {String} pay_amount
 */
CreateSwapQuoteRequest.prototype['pay_amount'] = undefined;

/**
 * Amount of tokens to receive. For example \"0.5 ETH_WBTC\". Note: Either pay_amount or receive_amount must be provided, but not both. 
 * @member {String} receive_amount
 */
CreateSwapQuoteRequest.prototype['receive_amount'] = undefined;






export default CreateSwapQuoteRequest;

