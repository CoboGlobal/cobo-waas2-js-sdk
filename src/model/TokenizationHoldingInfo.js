/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TokenizationHoldingInfo model module.
 * @module model/TokenizationHoldingInfo
 */
class TokenizationHoldingInfo {
    /**
     * Constructs a new <code>TokenizationHoldingInfo</code>.
     * @alias module:model/TokenizationHoldingInfo
     * @param wallet_id {String} The unique identifier of the wallet holding the token.
     * @param address {String} The address holding the token.
     * @param balance {String} The token balance held by this address.
     */
    constructor(wallet_id, address, balance) { 
        
        TokenizationHoldingInfo.initialize(this, wallet_id, address, balance);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, wallet_id, address, balance) { 
        obj['wallet_id'] = wallet_id;
        obj['address'] = address;
        obj['balance'] = balance;
    }

    /**
     * Constructs a <code>TokenizationHoldingInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TokenizationHoldingInfo} obj Optional instance to populate.
     * @return {module:model/TokenizationHoldingInfo} The populated <code>TokenizationHoldingInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TokenizationHoldingInfo();

            if (data.hasOwnProperty('wallet_id')) {
                obj['wallet_id'] = ApiClient.convertToType(data['wallet_id'], 'String');
            }
            if (data.hasOwnProperty('wallet_name')) {
                obj['wallet_name'] = ApiClient.convertToType(data['wallet_name'], 'String');
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('balance')) {
                obj['balance'] = ApiClient.convertToType(data['balance'], 'String');
            }
            if (data.hasOwnProperty('address_label')) {
                obj['address_label'] = ApiClient.convertToType(data['address_label'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TokenizationHoldingInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TokenizationHoldingInfo</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TokenizationHoldingInfo.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['wallet_id'] && !(typeof data['wallet_id'] === 'string' || data['wallet_id'] instanceof String)) {
            throw new Error("Expected the field `wallet_id` to be a primitive type in the JSON string but got " + data['wallet_id']);
        }
        // ensure the json data is a string
        if (data['wallet_name'] && !(typeof data['wallet_name'] === 'string' || data['wallet_name'] instanceof String)) {
            throw new Error("Expected the field `wallet_name` to be a primitive type in the JSON string but got " + data['wallet_name']);
        }
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // ensure the json data is a string
        if (data['balance'] && !(typeof data['balance'] === 'string' || data['balance'] instanceof String)) {
            throw new Error("Expected the field `balance` to be a primitive type in the JSON string but got " + data['balance']);
        }
        // ensure the json data is a string
        if (data['address_label'] && !(typeof data['address_label'] === 'string' || data['address_label'] instanceof String)) {
            throw new Error("Expected the field `address_label` to be a primitive type in the JSON string but got " + data['address_label']);
        }

        return true;
    }


}

TokenizationHoldingInfo.RequiredProperties = ["wallet_id", "address", "balance"];

/**
 * The unique identifier of the wallet holding the token.
 * @member {String} wallet_id
 */
TokenizationHoldingInfo.prototype['wallet_id'] = undefined;

/**
 * The name of the wallet.
 * @member {String} wallet_name
 */
TokenizationHoldingInfo.prototype['wallet_name'] = undefined;

/**
 * The address holding the token.
 * @member {String} address
 */
TokenizationHoldingInfo.prototype['address'] = undefined;

/**
 * The token balance held by this address.
 * @member {String} balance
 */
TokenizationHoldingInfo.prototype['balance'] = undefined;

/**
 * The label of the address.
 * @member {String} address_label
 */
TokenizationHoldingInfo.prototype['address_label'] = undefined;






export default TokenizationHoldingInfo;

