/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TopUpAddress model module.
 * @module model/TopUpAddress
 */
class TopUpAddress {
    /**
     * Constructs a new <code>TopUpAddress</code>.
     * @alias module:model/TopUpAddress
     * @param address {String} The dedicated top-up address assigned to a specific payer under a merchant on a specified chain.
     * @param payer_id {String} A unique identifier assigned by Cobo to track and identify individual payers.
     * @param custom_payer_id {String} A unique identifier assigned by the developer to track and identify individual payers in their system.
     * @param merchant_id {String} The merchant ID.
     * @param token_id {String} The token ID, which is a unique identifier that specifies both the blockchain network and cryptocurrency token in the format `{CHAIN}_{TOKEN}`.
     * @param min_amount {String} The minimum top-up amount allowed for this address. Top-ups below this threshold will not be credited to merchant or developer funds.
     */
    constructor(address, payer_id, custom_payer_id, merchant_id, token_id, min_amount) { 
        
        TopUpAddress.initialize(this, address, payer_id, custom_payer_id, merchant_id, token_id, min_amount);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, address, payer_id, custom_payer_id, merchant_id, token_id, min_amount) { 
        obj['address'] = address;
        obj['payer_id'] = payer_id;
        obj['custom_payer_id'] = custom_payer_id;
        obj['merchant_id'] = merchant_id;
        obj['token_id'] = token_id;
        obj['min_amount'] = min_amount;
    }

    /**
     * Constructs a <code>TopUpAddress</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TopUpAddress} obj Optional instance to populate.
     * @return {module:model/TopUpAddress} The populated <code>TopUpAddress</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TopUpAddress();

            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('payer_id')) {
                obj['payer_id'] = ApiClient.convertToType(data['payer_id'], 'String');
            }
            if (data.hasOwnProperty('custom_payer_id')) {
                obj['custom_payer_id'] = ApiClient.convertToType(data['custom_payer_id'], 'String');
            }
            if (data.hasOwnProperty('merchant_id')) {
                obj['merchant_id'] = ApiClient.convertToType(data['merchant_id'], 'String');
            }
            if (data.hasOwnProperty('token_id')) {
                obj['token_id'] = ApiClient.convertToType(data['token_id'], 'String');
            }
            if (data.hasOwnProperty('chain')) {
                obj['chain'] = ApiClient.convertToType(data['chain'], 'String');
            }
            if (data.hasOwnProperty('developer_fee_rate')) {
                obj['developer_fee_rate'] = ApiClient.convertToType(data['developer_fee_rate'], 'String');
            }
            if (data.hasOwnProperty('min_amount')) {
                obj['min_amount'] = ApiClient.convertToType(data['min_amount'], 'String');
            }
            if (data.hasOwnProperty('created_timestamp')) {
                obj['created_timestamp'] = ApiClient.convertToType(data['created_timestamp'], 'Number');
            }
            if (data.hasOwnProperty('updated_timestamp')) {
                obj['updated_timestamp'] = ApiClient.convertToType(data['updated_timestamp'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TopUpAddress</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TopUpAddress</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TopUpAddress.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // ensure the json data is a string
        if (data['payer_id'] && !(typeof data['payer_id'] === 'string' || data['payer_id'] instanceof String)) {
            throw new Error("Expected the field `payer_id` to be a primitive type in the JSON string but got " + data['payer_id']);
        }
        // ensure the json data is a string
        if (data['custom_payer_id'] && !(typeof data['custom_payer_id'] === 'string' || data['custom_payer_id'] instanceof String)) {
            throw new Error("Expected the field `custom_payer_id` to be a primitive type in the JSON string but got " + data['custom_payer_id']);
        }
        // ensure the json data is a string
        if (data['merchant_id'] && !(typeof data['merchant_id'] === 'string' || data['merchant_id'] instanceof String)) {
            throw new Error("Expected the field `merchant_id` to be a primitive type in the JSON string but got " + data['merchant_id']);
        }
        // ensure the json data is a string
        if (data['token_id'] && !(typeof data['token_id'] === 'string' || data['token_id'] instanceof String)) {
            throw new Error("Expected the field `token_id` to be a primitive type in the JSON string but got " + data['token_id']);
        }
        // ensure the json data is a string
        if (data['chain'] && !(typeof data['chain'] === 'string' || data['chain'] instanceof String)) {
            throw new Error("Expected the field `chain` to be a primitive type in the JSON string but got " + data['chain']);
        }
        // ensure the json data is a string
        if (data['developer_fee_rate'] && !(typeof data['developer_fee_rate'] === 'string' || data['developer_fee_rate'] instanceof String)) {
            throw new Error("Expected the field `developer_fee_rate` to be a primitive type in the JSON string but got " + data['developer_fee_rate']);
        }
        // ensure the json data is a string
        if (data['min_amount'] && !(typeof data['min_amount'] === 'string' || data['min_amount'] instanceof String)) {
            throw new Error("Expected the field `min_amount` to be a primitive type in the JSON string but got " + data['min_amount']);
        }

        return true;
    }


}

TopUpAddress.RequiredProperties = ["address", "payer_id", "custom_payer_id", "merchant_id", "token_id", "min_amount"];

/**
 * The dedicated top-up address assigned to a specific payer under a merchant on a specified chain.
 * @member {String} address
 */
TopUpAddress.prototype['address'] = undefined;

/**
 * A unique identifier assigned by Cobo to track and identify individual payers.
 * @member {String} payer_id
 */
TopUpAddress.prototype['payer_id'] = undefined;

/**
 * A unique identifier assigned by the developer to track and identify individual payers in their system.
 * @member {String} custom_payer_id
 */
TopUpAddress.prototype['custom_payer_id'] = undefined;

/**
 * The merchant ID.
 * @member {String} merchant_id
 */
TopUpAddress.prototype['merchant_id'] = undefined;

/**
 * The token ID, which is a unique identifier that specifies both the blockchain network and cryptocurrency token in the format `{CHAIN}_{TOKEN}`.
 * @member {String} token_id
 */
TopUpAddress.prototype['token_id'] = undefined;

/**
 * The chain ID.
 * @member {String} chain
 */
TopUpAddress.prototype['chain'] = undefined;

/**
 * The developer fee rate applied to top-up transactions made to this address. Expressed as a decimal string where \"0.1\" represents 10%.
 * @member {String} developer_fee_rate
 */
TopUpAddress.prototype['developer_fee_rate'] = undefined;

/**
 * The minimum top-up amount allowed for this address. Top-ups below this threshold will not be credited to merchant or developer funds.
 * @member {String} min_amount
 */
TopUpAddress.prototype['min_amount'] = undefined;

/**
 * The creation time of the top-up address, represented as a UNIX timestamp in seconds.
 * @member {Number} created_timestamp
 */
TopUpAddress.prototype['created_timestamp'] = undefined;

/**
 * The last update time of the top-up address, represented as a UNIX timestamp in seconds.
 * @member {Number} updated_timestamp
 */
TopUpAddress.prototype['updated_timestamp'] = undefined;






export default TopUpAddress;

