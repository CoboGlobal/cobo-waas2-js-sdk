/**
 * Cobo Wallet as a Service 2.0
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Signature model module.
 * @module model/Signature
 * @version 0.4.5
 */
class Signature {
    /**
     * Constructs a new <code>Signature</code>.
     * The signature result
     * @alias module:model/Signature
     * @param signature {String} The raw data of the signature.
     */
    constructor(signature) { 
        
        Signature.initialize(this, signature);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, signature) { 
        obj['signature'] = signature;
    }

    /**
     * Constructs a <code>Signature</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Signature} obj Optional instance to populate.
     * @return {module:model/Signature} The populated <code>Signature</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Signature();

            if (data.hasOwnProperty('result_type')) {
                obj['result_type'] = ApiClient.convertToType(data['result_type'], 'String');
            }
            if (data.hasOwnProperty('signature')) {
                obj['signature'] = ApiClient.convertToType(data['signature'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Signature</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Signature</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Signature.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['result_type'] && !(typeof data['result_type'] === 'string' || data['result_type'] instanceof String)) {
            throw new Error("Expected the field `result_type` to be a primitive type in the JSON string but got " + data['result_type']);
        }
        // ensure the json data is a string
        if (data['signature'] && !(typeof data['signature'] === 'string' || data['signature'] instanceof String)) {
            throw new Error("Expected the field `signature` to be a primitive type in the JSON string but got " + data['signature']);
        }

        return true;
    }


}

Signature.RequiredProperties = ["signature"];

/**
 * The transaction result type. Possible values include:   - `Signature`: EVM EIP-191/EIP-712 signature. 
 * @member {module:model/Signature.ResultTypeEnum} result_type
 */
Signature.prototype['result_type'] = undefined;

/**
 * The raw data of the signature.
 * @member {String} signature
 */
Signature.prototype['signature'] = undefined;





/**
 * Allowed values for the <code>result_type</code> property.
 * @enum {String}
 * @readonly
 */
Signature['ResultTypeEnum'] = {

    /**
     * value: "Signature"
     * @const
     */
    "Signature": "Signature"
};



export default Signature;

