/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TokenizationMintTokenParams from './TokenizationMintTokenParams';
import TokenizationMintTokenParamsMintsInner from './TokenizationMintTokenParamsMintsInner';
import TokenizationOperationType from './TokenizationOperationType';
import TokenizationTokenOperationSource from './TokenizationTokenOperationSource';

/**
 * The TokenizationMintEstimateFeeParams model module.
 * @module model/TokenizationMintEstimateFeeParams
 */
class TokenizationMintEstimateFeeParams {
    /**
     * Constructs a new <code>TokenizationMintEstimateFeeParams</code>.
     * @alias module:model/TokenizationMintEstimateFeeParams
     * @implements module:model/TokenizationMintTokenParams
     * @param source {module:model/TokenizationTokenOperationSource} 
     * @param mints {Array.<module:model/TokenizationMintTokenParamsMintsInner>} Details for each token mint, including amount and address to mint to.
     * @param operation_type {module:model/TokenizationOperationType} 
     * @param token_id {String} The ID of the token.
     */
    constructor(source, mints, operation_type, token_id) { 
        TokenizationMintTokenParams.initialize(this, source, mints);
        TokenizationMintEstimateFeeParams.initialize(this, source, mints, operation_type, token_id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, source, mints, operation_type, token_id) { 
        obj['source'] = source;
        obj['mints'] = mints;
        obj['operation_type'] = operation_type;
        obj['token_id'] = token_id;
    }

    /**
     * Constructs a <code>TokenizationMintEstimateFeeParams</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TokenizationMintEstimateFeeParams} obj Optional instance to populate.
     * @return {module:model/TokenizationMintEstimateFeeParams} The populated <code>TokenizationMintEstimateFeeParams</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TokenizationMintEstimateFeeParams();
            TokenizationMintTokenParams.constructFromObject(data, obj);

            if (data.hasOwnProperty('source')) {
                obj['source'] = TokenizationTokenOperationSource.constructFromObject(data['source']);
            }
            if (data.hasOwnProperty('mints')) {
                obj['mints'] = ApiClient.convertToType(data['mints'], [TokenizationMintTokenParamsMintsInner]);
            }
            if (data.hasOwnProperty('operation_type')) {
                obj['operation_type'] = TokenizationOperationType.constructFromObject(data['operation_type']);
            }
            if (data.hasOwnProperty('token_id')) {
                obj['token_id'] = ApiClient.convertToType(data['token_id'], 'String');
            }
            if (data.hasOwnProperty('request_id')) {
                obj['request_id'] = ApiClient.convertToType(data['request_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TokenizationMintEstimateFeeParams</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TokenizationMintEstimateFeeParams</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TokenizationMintEstimateFeeParams.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `source`
        if (data['source']) { // data not null
          if (!!TokenizationTokenOperationSource.validateJSON) {
            TokenizationTokenOperationSource.validateJSON(data['source']);
          }
        }
        if (data['mints']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['mints'])) {
                throw new Error("Expected the field `mints` to be an array in the JSON data but got " + data['mints']);
            }
            // validate the optional field `mints` (array)
            for (const item of data['mints']) {
                TokenizationMintTokenParamsMintsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['token_id'] && !(typeof data['token_id'] === 'string' || data['token_id'] instanceof String)) {
            throw new Error("Expected the field `token_id` to be a primitive type in the JSON string but got " + data['token_id']);
        }
        // ensure the json data is a string
        if (data['request_id'] && !(typeof data['request_id'] === 'string' || data['request_id'] instanceof String)) {
            throw new Error("Expected the field `request_id` to be a primitive type in the JSON string but got " + data['request_id']);
        }

        return true;
    }


}

TokenizationMintEstimateFeeParams.RequiredProperties = ["source", "mints", "operation_type", "token_id"];

/**
 * @member {module:model/TokenizationTokenOperationSource} source
 */
TokenizationMintEstimateFeeParams.prototype['source'] = undefined;

/**
 * Details for each token mint, including amount and address to mint to.
 * @member {Array.<module:model/TokenizationMintTokenParamsMintsInner>} mints
 */
TokenizationMintEstimateFeeParams.prototype['mints'] = undefined;

/**
 * @member {module:model/TokenizationOperationType} operation_type
 */
TokenizationMintEstimateFeeParams.prototype['operation_type'] = undefined;

/**
 * The ID of the token.
 * @member {String} token_id
 */
TokenizationMintEstimateFeeParams.prototype['token_id'] = undefined;

/**
 * The request ID that is used to track a transaction request. The request ID is provided by you and must be unique within your organization.
 * @member {String} request_id
 */
TokenizationMintEstimateFeeParams.prototype['request_id'] = undefined;


// Implement TokenizationMintTokenParams interface:
/**
 * @member {module:model/TokenizationTokenOperationSource} source
 */
TokenizationMintTokenParams.prototype['source'] = undefined;
/**
 * Details for each token mint, including amount and address to mint to.
 * @member {Array.<module:model/TokenizationMintTokenParamsMintsInner>} mints
 */
TokenizationMintTokenParams.prototype['mints'] = undefined;




export default TokenizationMintEstimateFeeParams;

