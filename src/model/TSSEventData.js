/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TSSEventDataType from './TSSEventDataType';
import TSSKeyGenEventData from './TSSKeyGenEventData';
import TSSKeyReshareEventData from './TSSKeyReshareEventData';
import TSSKeyShareSignEventData from './TSSKeyShareSignEventData';
import TSSKeyShareSignRequest from './TSSKeyShareSignRequest';
import TSSKeyShareSignSignatures from './TSSKeyShareSignSignatures';
import TSSKeySignEventData from './TSSKeySignEventData';
import TSSRequestTypeEenum from './TSSRequestTypeEenum';
import TSSStatus from './TSSStatus';

/**
 * The TSSEventData model module.
 * @module model/TSSEventData
 */
class TSSEventData {
    /**
     * Constructs a new <code>TSSEventData</code>.
     * @alias module:model/TSSEventData
     * @param {(module:model/TSSKeyGenEventData|module:model/TSSKeyReshareEventData|module:model/TSSKeyShareSignEventData|module:model/TSSKeySignEventData)} instance The actual instance to initialize TSSEventData.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        var discriminatorValue = instance["data_type"];

        if (discriminatorValue) {
            switch(discriminatorValue) {
                case "KeyGen":
                    this.actualInstance = TSSKeyGenEventData.constructFromObject(instance);
                    match++;
                    break;
                case "KeyReshare":
                    this.actualInstance = TSSKeyReshareEventData.constructFromObject(instance);
                    match++;
                    break;
                case "KeyShareSign":
                    this.actualInstance = TSSKeyShareSignEventData.constructFromObject(instance);
                    match++;
                    break;
                case "KeySign":
                    this.actualInstance = TSSKeySignEventData.constructFromObject(instance);
                    match++;
                    break;
                default:
                    errorMessages.push("Unrecognized discriminator value: " + discriminatorValue);
                    break;
            }
            return;
        }

        try {
            if (instance instanceof TSSKeyGenEventData) {
                this.actualInstance = instance;
            } else if(!!TSSKeyGenEventData.validateJSON && TSSKeyGenEventData.validateJSON(instance)){
                // plain JS object
                // create TSSKeyGenEventData from JS object
                this.actualInstance = TSSKeyGenEventData.constructFromObject(instance);
            } else {
                if(TSSKeyGenEventData.constructFromObject(instance)) {
                    if (!!TSSKeyGenEventData.constructFromObject(instance).toJSON) {
                        if (TSSKeyGenEventData.constructFromObject(instance).toJSON()) {
                            this.actualInstance = TSSKeyGenEventData.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = TSSKeyGenEventData.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TSSKeyGenEventData
            errorMessages.push("Failed to construct TSSKeyGenEventData: " + err)
        }

        try {
            if (instance instanceof TSSKeyReshareEventData) {
                this.actualInstance = instance;
            } else if(!!TSSKeyReshareEventData.validateJSON && TSSKeyReshareEventData.validateJSON(instance)){
                // plain JS object
                // create TSSKeyReshareEventData from JS object
                this.actualInstance = TSSKeyReshareEventData.constructFromObject(instance);
            } else {
                if(TSSKeyReshareEventData.constructFromObject(instance)) {
                    if (!!TSSKeyReshareEventData.constructFromObject(instance).toJSON) {
                        if (TSSKeyReshareEventData.constructFromObject(instance).toJSON()) {
                            this.actualInstance = TSSKeyReshareEventData.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = TSSKeyReshareEventData.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TSSKeyReshareEventData
            errorMessages.push("Failed to construct TSSKeyReshareEventData: " + err)
        }

        try {
            if (instance instanceof TSSKeySignEventData) {
                this.actualInstance = instance;
            } else if(!!TSSKeySignEventData.validateJSON && TSSKeySignEventData.validateJSON(instance)){
                // plain JS object
                // create TSSKeySignEventData from JS object
                this.actualInstance = TSSKeySignEventData.constructFromObject(instance);
            } else {
                if(TSSKeySignEventData.constructFromObject(instance)) {
                    if (!!TSSKeySignEventData.constructFromObject(instance).toJSON) {
                        if (TSSKeySignEventData.constructFromObject(instance).toJSON()) {
                            this.actualInstance = TSSKeySignEventData.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = TSSKeySignEventData.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TSSKeySignEventData
            errorMessages.push("Failed to construct TSSKeySignEventData: " + err)
        }

        try {
            if (instance instanceof TSSKeyShareSignEventData) {
                this.actualInstance = instance;
            } else if(!!TSSKeyShareSignEventData.validateJSON && TSSKeyShareSignEventData.validateJSON(instance)){
                // plain JS object
                // create TSSKeyShareSignEventData from JS object
                this.actualInstance = TSSKeyShareSignEventData.constructFromObject(instance);
            } else {
                if(TSSKeyShareSignEventData.constructFromObject(instance)) {
                    if (!!TSSKeyShareSignEventData.constructFromObject(instance).toJSON) {
                        if (TSSKeyShareSignEventData.constructFromObject(instance).toJSON()) {
                            this.actualInstance = TSSKeyShareSignEventData.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = TSSKeyShareSignEventData.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TSSKeyShareSignEventData
            errorMessages.push("Failed to construct TSSKeyShareSignEventData: " + err)
        }

        // if (match > 1) {
        //    throw new Error("Multiple matches found constructing `TSSEventData` with oneOf schemas TSSKeyGenEventData, TSSKeyReshareEventData, TSSKeyShareSignEventData, TSSKeySignEventData. Input: " + JSON.stringify(instance));
        // } else
        if (match === 0) {
        //    this.actualInstance = null; // clear the actual instance in case there are multiple matches
        //    throw new Error("No match found constructing `TSSEventData` with oneOf schemas TSSKeyGenEventData, TSSKeyReshareEventData, TSSKeyShareSignEventData, TSSKeySignEventData. Details: " +
        //                    errorMessages.join(", "));
        return;
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>TSSEventData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TSSEventData} obj Optional instance to populate.
     * @return {module:model/TSSEventData} The populated <code>TSSEventData</code> instance.
     */
    static constructFromObject(data, obj) {
        return new TSSEventData(data);
    }

    /**
     * Gets the actual instance, which can be <code>TSSKeyGenEventData</code>, <code>TSSKeyReshareEventData</code>, <code>TSSKeyShareSignEventData</code>, <code>TSSKeySignEventData</code>.
     * @return {(module:model/TSSKeyGenEventData|module:model/TSSKeyReshareEventData|module:model/TSSKeyShareSignEventData|module:model/TSSKeySignEventData)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>TSSKeyGenEventData</code>, <code>TSSKeyReshareEventData</code>, <code>TSSKeyShareSignEventData</code>, <code>TSSKeySignEventData</code>.
     * @param {(module:model/TSSKeyGenEventData|module:model/TSSKeyReshareEventData|module:model/TSSKeyShareSignEventData|module:model/TSSKeySignEventData)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = TSSEventData.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of TSSEventData from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/TSSEventData} An instance of TSSEventData.
     */
    static fromJSON = function(json_string){
        return TSSEventData.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {module:model/TSSEventDataType} data_type
 */
TSSEventData.prototype['data_type'] = undefined;

/**
 * The request ID.
 * @member {String} request_id
 */
TSSEventData.prototype['request_id'] = undefined;

/**
 * @member {module:model/TSSRequestTypeEenum} request_type
 */
TSSEventData.prototype['request_type'] = undefined;

/**
 * @member {module:model/TSSStatus} request_status
 */
TSSEventData.prototype['request_status'] = undefined;

/**
 * The extra info.
 * @member {String} extra_info
 */
TSSEventData.prototype['extra_info'] = undefined;

/**
 * The failed reason.
 * @member {String} failed_reason
 */
TSSEventData.prototype['failed_reason'] = undefined;

/**
 * @member {module:model/TSSKeyShareSignRequest} request_detail
 */
TSSEventData.prototype['request_detail'] = undefined;

/**
 * @member {module:model/TSSKeyShareSignSignatures} result
 */
TSSEventData.prototype['result'] = undefined;


TSSEventData.OneOf = ["TSSKeyGenEventData", "TSSKeyReshareEventData", "TSSKeyShareSignEventData", "TSSKeySignEventData"];

export default TSSEventData;

