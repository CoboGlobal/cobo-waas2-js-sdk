/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SafeTxDecodedData from './SafeTxDecodedData';

/**
 * The SafeTxExtraData model module.
 * @module model/SafeTxExtraData
 */
class SafeTxExtraData {
    /**
     * Constructs a new <code>SafeTxExtraData</code>.
     * The information about the extra data of the Safe{Wallet} tx message transaction.
     * @alias module:model/SafeTxExtraData
     * @param to {String} The recipient address of the transaction
     * @param value {String} Readable transaction value (e.g., 1 ETH)
     * @param data {String} The transaction data
     * @param domain_hash {String} EIP712 structured data domain hash
     * @param message_hash {String} Hash of the structured message
     * @param safe_address {String} Address of the Safe contract
     * @param safe_tx_hash {String} Hash of the Safe transaction
     * @param safe_nonce {Number} Safe transaction nonce
     * @param operation {String} Type of operation performed in the transaction
     */
    constructor(to, value, data, domain_hash, message_hash, safe_address, safe_tx_hash, safe_nonce, operation) { 
        
        SafeTxExtraData.initialize(this, to, value, data, domain_hash, message_hash, safe_address, safe_tx_hash, safe_nonce, operation);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, to, value, data, domain_hash, message_hash, safe_address, safe_tx_hash, safe_nonce, operation) { 
        obj['to'] = to;
        obj['value'] = value;
        obj['data'] = data;
        obj['domain_hash'] = domain_hash;
        obj['message_hash'] = message_hash;
        obj['safe_address'] = safe_address;
        obj['safe_tx_hash'] = safe_tx_hash;
        obj['safe_nonce'] = safe_nonce;
        obj['operation'] = operation;
    }

    /**
     * Constructs a <code>SafeTxExtraData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SafeTxExtraData} obj Optional instance to populate.
     * @return {module:model/SafeTxExtraData} The populated <code>SafeTxExtraData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SafeTxExtraData();

            if (data.hasOwnProperty('to')) {
                obj['to'] = ApiClient.convertToType(data['to'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], 'String');
            }
            if (data.hasOwnProperty('domain_hash')) {
                obj['domain_hash'] = ApiClient.convertToType(data['domain_hash'], 'String');
            }
            if (data.hasOwnProperty('message_hash')) {
                obj['message_hash'] = ApiClient.convertToType(data['message_hash'], 'String');
            }
            if (data.hasOwnProperty('safe_address')) {
                obj['safe_address'] = ApiClient.convertToType(data['safe_address'], 'String');
            }
            if (data.hasOwnProperty('safe_tx_hash')) {
                obj['safe_tx_hash'] = ApiClient.convertToType(data['safe_tx_hash'], 'String');
            }
            if (data.hasOwnProperty('safe_nonce')) {
                obj['safe_nonce'] = ApiClient.convertToType(data['safe_nonce'], 'Number');
            }
            if (data.hasOwnProperty('operation')) {
                obj['operation'] = ApiClient.convertToType(data['operation'], 'String');
            }
            if (data.hasOwnProperty('gas_token_addr')) {
                obj['gas_token_addr'] = ApiClient.convertToType(data['gas_token_addr'], 'String');
            }
            if (data.hasOwnProperty('safe_tx_gas')) {
                obj['safe_tx_gas'] = ApiClient.convertToType(data['safe_tx_gas'], 'Number');
            }
            if (data.hasOwnProperty('base_gas')) {
                obj['base_gas'] = ApiClient.convertToType(data['base_gas'], 'Number');
            }
            if (data.hasOwnProperty('gas_price')) {
                obj['gas_price'] = ApiClient.convertToType(data['gas_price'], 'String');
            }
            if (data.hasOwnProperty('refund_receiver')) {
                obj['refund_receiver'] = ApiClient.convertToType(data['refund_receiver'], 'String');
            }
            if (data.hasOwnProperty('to_contract_name')) {
                obj['to_contract_name'] = ApiClient.convertToType(data['to_contract_name'], 'String');
            }
            if (data.hasOwnProperty('decoded_data')) {
                obj['decoded_data'] = SafeTxDecodedData.constructFromObject(data['decoded_data']);
            }
            if (data.hasOwnProperty('signature')) {
                obj['signature'] = ApiClient.convertToType(data['signature'], 'String');
            }
            if (data.hasOwnProperty('wei')) {
                obj['wei'] = ApiClient.convertToType(data['wei'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SafeTxExtraData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SafeTxExtraData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SafeTxExtraData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['to'] && !(typeof data['to'] === 'string' || data['to'] instanceof String)) {
            throw new Error("Expected the field `to` to be a primitive type in the JSON string but got " + data['to']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }
        // ensure the json data is a string
        if (data['data'] && !(typeof data['data'] === 'string' || data['data'] instanceof String)) {
            throw new Error("Expected the field `data` to be a primitive type in the JSON string but got " + data['data']);
        }
        // ensure the json data is a string
        if (data['domain_hash'] && !(typeof data['domain_hash'] === 'string' || data['domain_hash'] instanceof String)) {
            throw new Error("Expected the field `domain_hash` to be a primitive type in the JSON string but got " + data['domain_hash']);
        }
        // ensure the json data is a string
        if (data['message_hash'] && !(typeof data['message_hash'] === 'string' || data['message_hash'] instanceof String)) {
            throw new Error("Expected the field `message_hash` to be a primitive type in the JSON string but got " + data['message_hash']);
        }
        // ensure the json data is a string
        if (data['safe_address'] && !(typeof data['safe_address'] === 'string' || data['safe_address'] instanceof String)) {
            throw new Error("Expected the field `safe_address` to be a primitive type in the JSON string but got " + data['safe_address']);
        }
        // ensure the json data is a string
        if (data['safe_tx_hash'] && !(typeof data['safe_tx_hash'] === 'string' || data['safe_tx_hash'] instanceof String)) {
            throw new Error("Expected the field `safe_tx_hash` to be a primitive type in the JSON string but got " + data['safe_tx_hash']);
        }
        // ensure the json data is a string
        if (data['operation'] && !(typeof data['operation'] === 'string' || data['operation'] instanceof String)) {
            throw new Error("Expected the field `operation` to be a primitive type in the JSON string but got " + data['operation']);
        }
        // ensure the json data is a string
        if (data['gas_token_addr'] && !(typeof data['gas_token_addr'] === 'string' || data['gas_token_addr'] instanceof String)) {
            throw new Error("Expected the field `gas_token_addr` to be a primitive type in the JSON string but got " + data['gas_token_addr']);
        }
        // ensure the json data is a string
        if (data['gas_price'] && !(typeof data['gas_price'] === 'string' || data['gas_price'] instanceof String)) {
            throw new Error("Expected the field `gas_price` to be a primitive type in the JSON string but got " + data['gas_price']);
        }
        // ensure the json data is a string
        if (data['refund_receiver'] && !(typeof data['refund_receiver'] === 'string' || data['refund_receiver'] instanceof String)) {
            throw new Error("Expected the field `refund_receiver` to be a primitive type in the JSON string but got " + data['refund_receiver']);
        }
        // ensure the json data is a string
        if (data['to_contract_name'] && !(typeof data['to_contract_name'] === 'string' || data['to_contract_name'] instanceof String)) {
            throw new Error("Expected the field `to_contract_name` to be a primitive type in the JSON string but got " + data['to_contract_name']);
        }
        // validate the optional field `decoded_data`
        if (data['decoded_data']) { // data not null
          if (!!SafeTxDecodedData.validateJSON) {
            SafeTxDecodedData.validateJSON(data['decoded_data']);
          }
        }
        // ensure the json data is a string
        if (data['signature'] && !(typeof data['signature'] === 'string' || data['signature'] instanceof String)) {
            throw new Error("Expected the field `signature` to be a primitive type in the JSON string but got " + data['signature']);
        }
        // ensure the json data is a string
        if (data['wei'] && !(typeof data['wei'] === 'string' || data['wei'] instanceof String)) {
            throw new Error("Expected the field `wei` to be a primitive type in the JSON string but got " + data['wei']);
        }

        return true;
    }


}

SafeTxExtraData.RequiredProperties = ["to", "value", "data", "domain_hash", "message_hash", "safe_address", "safe_tx_hash", "safe_nonce", "operation"];

/**
 * The recipient address of the transaction
 * @member {String} to
 */
SafeTxExtraData.prototype['to'] = undefined;

/**
 * Readable transaction value (e.g., 1 ETH)
 * @member {String} value
 */
SafeTxExtraData.prototype['value'] = undefined;

/**
 * The transaction data
 * @member {String} data
 */
SafeTxExtraData.prototype['data'] = undefined;

/**
 * EIP712 structured data domain hash
 * @member {String} domain_hash
 */
SafeTxExtraData.prototype['domain_hash'] = undefined;

/**
 * Hash of the structured message
 * @member {String} message_hash
 */
SafeTxExtraData.prototype['message_hash'] = undefined;

/**
 * Address of the Safe contract
 * @member {String} safe_address
 */
SafeTxExtraData.prototype['safe_address'] = undefined;

/**
 * Hash of the Safe transaction
 * @member {String} safe_tx_hash
 */
SafeTxExtraData.prototype['safe_tx_hash'] = undefined;

/**
 * Safe transaction nonce
 * @member {Number} safe_nonce
 */
SafeTxExtraData.prototype['safe_nonce'] = undefined;

/**
 * Type of operation performed in the transaction
 * @member {String} operation
 */
SafeTxExtraData.prototype['operation'] = undefined;

/**
 * Address of the gas token
 * @member {String} gas_token_addr
 */
SafeTxExtraData.prototype['gas_token_addr'] = undefined;

/**
 * Gas used for the Safe transaction
 * @member {Number} safe_tx_gas
 */
SafeTxExtraData.prototype['safe_tx_gas'] = undefined;

/**
 * Base gas for the transaction
 * @member {Number} base_gas
 */
SafeTxExtraData.prototype['base_gas'] = undefined;

/**
 * Gas price used in the transaction
 * @member {String} gas_price
 */
SafeTxExtraData.prototype['gas_price'] = undefined;

/**
 * Address to receive the gas refund
 * @member {String} refund_receiver
 */
SafeTxExtraData.prototype['refund_receiver'] = undefined;

/**
 * Name of the recipient contract (if available)
 * @member {String} to_contract_name
 */
SafeTxExtraData.prototype['to_contract_name'] = undefined;

/**
 * @member {module:model/SafeTxDecodedData} decoded_data
 */
SafeTxExtraData.prototype['decoded_data'] = undefined;

/**
 * Signature of the transaction (if signed by Cobo Signer)
 * @member {String} signature
 */
SafeTxExtraData.prototype['signature'] = undefined;

/**
 * Transaction amount in Wei
 * @member {String} wei
 */
SafeTxExtraData.prototype['wei'] = undefined;






export default SafeTxExtraData;

