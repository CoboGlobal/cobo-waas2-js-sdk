/**
 * Cobo Wallet as a Service 2.0
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TransactionDestinationType from './TransactionDestinationType';

/**
 * The TransactionMessageSignEIP712Destination model module.
 * @module model/TransactionMessageSignEIP712Destination
 */
class TransactionMessageSignEIP712Destination {
    /**
     * Constructs a new <code>TransactionMessageSignEIP712Destination</code>.
     * Information about the transaction destination, which varies depending on whether you are the initiator or the receiver of the transaction.   - As the initiator, you will see detailed information about the transaction destination, and the &#x60;destination&#x60; will be displayed as one of the following types: &#x60;EVM_Contract&#x60;, &#x60;EVM_EIP_191_Signature&#x60;, &#x60;EVM_EIP_712_Signature&#x60;, &#x60;DepositToAddress&#x60;, or &#x60;DepositToWallet&#x60;. &#x60;DepositToWallet&#x60; indicates the destination is an Exchange Wallet, while &#x60;DepositToAddress&#x60; indicates the destination is a wallet of other wallet types or an external address. - As the receiver, you will see the &#x60;destination&#x60; as the type &#x60;Address&#x60; or &#x60;ExchangeWallet&#x60;. &#x60;Address&#x60; indicates the destination is a wallet of other wallet types than Exchange Wallets or an external address. 
     * @alias module:model/TransactionMessageSignEIP712Destination
     * @param destination_type {module:model/TransactionDestinationType} 
     * @param structured_data {Object.<String, Object>} The structured data to be signed, formatted as a JSON object according to the EIP-712 standard.
     */
    constructor(destination_type, structured_data) { 
        
        TransactionMessageSignEIP712Destination.initialize(this, destination_type, structured_data);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, destination_type, structured_data) { 
        obj['destination_type'] = destination_type;
        obj['structured_data'] = structured_data;
    }

    /**
     * Constructs a <code>TransactionMessageSignEIP712Destination</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransactionMessageSignEIP712Destination} obj Optional instance to populate.
     * @return {module:model/TransactionMessageSignEIP712Destination} The populated <code>TransactionMessageSignEIP712Destination</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransactionMessageSignEIP712Destination();

            if (data.hasOwnProperty('destination_type')) {
                obj['destination_type'] = TransactionDestinationType.constructFromObject(data['destination_type']);
            }
            if (data.hasOwnProperty('structured_data')) {
                obj['structured_data'] = ApiClient.convertToType(data['structured_data'], {'String': Object});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransactionMessageSignEIP712Destination</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransactionMessageSignEIP712Destination</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TransactionMessageSignEIP712Destination.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

TransactionMessageSignEIP712Destination.RequiredProperties = ["destination_type", "structured_data"];

/**
 * @member {module:model/TransactionDestinationType} destination_type
 */
TransactionMessageSignEIP712Destination.prototype['destination_type'] = undefined;

/**
 * The structured data to be signed, formatted as a JSON object according to the EIP-712 standard.
 * @member {Object.<String, Object>} structured_data
 */
TransactionMessageSignEIP712Destination.prototype['structured_data'] = undefined;






export default TransactionMessageSignEIP712Destination;

