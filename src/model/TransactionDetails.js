/**
 * Cobo Wallet as a Service 2.0
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExchangeId from './ExchangeId';
import Transaction from './Transaction';
import TransactionApprover from './TransactionApprover';
import TransactionDestination from './TransactionDestination';
import TransactionFee from './TransactionFee';
import TransactionSigner from './TransactionSigner';
import TransactionSource from './TransactionSource';
import TransactionStatus from './TransactionStatus';
import TransactionSubStatus from './TransactionSubStatus';
import TransactionTimeline from './TransactionTimeline';
import TransactionTokeApproval from './TransactionTokeApproval';
import TransactionToken from './TransactionToken';
import TransactionType from './TransactionType';

/**
 * The TransactionDetails model module.
 * @module model/TransactionDetails
 * @version 0.1.0
 */
class TransactionDetails {
    /**
     * Constructs a new <code>TransactionDetails</code>.
     * @alias module:model/TransactionDetails
     * @implements module:model/Transaction
     * @param transactionId {String} Unique transaction ID
     * @param walletId {String} Wallet ID
     * @param coboId {String} Cobo ID
     * @param status {module:model/TransactionStatus} 
     * @param type {module:model/TransactionType} 
     * @param source {module:model/TransactionSource} 
     * @param destination {module:model/TransactionDestination} 
     * @param createdTime {Number} Transaction creation time
     * @param updatedTime {Number} Transaction update time
     */
    constructor(transactionId, walletId, coboId, status, type, source, destination, createdTime, updatedTime) { 
        Transaction.initialize(this, transactionId, walletId, coboId, status, type, source, destination, createdTime, updatedTime);
        TransactionDetails.initialize(this, transactionId, walletId, coboId, status, type, source, destination, createdTime, updatedTime);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, transactionId, walletId, coboId, status, type, source, destination, createdTime, updatedTime) { 
        obj['transaction_id'] = transactionId;
        obj['wallet_id'] = walletId;
        obj['cobo_id'] = coboId;
        obj['status'] = status;
        obj['type'] = type;
        obj['source'] = source;
        obj['destination'] = destination;
        obj['created_time'] = createdTime;
        obj['updated_time'] = updatedTime;
    }

    /**
     * Constructs a <code>TransactionDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransactionDetails} obj Optional instance to populate.
     * @return {module:model/TransactionDetails} The populated <code>TransactionDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransactionDetails();
            Transaction.constructFromObject(data, obj);

            if (data.hasOwnProperty('transaction_id')) {
                obj['transaction_id'] = ApiClient.convertToType(data['transaction_id'], 'String');
            }
            if (data.hasOwnProperty('wallet_id')) {
                obj['wallet_id'] = ApiClient.convertToType(data['wallet_id'], 'String');
            }
            if (data.hasOwnProperty('request_id')) {
                obj['request_id'] = ApiClient.convertToType(data['request_id'], 'String');
            }
            if (data.hasOwnProperty('cobo_id')) {
                obj['cobo_id'] = ApiClient.convertToType(data['cobo_id'], 'String');
            }
            if (data.hasOwnProperty('initiator')) {
                obj['initiator'] = ApiClient.convertToType(data['initiator'], 'String');
            }
            if (data.hasOwnProperty('transaction_hash')) {
                obj['transaction_hash'] = ApiClient.convertToType(data['transaction_hash'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = TransactionStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('sub_status')) {
                obj['sub_status'] = TransactionSubStatus.constructFromObject(data['sub_status']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = TransactionType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = TransactionSource.constructFromObject(data['source']);
            }
            if (data.hasOwnProperty('destination')) {
                obj['destination'] = TransactionDestination.constructFromObject(data['destination']);
            }
            if (data.hasOwnProperty('chain_id')) {
                obj['chain_id'] = ApiClient.convertToType(data['chain_id'], 'String');
            }
            if (data.hasOwnProperty('exchange_id')) {
                obj['exchange_id'] = ExchangeId.constructFromObject(data['exchange_id']);
            }
            if (data.hasOwnProperty('tokens')) {
                obj['tokens'] = ApiClient.convertToType(data['tokens'], [TransactionToken]);
            }
            if (data.hasOwnProperty('fee')) {
                obj['fee'] = TransactionFee.constructFromObject(data['fee']);
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], ['String']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('confirmed_num')) {
                obj['confirmed_num'] = ApiClient.convertToType(data['confirmed_num'], 'Number');
            }
            if (data.hasOwnProperty('confirming_threshold')) {
                obj['confirming_threshold'] = ApiClient.convertToType(data['confirming_threshold'], 'Number');
            }
            if (data.hasOwnProperty('created_time')) {
                obj['created_time'] = ApiClient.convertToType(data['created_time'], 'Number');
            }
            if (data.hasOwnProperty('updated_time')) {
                obj['updated_time'] = ApiClient.convertToType(data['updated_time'], 'Number');
            }
            if (data.hasOwnProperty('approvers')) {
                obj['approvers'] = ApiClient.convertToType(data['approvers'], [TransactionApprover]);
            }
            if (data.hasOwnProperty('signers')) {
                obj['signers'] = ApiClient.convertToType(data['signers'], [TransactionSigner]);
            }
            if (data.hasOwnProperty('nonce')) {
                obj['nonce'] = ApiClient.convertToType(data['nonce'], 'Number');
            }
            if (data.hasOwnProperty('replaced_by')) {
                obj['replaced_by'] = ApiClient.convertToType(data['replaced_by'], 'String');
            }
            if (data.hasOwnProperty('fueled_by')) {
                obj['fueled_by'] = ApiClient.convertToType(data['fueled_by'], 'String');
            }
            if (data.hasOwnProperty('token_approval')) {
                obj['token_approval'] = TransactionTokeApproval.constructFromObject(data['token_approval']);
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('algorithm')) {
                obj['algorithm'] = ApiClient.convertToType(data['algorithm'], 'String');
            }
            if (data.hasOwnProperty('timeline')) {
                obj['timeline'] = ApiClient.convertToType(data['timeline'], [TransactionTimeline]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransactionDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransactionDetails</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TransactionDetails.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['transaction_id'] && !(typeof data['transaction_id'] === 'string' || data['transaction_id'] instanceof String)) {
            throw new Error("Expected the field `transaction_id` to be a primitive type in the JSON string but got " + data['transaction_id']);
        }
        // ensure the json data is a string
        if (data['wallet_id'] && !(typeof data['wallet_id'] === 'string' || data['wallet_id'] instanceof String)) {
            throw new Error("Expected the field `wallet_id` to be a primitive type in the JSON string but got " + data['wallet_id']);
        }
        // ensure the json data is a string
        if (data['request_id'] && !(typeof data['request_id'] === 'string' || data['request_id'] instanceof String)) {
            throw new Error("Expected the field `request_id` to be a primitive type in the JSON string but got " + data['request_id']);
        }
        // ensure the json data is a string
        if (data['cobo_id'] && !(typeof data['cobo_id'] === 'string' || data['cobo_id'] instanceof String)) {
            throw new Error("Expected the field `cobo_id` to be a primitive type in the JSON string but got " + data['cobo_id']);
        }
        // ensure the json data is a string
        if (data['initiator'] && !(typeof data['initiator'] === 'string' || data['initiator'] instanceof String)) {
            throw new Error("Expected the field `initiator` to be a primitive type in the JSON string but got " + data['initiator']);
        }
        // ensure the json data is a string
        if (data['transaction_hash'] && !(typeof data['transaction_hash'] === 'string' || data['transaction_hash'] instanceof String)) {
            throw new Error("Expected the field `transaction_hash` to be a primitive type in the JSON string but got " + data['transaction_hash']);
        }
        // validate the optional field `source`
        if (data['source']) { // data not null
          TransactionSource.validateJSON(data['source']);
        }
        // validate the optional field `destination`
        if (data['destination']) { // data not null
          TransactionDestination.validateJSON(data['destination']);
        }
        // ensure the json data is a string
        if (data['chain_id'] && !(typeof data['chain_id'] === 'string' || data['chain_id'] instanceof String)) {
            throw new Error("Expected the field `chain_id` to be a primitive type in the JSON string but got " + data['chain_id']);
        }
        if (data['tokens']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tokens'])) {
                throw new Error("Expected the field `tokens` to be an array in the JSON data but got " + data['tokens']);
            }
            // validate the optional field `tokens` (array)
            for (const item of data['tokens']) {
                TransactionToken.validateJSON(item);
            };
        }
        // validate the optional field `fee`
        if (data['fee']) { // data not null
          TransactionFee.validateJSON(data['fee']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['category'])) {
            throw new Error("Expected the field `category` to be an array in the JSON data but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['approvers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['approvers'])) {
                throw new Error("Expected the field `approvers` to be an array in the JSON data but got " + data['approvers']);
            }
            // validate the optional field `approvers` (array)
            for (const item of data['approvers']) {
                TransactionApprover.validateJSON(item);
            };
        }
        if (data['signers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['signers'])) {
                throw new Error("Expected the field `signers` to be an array in the JSON data but got " + data['signers']);
            }
            // validate the optional field `signers` (array)
            for (const item of data['signers']) {
                TransactionSigner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['replaced_by'] && !(typeof data['replaced_by'] === 'string' || data['replaced_by'] instanceof String)) {
            throw new Error("Expected the field `replaced_by` to be a primitive type in the JSON string but got " + data['replaced_by']);
        }
        // ensure the json data is a string
        if (data['fueled_by'] && !(typeof data['fueled_by'] === 'string' || data['fueled_by'] instanceof String)) {
            throw new Error("Expected the field `fueled_by` to be a primitive type in the JSON string but got " + data['fueled_by']);
        }
        // validate the optional field `token_approval`
        if (data['token_approval']) { // data not null
          TransactionTokeApproval.validateJSON(data['token_approval']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['algorithm'] && !(typeof data['algorithm'] === 'string' || data['algorithm'] instanceof String)) {
            throw new Error("Expected the field `algorithm` to be a primitive type in the JSON string but got " + data['algorithm']);
        }
        if (data['timeline']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['timeline'])) {
                throw new Error("Expected the field `timeline` to be an array in the JSON data but got " + data['timeline']);
            }
            // validate the optional field `timeline` (array)
            for (const item of data['timeline']) {
                TransactionTimeline.validateJSON(item);
            };
        }

        return true;
    }


}

TransactionDetails.RequiredProperties = ["transaction_id", "wallet_id", "cobo_id", "status", "type", "source", "destination", "created_time", "updated_time"];

/**
 * Unique transaction ID
 * @member {String} transaction_id
 */
TransactionDetails.prototype['transaction_id'] = undefined;

/**
 * Wallet ID
 * @member {String} wallet_id
 */
TransactionDetails.prototype['wallet_id'] = undefined;

/**
 * Request ID
 * @member {String} request_id
 */
TransactionDetails.prototype['request_id'] = undefined;

/**
 * Cobo ID
 * @member {String} cobo_id
 */
TransactionDetails.prototype['cobo_id'] = undefined;

/**
 * Transaction initiator
 * @member {String} initiator
 */
TransactionDetails.prototype['initiator'] = undefined;

/**
 * Transaction hash.
 * @member {String} transaction_hash
 */
TransactionDetails.prototype['transaction_hash'] = undefined;

/**
 * @member {module:model/TransactionStatus} status
 */
TransactionDetails.prototype['status'] = undefined;

/**
 * @member {module:model/TransactionSubStatus} sub_status
 */
TransactionDetails.prototype['sub_status'] = undefined;

/**
 * @member {module:model/TransactionType} type
 */
TransactionDetails.prototype['type'] = undefined;

/**
 * @member {module:model/TransactionSource} source
 */
TransactionDetails.prototype['source'] = undefined;

/**
 * @member {module:model/TransactionDestination} destination
 */
TransactionDetails.prototype['destination'] = undefined;

/**
 * The blockchain on which the token operates.
 * @member {String} chain_id
 */
TransactionDetails.prototype['chain_id'] = undefined;

/**
 * @member {module:model/ExchangeId} exchange_id
 */
TransactionDetails.prototype['exchange_id'] = undefined;

/**
 * @member {Array.<module:model/TransactionToken>} tokens
 */
TransactionDetails.prototype['tokens'] = undefined;

/**
 * @member {module:model/TransactionFee} fee
 */
TransactionDetails.prototype['fee'] = undefined;

/**
 * @member {Array.<String>} category
 */
TransactionDetails.prototype['category'] = undefined;

/**
 * @member {String} description
 */
TransactionDetails.prototype['description'] = undefined;

/**
 * Transaction confirmed number
 * @member {Number} confirmed_num
 */
TransactionDetails.prototype['confirmed_num'] = undefined;

/**
 * Number of confirmations required for a transaction, such as 15 for ETH chain.
 * @member {Number} confirming_threshold
 */
TransactionDetails.prototype['confirming_threshold'] = undefined;

/**
 * Transaction creation time
 * @member {Number} created_time
 */
TransactionDetails.prototype['created_time'] = undefined;

/**
 * Transaction update time
 * @member {Number} updated_time
 */
TransactionDetails.prototype['updated_time'] = undefined;

/**
 * @member {Array.<module:model/TransactionApprover>} approvers
 */
TransactionDetails.prototype['approvers'] = undefined;

/**
 * @member {Array.<module:model/TransactionSigner>} signers
 */
TransactionDetails.prototype['signers'] = undefined;

/**
 * Transaction nonce
 * @member {Number} nonce
 */
TransactionDetails.prototype['nonce'] = undefined;

/**
 * Replace by transaction hash
 * @member {String} replaced_by
 */
TransactionDetails.prototype['replaced_by'] = undefined;

/**
 * Fueled by address
 * @member {String} fueled_by
 */
TransactionDetails.prototype['fueled_by'] = undefined;

/**
 * @member {module:model/TransactionTokeApproval} token_approval
 */
TransactionDetails.prototype['token_approval'] = undefined;

/**
 * Transaction raw message
 * @member {String} message
 */
TransactionDetails.prototype['message'] = undefined;

/**
 * Transaction message signing algorithm
 * @member {String} algorithm
 */
TransactionDetails.prototype['algorithm'] = undefined;

/**
 * @member {Array.<module:model/TransactionTimeline>} timeline
 */
TransactionDetails.prototype['timeline'] = undefined;


// Implement Transaction interface:
/**
 * Unique transaction ID
 * @member {String} transaction_id
 */
Transaction.prototype['transaction_id'] = undefined;
/**
 * Wallet ID
 * @member {String} wallet_id
 */
Transaction.prototype['wallet_id'] = undefined;
/**
 * Request ID
 * @member {String} request_id
 */
Transaction.prototype['request_id'] = undefined;
/**
 * Cobo ID
 * @member {String} cobo_id
 */
Transaction.prototype['cobo_id'] = undefined;
/**
 * Transaction initiator
 * @member {String} initiator
 */
Transaction.prototype['initiator'] = undefined;
/**
 * Transaction hash.
 * @member {String} transaction_hash
 */
Transaction.prototype['transaction_hash'] = undefined;
/**
 * @member {module:model/TransactionStatus} status
 */
Transaction.prototype['status'] = undefined;
/**
 * @member {module:model/TransactionSubStatus} sub_status
 */
Transaction.prototype['sub_status'] = undefined;
/**
 * @member {module:model/TransactionType} type
 */
Transaction.prototype['type'] = undefined;
/**
 * @member {module:model/TransactionSource} source
 */
Transaction.prototype['source'] = undefined;
/**
 * @member {module:model/TransactionDestination} destination
 */
Transaction.prototype['destination'] = undefined;
/**
 * The blockchain on which the token operates.
 * @member {String} chain_id
 */
Transaction.prototype['chain_id'] = undefined;
/**
 * @member {module:model/ExchangeId} exchange_id
 */
Transaction.prototype['exchange_id'] = undefined;
/**
 * @member {Array.<module:model/TransactionToken>} tokens
 */
Transaction.prototype['tokens'] = undefined;
/**
 * @member {module:model/TransactionFee} fee
 */
Transaction.prototype['fee'] = undefined;
/**
 * @member {Array.<String>} category
 */
Transaction.prototype['category'] = undefined;
/**
 * @member {String} description
 */
Transaction.prototype['description'] = undefined;
/**
 * Transaction confirmed number
 * @member {Number} confirmed_num
 */
Transaction.prototype['confirmed_num'] = undefined;
/**
 * Number of confirmations required for a transaction, such as 15 for ETH chain.
 * @member {Number} confirming_threshold
 */
Transaction.prototype['confirming_threshold'] = undefined;
/**
 * Transaction creation time
 * @member {Number} created_time
 */
Transaction.prototype['created_time'] = undefined;
/**
 * Transaction update time
 * @member {Number} updated_time
 */
Transaction.prototype['updated_time'] = undefined;




export default TransactionDetails;

