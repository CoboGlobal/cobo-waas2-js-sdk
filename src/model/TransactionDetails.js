/**
 * Cobo Wallet as a Service 2.0
 * Cobo WaaS 2.0 enables you to programmatically access Cobo's full suite of crypto wallet technologies with powerful and flexible access controls.  # Wallet technologies - Custodial Wallet - MPC Wallet - Smart Contract Wallet (Based on Safe{Wallet}) - Exchange Wallet  # Risk Control technologies - Workflow - Access Control List (ACL)  # Risk Control targets - Wallet Management   - User/team and their permission management   - Risk control configurations, e.g. whitelist, blacklist, rate-limiting etc. - Blockchain Interaction   - Crypto transfer   - Smart Contract Invocation  # Important HTTPS only. RESTful, resource oriented  # Get Started Set up your APIs or get authorization  # Authentication and Authorization CoboAuth  # Request and Response application/json  # Error Handling  ### Common error codes | Error Code | Description | | -- | -- |  ### API-specific error codes For error codes that are dedicated to a specific API, see the Error codes section in each API specification, for example, /v3/wallets.  # Rate and Usage Limiting  # Idempotent Request  # Pagination # Support [Developer Hub](https://cobo.com/developers) 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Network from './Network';
import Transaction from './Transaction';
import TransactionAddress from './TransactionAddress';
import TransactionAddressType from './TransactionAddressType';
import TransactionApprover from './TransactionApprover';
import TransactionFee from './TransactionFee';
import TransactionSigner from './TransactionSigner';
import TransactionStatus from './TransactionStatus';
import TransactionSubStatus from './TransactionSubStatus';
import TransactionTimeline from './TransactionTimeline';
import TransactionTokeApproval from './TransactionTokeApproval';
import TransactionToken from './TransactionToken';
import TransactionType from './TransactionType';

/**
 * The TransactionDetails model module.
 * @module model/TransactionDetails
 * @version 0.1.0
 */
class TransactionDetails {
    /**
     * Constructs a new <code>TransactionDetails</code>.
     * @alias module:model/TransactionDetails
     * @implements module:model/Transaction
     */
    constructor() { 
        Transaction.initialize(this);
        TransactionDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TransactionDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransactionDetails} obj Optional instance to populate.
     * @return {module:model/TransactionDetails} The populated <code>TransactionDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransactionDetails();
            Transaction.constructFromObject(data, obj);

            if (data.hasOwnProperty('transaction_id')) {
                obj['transaction_id'] = ApiClient.convertToType(data['transaction_id'], 'String');
            }
            if (data.hasOwnProperty('wallet_id')) {
                obj['wallet_id'] = ApiClient.convertToType(data['wallet_id'], 'String');
            }
            if (data.hasOwnProperty('request_id')) {
                obj['request_id'] = ApiClient.convertToType(data['request_id'], 'String');
            }
            if (data.hasOwnProperty('cobo_id')) {
                obj['cobo_id'] = ApiClient.convertToType(data['cobo_id'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = TransactionStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('sub_status')) {
                obj['sub_status'] = TransactionSubStatus.constructFromObject(data['sub_status']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = TransactionType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('from_type')) {
                obj['from_type'] = TransactionAddressType.constructFromObject(data['from_type']);
            }
            if (data.hasOwnProperty('from_address')) {
                obj['from_address'] = ApiClient.convertToType(data['from_address'], [TransactionAddress]);
            }
            if (data.hasOwnProperty('from_info')) {
                obj['from_info'] = ApiClient.convertToType(data['from_info'], 'String');
            }
            if (data.hasOwnProperty('to_type')) {
                obj['to_type'] = TransactionAddressType.constructFromObject(data['to_type']);
            }
            if (data.hasOwnProperty('to_address')) {
                obj['to_address'] = ApiClient.convertToType(data['to_address'], [TransactionAddress]);
            }
            if (data.hasOwnProperty('to_info')) {
                obj['to_info'] = ApiClient.convertToType(data['to_info'], 'String');
            }
            if (data.hasOwnProperty('network')) {
                obj['network'] = Network.constructFromObject(data['network']);
            }
            if (data.hasOwnProperty('txid')) {
                obj['txid'] = ApiClient.convertToType(data['txid'], 'String');
            }
            if (data.hasOwnProperty('tokens')) {
                obj['tokens'] = ApiClient.convertToType(data['tokens'], [TransactionToken]);
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], ['String']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('created_time')) {
                obj['created_time'] = ApiClient.convertToType(data['created_time'], 'Number');
            }
            if (data.hasOwnProperty('updated_time')) {
                obj['updated_time'] = ApiClient.convertToType(data['updated_time'], 'Number');
            }
            if (data.hasOwnProperty('delegate')) {
                obj['delegate'] = ApiClient.convertToType(data['delegate'], 'String');
            }
            if (data.hasOwnProperty('initiator')) {
                obj['initiator'] = ApiClient.convertToType(data['initiator'], 'String');
            }
            if (data.hasOwnProperty('approvers')) {
                obj['approvers'] = ApiClient.convertToType(data['approvers'], [TransactionApprover]);
            }
            if (data.hasOwnProperty('signers')) {
                obj['signers'] = ApiClient.convertToType(data['signers'], [TransactionSigner]);
            }
            if (data.hasOwnProperty('nonce')) {
                obj['nonce'] = ApiClient.convertToType(data['nonce'], 'Number');
            }
            if (data.hasOwnProperty('replaced_by')) {
                obj['replaced_by'] = ApiClient.convertToType(data['replaced_by'], 'String');
            }
            if (data.hasOwnProperty('fee')) {
                obj['fee'] = TransactionFee.constructFromObject(data['fee']);
            }
            if (data.hasOwnProperty('fueled_by')) {
                obj['fueled_by'] = ApiClient.convertToType(data['fueled_by'], 'String');
            }
            if (data.hasOwnProperty('confirmed_num')) {
                obj['confirmed_num'] = ApiClient.convertToType(data['confirmed_num'], 'Number');
            }
            if (data.hasOwnProperty('confirming_threshold')) {
                obj['confirming_threshold'] = ApiClient.convertToType(data['confirming_threshold'], 'Number');
            }
            if (data.hasOwnProperty('token_approval')) {
                obj['token_approval'] = TransactionTokeApproval.constructFromObject(data['token_approval']);
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('algorithm')) {
                obj['algorithm'] = ApiClient.convertToType(data['algorithm'], 'String');
            }
            if (data.hasOwnProperty('timeline')) {
                obj['timeline'] = ApiClient.convertToType(data['timeline'], [TransactionTimeline]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransactionDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransactionDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['transaction_id'] && !(typeof data['transaction_id'] === 'string' || data['transaction_id'] instanceof String)) {
            throw new Error("Expected the field `transaction_id` to be a primitive type in the JSON string but got " + data['transaction_id']);
        }
        // ensure the json data is a string
        if (data['wallet_id'] && !(typeof data['wallet_id'] === 'string' || data['wallet_id'] instanceof String)) {
            throw new Error("Expected the field `wallet_id` to be a primitive type in the JSON string but got " + data['wallet_id']);
        }
        // ensure the json data is a string
        if (data['request_id'] && !(typeof data['request_id'] === 'string' || data['request_id'] instanceof String)) {
            throw new Error("Expected the field `request_id` to be a primitive type in the JSON string but got " + data['request_id']);
        }
        // ensure the json data is a string
        if (data['cobo_id'] && !(typeof data['cobo_id'] === 'string' || data['cobo_id'] instanceof String)) {
            throw new Error("Expected the field `cobo_id` to be a primitive type in the JSON string but got " + data['cobo_id']);
        }
        if (data['from_address']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['from_address'])) {
                throw new Error("Expected the field `from_address` to be an array in the JSON data but got " + data['from_address']);
            }
            // validate the optional field `from_address` (array)
            for (const item of data['from_address']) {
                TransactionAddress.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['from_info'] && !(typeof data['from_info'] === 'string' || data['from_info'] instanceof String)) {
            throw new Error("Expected the field `from_info` to be a primitive type in the JSON string but got " + data['from_info']);
        }
        if (data['to_address']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['to_address'])) {
                throw new Error("Expected the field `to_address` to be an array in the JSON data but got " + data['to_address']);
            }
            // validate the optional field `to_address` (array)
            for (const item of data['to_address']) {
                TransactionAddress.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['to_info'] && !(typeof data['to_info'] === 'string' || data['to_info'] instanceof String)) {
            throw new Error("Expected the field `to_info` to be a primitive type in the JSON string but got " + data['to_info']);
        }
        // validate the optional field `network`
        if (data['network']) { // data not null
          Network.validateJSON(data['network']);
        }
        // ensure the json data is a string
        if (data['txid'] && !(typeof data['txid'] === 'string' || data['txid'] instanceof String)) {
            throw new Error("Expected the field `txid` to be a primitive type in the JSON string but got " + data['txid']);
        }
        if (data['tokens']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tokens'])) {
                throw new Error("Expected the field `tokens` to be an array in the JSON data but got " + data['tokens']);
            }
            // validate the optional field `tokens` (array)
            for (const item of data['tokens']) {
                TransactionToken.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['category'])) {
            throw new Error("Expected the field `category` to be an array in the JSON data but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['delegate'] && !(typeof data['delegate'] === 'string' || data['delegate'] instanceof String)) {
            throw new Error("Expected the field `delegate` to be a primitive type in the JSON string but got " + data['delegate']);
        }
        // ensure the json data is a string
        if (data['initiator'] && !(typeof data['initiator'] === 'string' || data['initiator'] instanceof String)) {
            throw new Error("Expected the field `initiator` to be a primitive type in the JSON string but got " + data['initiator']);
        }
        if (data['approvers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['approvers'])) {
                throw new Error("Expected the field `approvers` to be an array in the JSON data but got " + data['approvers']);
            }
            // validate the optional field `approvers` (array)
            for (const item of data['approvers']) {
                TransactionApprover.validateJSON(item);
            };
        }
        if (data['signers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['signers'])) {
                throw new Error("Expected the field `signers` to be an array in the JSON data but got " + data['signers']);
            }
            // validate the optional field `signers` (array)
            for (const item of data['signers']) {
                TransactionSigner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['replaced_by'] && !(typeof data['replaced_by'] === 'string' || data['replaced_by'] instanceof String)) {
            throw new Error("Expected the field `replaced_by` to be a primitive type in the JSON string but got " + data['replaced_by']);
        }
        // validate the optional field `fee`
        if (data['fee']) { // data not null
          TransactionFee.validateJSON(data['fee']);
        }
        // ensure the json data is a string
        if (data['fueled_by'] && !(typeof data['fueled_by'] === 'string' || data['fueled_by'] instanceof String)) {
            throw new Error("Expected the field `fueled_by` to be a primitive type in the JSON string but got " + data['fueled_by']);
        }
        // validate the optional field `token_approval`
        if (data['token_approval']) { // data not null
          TransactionTokeApproval.validateJSON(data['token_approval']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['algorithm'] && !(typeof data['algorithm'] === 'string' || data['algorithm'] instanceof String)) {
            throw new Error("Expected the field `algorithm` to be a primitive type in the JSON string but got " + data['algorithm']);
        }
        if (data['timeline']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['timeline'])) {
                throw new Error("Expected the field `timeline` to be an array in the JSON data but got " + data['timeline']);
            }
            // validate the optional field `timeline` (array)
            for (const item of data['timeline']) {
                TransactionTimeline.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Unique transaction ID
 * @member {String} transaction_id
 */
TransactionDetails.prototype['transaction_id'] = undefined;

/**
 * Wallet ID
 * @member {String} wallet_id
 */
TransactionDetails.prototype['wallet_id'] = undefined;

/**
 * Request ID
 * @member {String} request_id
 */
TransactionDetails.prototype['request_id'] = undefined;

/**
 * Cobo ID
 * @member {String} cobo_id
 */
TransactionDetails.prototype['cobo_id'] = undefined;

/**
 * @member {module:model/TransactionStatus} status
 */
TransactionDetails.prototype['status'] = undefined;

/**
 * @member {module:model/TransactionSubStatus} sub_status
 */
TransactionDetails.prototype['sub_status'] = undefined;

/**
 * @member {module:model/TransactionType} type
 */
TransactionDetails.prototype['type'] = undefined;

/**
 * @member {module:model/TransactionAddressType} from_type
 */
TransactionDetails.prototype['from_type'] = undefined;

/**
 * @member {Array.<module:model/TransactionAddress>} from_address
 */
TransactionDetails.prototype['from_address'] = undefined;

/**
 * From wallet info
 * @member {String} from_info
 */
TransactionDetails.prototype['from_info'] = undefined;

/**
 * @member {module:model/TransactionAddressType} to_type
 */
TransactionDetails.prototype['to_type'] = undefined;

/**
 * @member {Array.<module:model/TransactionAddress>} to_address
 */
TransactionDetails.prototype['to_address'] = undefined;

/**
 * To wallet info
 * @member {String} to_info
 */
TransactionDetails.prototype['to_info'] = undefined;

/**
 * @member {module:model/Network} network
 */
TransactionDetails.prototype['network'] = undefined;

/**
 * @member {String} txid
 */
TransactionDetails.prototype['txid'] = undefined;

/**
 * @member {Array.<module:model/TransactionToken>} tokens
 */
TransactionDetails.prototype['tokens'] = undefined;

/**
 * @member {Array.<String>} category
 */
TransactionDetails.prototype['category'] = undefined;

/**
 * @member {String} description
 */
TransactionDetails.prototype['description'] = undefined;

/**
 * Transaction creation time
 * @member {Number} created_time
 */
TransactionDetails.prototype['created_time'] = undefined;

/**
 * Transaction update time
 * @member {Number} updated_time
 */
TransactionDetails.prototype['updated_time'] = undefined;

/**
 * Transaction delegate address
 * @member {String} delegate
 */
TransactionDetails.prototype['delegate'] = undefined;

/**
 * Transaction initiator
 * @member {String} initiator
 */
TransactionDetails.prototype['initiator'] = undefined;

/**
 * @member {Array.<module:model/TransactionApprover>} approvers
 */
TransactionDetails.prototype['approvers'] = undefined;

/**
 * @member {Array.<module:model/TransactionSigner>} signers
 */
TransactionDetails.prototype['signers'] = undefined;

/**
 * Transaction nonce
 * @member {Number} nonce
 */
TransactionDetails.prototype['nonce'] = undefined;

/**
 * Replace by transaction hash
 * @member {String} replaced_by
 */
TransactionDetails.prototype['replaced_by'] = undefined;

/**
 * @member {module:model/TransactionFee} fee
 */
TransactionDetails.prototype['fee'] = undefined;

/**
 * Fueled by address
 * @member {String} fueled_by
 */
TransactionDetails.prototype['fueled_by'] = undefined;

/**
 * Transaction confirmed number
 * @member {Number} confirmed_num
 */
TransactionDetails.prototype['confirmed_num'] = undefined;

/**
 * Number of confirmations required for a transaction, such as 15 for ETH chain.
 * @member {Number} confirming_threshold
 */
TransactionDetails.prototype['confirming_threshold'] = undefined;

/**
 * @member {module:model/TransactionTokeApproval} token_approval
 */
TransactionDetails.prototype['token_approval'] = undefined;

/**
 * Transaction raw message
 * @member {String} message
 */
TransactionDetails.prototype['message'] = undefined;

/**
 * Transaction message signing algorithm
 * @member {String} algorithm
 */
TransactionDetails.prototype['algorithm'] = undefined;

/**
 * @member {Array.<module:model/TransactionTimeline>} timeline
 */
TransactionDetails.prototype['timeline'] = undefined;


// Implement Transaction interface:
/**
 * Unique transaction ID
 * @member {String} transaction_id
 */
Transaction.prototype['transaction_id'] = undefined;
/**
 * Wallet ID
 * @member {String} wallet_id
 */
Transaction.prototype['wallet_id'] = undefined;
/**
 * Request ID
 * @member {String} request_id
 */
Transaction.prototype['request_id'] = undefined;
/**
 * Cobo ID
 * @member {String} cobo_id
 */
Transaction.prototype['cobo_id'] = undefined;
/**
 * @member {module:model/TransactionStatus} status
 */
Transaction.prototype['status'] = undefined;
/**
 * @member {module:model/TransactionSubStatus} sub_status
 */
Transaction.prototype['sub_status'] = undefined;
/**
 * @member {module:model/TransactionType} type
 */
Transaction.prototype['type'] = undefined;
/**
 * @member {module:model/TransactionAddressType} from_type
 */
Transaction.prototype['from_type'] = undefined;
/**
 * @member {Array.<module:model/TransactionAddress>} from_address
 */
Transaction.prototype['from_address'] = undefined;
/**
 * From wallet info
 * @member {String} from_info
 */
Transaction.prototype['from_info'] = undefined;
/**
 * @member {module:model/TransactionAddressType} to_type
 */
Transaction.prototype['to_type'] = undefined;
/**
 * @member {Array.<module:model/TransactionAddress>} to_address
 */
Transaction.prototype['to_address'] = undefined;
/**
 * To wallet info
 * @member {String} to_info
 */
Transaction.prototype['to_info'] = undefined;
/**
 * @member {module:model/Network} network
 */
Transaction.prototype['network'] = undefined;
/**
 * @member {String} txid
 */
Transaction.prototype['txid'] = undefined;
/**
 * @member {Array.<module:model/TransactionToken>} tokens
 */
Transaction.prototype['tokens'] = undefined;
/**
 * @member {Array.<String>} category
 */
Transaction.prototype['category'] = undefined;
/**
 * @member {String} description
 */
Transaction.prototype['description'] = undefined;
/**
 * Transaction creation time
 * @member {Number} created_time
 */
Transaction.prototype['created_time'] = undefined;
/**
 * Transaction update time
 * @member {Number} updated_time
 */
Transaction.prototype['updated_time'] = undefined;
/**
 * Transaction delegate address
 * @member {String} delegate
 */
Transaction.prototype['delegate'] = undefined;




export default TransactionDetails;

