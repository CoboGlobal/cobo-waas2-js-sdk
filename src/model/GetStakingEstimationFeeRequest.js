/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ActivityType from './ActivityType';
import CreateUnstakeActivityExtra from './CreateUnstakeActivityExtra';
import EstimateClaimFee from './EstimateClaimFee';
import EstimateStakeFee from './EstimateStakeFee';
import EstimateUnstakeFee from './EstimateUnstakeFee';
import EstimateWithdrawFee from './EstimateWithdrawFee';
import StakingPoolId from './StakingPoolId';
import StakingSource from './StakingSource';
import TransactionRequestFee from './TransactionRequestFee';

/**
 * The GetStakingEstimationFeeRequest model module.
 * @module model/GetStakingEstimationFeeRequest
 */
class GetStakingEstimationFeeRequest {
    /**
     * Constructs a new <code>GetStakingEstimationFeeRequest</code>.
     * @alias module:model/GetStakingEstimationFeeRequest
     * @param {(module:model/EstimateClaimFee|module:model/EstimateStakeFee|module:model/EstimateUnstakeFee|module:model/EstimateWithdrawFee)} instance The actual instance to initialize GetStakingEstimationFeeRequest.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        var discriminatorValue = instance["activity_type"];

        if (discriminatorValue) {
            switch(discriminatorValue) {
                case "Claim":
                    this.actualInstance = EstimateClaimFee.constructFromObject(instance);
                    match++;
                    break;
                case "Stake":
                    this.actualInstance = EstimateStakeFee.constructFromObject(instance);
                    match++;
                    break;
                case "Unstake":
                    this.actualInstance = EstimateUnstakeFee.constructFromObject(instance);
                    match++;
                    break;
                case "Withdraw":
                    this.actualInstance = EstimateWithdrawFee.constructFromObject(instance);
                    match++;
                    break;
                default:
                    errorMessages.push("Unrecognized discriminator value: " + discriminatorValue);
                    break;
            }
            return;
        }

        try {
            if (instance instanceof EstimateStakeFee) {
                this.actualInstance = instance;
            } else if(!!EstimateStakeFee.validateJSON && EstimateStakeFee.validateJSON(instance)){
                // plain JS object
                // create EstimateStakeFee from JS object
                this.actualInstance = EstimateStakeFee.constructFromObject(instance);
            } else {
                if(EstimateStakeFee.constructFromObject(instance)) {
                    if (!!EstimateStakeFee.constructFromObject(instance).toJSON) {
                        if (EstimateStakeFee.constructFromObject(instance).toJSON()) {
                            this.actualInstance = EstimateStakeFee.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = EstimateStakeFee.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into EstimateStakeFee
            errorMessages.push("Failed to construct EstimateStakeFee: " + err)
        }

        try {
            if (instance instanceof EstimateUnstakeFee) {
                this.actualInstance = instance;
            } else if(!!EstimateUnstakeFee.validateJSON && EstimateUnstakeFee.validateJSON(instance)){
                // plain JS object
                // create EstimateUnstakeFee from JS object
                this.actualInstance = EstimateUnstakeFee.constructFromObject(instance);
            } else {
                if(EstimateUnstakeFee.constructFromObject(instance)) {
                    if (!!EstimateUnstakeFee.constructFromObject(instance).toJSON) {
                        if (EstimateUnstakeFee.constructFromObject(instance).toJSON()) {
                            this.actualInstance = EstimateUnstakeFee.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = EstimateUnstakeFee.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into EstimateUnstakeFee
            errorMessages.push("Failed to construct EstimateUnstakeFee: " + err)
        }

        try {
            if (instance instanceof EstimateWithdrawFee) {
                this.actualInstance = instance;
            } else if(!!EstimateWithdrawFee.validateJSON && EstimateWithdrawFee.validateJSON(instance)){
                // plain JS object
                // create EstimateWithdrawFee from JS object
                this.actualInstance = EstimateWithdrawFee.constructFromObject(instance);
            } else {
                if(EstimateWithdrawFee.constructFromObject(instance)) {
                    if (!!EstimateWithdrawFee.constructFromObject(instance).toJSON) {
                        if (EstimateWithdrawFee.constructFromObject(instance).toJSON()) {
                            this.actualInstance = EstimateWithdrawFee.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = EstimateWithdrawFee.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into EstimateWithdrawFee
            errorMessages.push("Failed to construct EstimateWithdrawFee: " + err)
        }

        try {
            if (instance instanceof EstimateClaimFee) {
                this.actualInstance = instance;
            } else if(!!EstimateClaimFee.validateJSON && EstimateClaimFee.validateJSON(instance)){
                // plain JS object
                // create EstimateClaimFee from JS object
                this.actualInstance = EstimateClaimFee.constructFromObject(instance);
            } else {
                if(EstimateClaimFee.constructFromObject(instance)) {
                    if (!!EstimateClaimFee.constructFromObject(instance).toJSON) {
                        if (EstimateClaimFee.constructFromObject(instance).toJSON()) {
                            this.actualInstance = EstimateClaimFee.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = EstimateClaimFee.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into EstimateClaimFee
            errorMessages.push("Failed to construct EstimateClaimFee: " + err)
        }

        // if (match > 1) {
        //    throw new Error("Multiple matches found constructing `GetStakingEstimationFeeRequest` with oneOf schemas EstimateClaimFee, EstimateStakeFee, EstimateUnstakeFee, EstimateWithdrawFee. Input: " + JSON.stringify(instance));
        // } else
        if (match === 0) {
        //    this.actualInstance = null; // clear the actual instance in case there are multiple matches
        //    throw new Error("No match found constructing `GetStakingEstimationFeeRequest` with oneOf schemas EstimateClaimFee, EstimateStakeFee, EstimateUnstakeFee, EstimateWithdrawFee. Details: " +
        //                    errorMessages.join(", "));
        return;
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>GetStakingEstimationFeeRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetStakingEstimationFeeRequest} obj Optional instance to populate.
     * @return {module:model/GetStakingEstimationFeeRequest} The populated <code>GetStakingEstimationFeeRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        return new GetStakingEstimationFeeRequest(data);
    }

    /**
     * Gets the actual instance, which can be <code>EstimateClaimFee</code>, <code>EstimateStakeFee</code>, <code>EstimateUnstakeFee</code>, <code>EstimateWithdrawFee</code>.
     * @return {(module:model/EstimateClaimFee|module:model/EstimateStakeFee|module:model/EstimateUnstakeFee|module:model/EstimateWithdrawFee)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>EstimateClaimFee</code>, <code>EstimateStakeFee</code>, <code>EstimateUnstakeFee</code>, <code>EstimateWithdrawFee</code>.
     * @param {(module:model/EstimateClaimFee|module:model/EstimateStakeFee|module:model/EstimateUnstakeFee|module:model/EstimateWithdrawFee)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = GetStakingEstimationFeeRequest.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of GetStakingEstimationFeeRequest from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/GetStakingEstimationFeeRequest} An instance of GetStakingEstimationFeeRequest.
     */
    static fromJSON = function(json_string){
        return GetStakingEstimationFeeRequest.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {module:model/ActivityType} activity_type
 */
GetStakingEstimationFeeRequest.prototype['activity_type'] = undefined;

/**
 * The request ID that is used to track a request. The request ID is provided by you and must be unique within your organization.
 * @member {String} request_id
 */
GetStakingEstimationFeeRequest.prototype['request_id'] = undefined;

/**
 * @member {module:model/StakingSource} source
 */
GetStakingEstimationFeeRequest.prototype['source'] = undefined;

/**
 * @member {module:model/StakingPoolId} pool_id
 */
GetStakingEstimationFeeRequest.prototype['pool_id'] = undefined;

/**
 * The amount to withdraw.
 * @member {String} amount
 */
GetStakingEstimationFeeRequest.prototype['amount'] = undefined;

/**
 * @member {module:model/TransactionRequestFee} fee
 */
GetStakingEstimationFeeRequest.prototype['fee'] = undefined;

/**
 * @member {module:model/CreateUnstakeActivityExtra} extra
 */
GetStakingEstimationFeeRequest.prototype['extra'] = undefined;

/**
 * The ID of the staking position. You can retrieve a list of staking positions by calling [List staking positions](https://www.cobo.com/developers/v2/api-references/stakings/list-staking-positions).
 * @member {String} staking_id
 */
GetStakingEstimationFeeRequest.prototype['staking_id'] = undefined;


GetStakingEstimationFeeRequest.OneOf = ["EstimateClaimFee", "EstimateStakeFee", "EstimateUnstakeFee", "EstimateWithdrawFee"];

export default GetStakingEstimationFeeRequest;

