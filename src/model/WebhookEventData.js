/**
 * Cobo Wallet as a Service 2.0
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TransactionDestination from './TransactionDestination';
import TransactionEventData from './TransactionEventData';
import TransactionFee from './TransactionFee';
import TransactionInitiatorType from './TransactionInitiatorType';
import TransactionReplacement from './TransactionReplacement';
import TransactionSource from './TransactionSource';
import TransactionStatus from './TransactionStatus';
import TransactionSubStatus from './TransactionSubStatus';
import TransactionType from './TransactionType';

/**
 * The WebhookEventData model module.
 * @module model/WebhookEventData
 * @version 0.2.7
 */
class WebhookEventData {
    /**
     * Constructs a new <code>WebhookEventData</code>.
     * @alias module:model/WebhookEventData
     * @param {(module:model/TransactionEventData)} instance The actual instance to initialize WebhookEventData.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "TransactionEventData") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                TransactionEventData.validateJSON(instance); // throw an exception if no match
                // create TransactionEventData from JS object
                this.actualInstance = TransactionEventData.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TransactionEventData
            errorMessages.push("Failed to construct TransactionEventData: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `WebhookEventData` with oneOf schemas TransactionEventData. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `WebhookEventData` with oneOf schemas TransactionEventData. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>WebhookEventData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WebhookEventData} obj Optional instance to populate.
     * @return {module:model/WebhookEventData} The populated <code>WebhookEventData</code> instance.
     */
    static constructFromObject(data, obj) {
        return new WebhookEventData(data);
    }

    /**
     * Gets the actual instance, which can be <code>TransactionEventData</code>.
     * @return {(module:model/TransactionEventData)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>TransactionEventData</code>.
     * @param {(module:model/TransactionEventData)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = WebhookEventData.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of WebhookEventData from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/WebhookEventData} An instance of WebhookEventData.
     */
    static fromJSON = function(json_string){
        return WebhookEventData.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * The model of data.
 * @member {module:model/WebhookEventData.DataTypeEnum} data_type
 */
WebhookEventData.prototype['data_type'] = undefined;

/**
 * The transaction ID.
 * @member {String} transaction_id
 */
WebhookEventData.prototype['transaction_id'] = undefined;

/**
 * The Cobo ID, which can be used to track a transaction.
 * @member {String} cobo_id
 */
WebhookEventData.prototype['cobo_id'] = undefined;

/**
 * The request ID that is used to track a withdrawal request. The request ID is provided by you and must be unique within your organization.
 * @member {String} request_id
 */
WebhookEventData.prototype['request_id'] = undefined;

/**
 * The wallet ID of the transaction.
 * @member {String} wallet_id
 */
WebhookEventData.prototype['wallet_id'] = undefined;

/**
 * @member {module:model/TransactionType} type
 */
WebhookEventData.prototype['type'] = undefined;

/**
 * @member {module:model/TransactionStatus} status
 */
WebhookEventData.prototype['status'] = undefined;

/**
 * @member {module:model/TransactionSubStatus} sub_status
 */
WebhookEventData.prototype['sub_status'] = undefined;

/**
 * The reason why the transaction failed. This property only applies to approval failures and signature failures.
 * @member {String} failed_reason
 */
WebhookEventData.prototype['failed_reason'] = undefined;

/**
 * The chain ID, which is the unique identifier of a blockchain. You can retrieve the IDs of all the chains you can use by calling [List enabled chains](/developers/v2/api-references/wallets/list-enabled-chains).
 * @member {String} chain_id
 */
WebhookEventData.prototype['chain_id'] = undefined;

/**
 * @member {module:model/TransactionSource} source
 */
WebhookEventData.prototype['source'] = undefined;

/**
 * @member {module:model/TransactionDestination} destination
 */
WebhookEventData.prototype['destination'] = undefined;

/**
 * @member {module:model/TransactionFee} fee
 */
WebhookEventData.prototype['fee'] = undefined;

/**
 * The transaction initiator.
 * @member {String} initiator
 */
WebhookEventData.prototype['initiator'] = undefined;

/**
 * @member {module:model/TransactionInitiatorType} initiator_type
 */
WebhookEventData.prototype['initiator_type'] = undefined;

/**
 * The number of confirmations this transaction has received.
 * @member {Number} confirmed_num
 */
WebhookEventData.prototype['confirmed_num'] = undefined;

/**
 * The minimum number of confirmations required to deem a transaction secure. The common threshold is 6 for a Bitcoin transaction.
 * @member {Number} confirming_threshold
 */
WebhookEventData.prototype['confirming_threshold'] = undefined;

/**
 * The block number.
 * @member {Number} block_number
 */
WebhookEventData.prototype['block_number'] = undefined;

/**
 * The time when the block was created, in Unix timestamp format, measured in milliseconds.
 * @member {Number} block_time
 */
WebhookEventData.prototype['block_time'] = undefined;

/**
 * The block hash.
 * @member {String} block_hash
 */
WebhookEventData.prototype['block_hash'] = undefined;

/**
 * The transaction nonce.
 * @member {Number} nonce
 */
WebhookEventData.prototype['nonce'] = undefined;

/**
 * The transaction hash.
 * @member {String} transaction_hash
 */
WebhookEventData.prototype['transaction_hash'] = undefined;

/**
 * @member {module:model/TransactionReplacement} replacement
 */
WebhookEventData.prototype['replacement'] = undefined;

/**
 * A custom transaction category for you to identify your transfers more easily.
 * @member {Array.<String>} category
 */
WebhookEventData.prototype['category'] = undefined;

/**
 * The description for your transaction.
 * @member {String} description
 */
WebhookEventData.prototype['description'] = undefined;

/**
 * Whether the transaction request must be executed as a Loop transfer. For more information about Loop, see [Loop's website](https://loop.top/).   - `true`: The transaction request must be executed as a Loop transfer.   - `false`: The transaction request may not be executed as a Loop transfer. 
 * @member {Boolean} force_internal
 */
WebhookEventData.prototype['force_internal'] = undefined;

/**
 * Whether the transaction request must not be executed as a Loop transfer. For more information about Loop, see [Loop's website](https://loop.top/).   - `true`: The transaction request must not be executed as a Loop transfer.   - `false`: The transaction request can be executed as a Loop transfer. 
 * @member {Boolean} force_external
 */
WebhookEventData.prototype['force_external'] = undefined;

/**
 * Whether the transaction is a Loop transfer. For more information about Loop, see [Loop's website](https://loop.top/).  - `true`: The transaction is a Loop transfer. - `false`: The transaction is not a Loop transfer. 
 * @member {Boolean} is_loop
 */
WebhookEventData.prototype['is_loop'] = undefined;

/**
 * The time when the transaction was created, in Unix timestamp format, measured in milliseconds.
 * @member {Number} created_time
 */
WebhookEventData.prototype['created_time'] = undefined;

/**
 * The time when the transaction was updated, in Unix timestamp format, measured in milliseconds.
 * @member {Number} updated_time
 */
WebhookEventData.prototype['updated_time'] = undefined;


WebhookEventData.OneOf = ["TransactionEventData"];

export default WebhookEventData;

