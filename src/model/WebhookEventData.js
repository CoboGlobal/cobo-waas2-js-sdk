/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AddressesEventData from './AddressesEventData';
import AddressesEventDataAllOfAddresses from './AddressesEventDataAllOfAddresses';
import Balance from './Balance';
import BalanceUpdateInfoEventData from './BalanceUpdateInfoEventData';
import ChainInfo from './ChainInfo';
import ChainsEventData from './ChainsEventData';
import MPCVaultEventData from './MPCVaultEventData';
import MPCVaultType from './MPCVaultType';
import PaymentOrderEventData from './PaymentOrderEventData';
import PaymentRefundEventData from './PaymentRefundEventData';
import PaymentSettlementEvent from './PaymentSettlementEvent';
import PaymentTransaction from './PaymentTransaction';
import RefundType from './RefundType';
import RootPubkey from './RootPubkey';
import SettleRequestStatus from './SettleRequestStatus';
import SettleStatus from './SettleStatus';
import SettlementDetail from './SettlementDetail';
import SourceGroup from './SourceGroup';
import SuspendedTokenEventData from './SuspendedTokenEventData';
import SuspendedTokenOperationType from './SuspendedTokenOperationType';
import TSSRequestWebhookEventData from './TSSRequestWebhookEventData';
import TokenInfo from './TokenInfo';
import TokenListingEventData from './TokenListingEventData';
import TokenListingRequestSource from './TokenListingRequestSource';
import TokensEventData from './TokensEventData';
import TransactionBlockInfo from './TransactionBlockInfo';
import TransactionDestination from './TransactionDestination';
import TransactionFee from './TransactionFee';
import TransactionFuelingInfo from './TransactionFuelingInfo';
import TransactionInitiatorType from './TransactionInitiatorType';
import TransactionRawTxInfo from './TransactionRawTxInfo';
import TransactionReplacement from './TransactionReplacement';
import TransactionResult from './TransactionResult';
import TransactionSubStatus from './TransactionSubStatus';
import TransactionWebhookEventData from './TransactionWebhookEventData';
import WalletInfo from './WalletInfo';
import WalletInfoEventData from './WalletInfoEventData';
import WalletSubtype from './WalletSubtype';
import WalletType from './WalletType';

/**
 * The WebhookEventData model module.
 * @module model/WebhookEventData
 */
class WebhookEventData {
    /**
     * Constructs a new <code>WebhookEventData</code>.
     * @alias module:model/WebhookEventData
     * @param {(module:model/AddressesEventData|module:model/BalanceUpdateInfoEventData|module:model/ChainsEventData|module:model/MPCVaultEventData|module:model/PaymentOrderEventData|module:model/PaymentRefundEventData|module:model/PaymentSettlementEvent|module:model/SuspendedTokenEventData|module:model/TSSRequestWebhookEventData|module:model/TokenListingEventData|module:model/TokensEventData|module:model/TransactionWebhookEventData|module:model/WalletInfoEventData)} instance The actual instance to initialize WebhookEventData.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        var discriminatorValue = instance["data_type"];

        if (discriminatorValue) {
            switch(discriminatorValue) {
                case "Addresses":
                    this.actualInstance = AddressesEventData.constructFromObject(instance);
                    match++;
                    break;
                case "BalanceUpdateInfo":
                    this.actualInstance = BalanceUpdateInfoEventData.constructFromObject(instance);
                    match++;
                    break;
                case "Chains":
                    this.actualInstance = ChainsEventData.constructFromObject(instance);
                    match++;
                    break;
                case "MPCVault":
                    this.actualInstance = MPCVaultEventData.constructFromObject(instance);
                    match++;
                    break;
                case "PaymentOrder":
                    this.actualInstance = PaymentOrderEventData.constructFromObject(instance);
                    match++;
                    break;
                case "PaymentRefund":
                    this.actualInstance = PaymentRefundEventData.constructFromObject(instance);
                    match++;
                    break;
                case "PaymentSettlement":
                    this.actualInstance = PaymentSettlementEvent.constructFromObject(instance);
                    match++;
                    break;
                case "SuspendedToken":
                    this.actualInstance = SuspendedTokenEventData.constructFromObject(instance);
                    match++;
                    break;
                case "TSSRequest":
                    this.actualInstance = TSSRequestWebhookEventData.constructFromObject(instance);
                    match++;
                    break;
                case "TokenListing":
                    this.actualInstance = TokenListingEventData.constructFromObject(instance);
                    match++;
                    break;
                case "Tokens":
                    this.actualInstance = TokensEventData.constructFromObject(instance);
                    match++;
                    break;
                case "Transaction":
                    this.actualInstance = TransactionWebhookEventData.constructFromObject(instance);
                    match++;
                    break;
                case "WalletInfo":
                    this.actualInstance = WalletInfoEventData.constructFromObject(instance);
                    match++;
                    break;
                default:
                    errorMessages.push("Unrecognized discriminator value: " + discriminatorValue);
                    break;
            }
            return;
        }

        try {
            if (instance instanceof TransactionWebhookEventData) {
                this.actualInstance = instance;
            } else if(!!TransactionWebhookEventData.validateJSON && TransactionWebhookEventData.validateJSON(instance)){
                // plain JS object
                // create TransactionWebhookEventData from JS object
                this.actualInstance = TransactionWebhookEventData.constructFromObject(instance);
            } else {
                if(TransactionWebhookEventData.constructFromObject(instance)) {
                    if (!!TransactionWebhookEventData.constructFromObject(instance).toJSON) {
                        if (TransactionWebhookEventData.constructFromObject(instance).toJSON()) {
                            this.actualInstance = TransactionWebhookEventData.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = TransactionWebhookEventData.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TransactionWebhookEventData
            errorMessages.push("Failed to construct TransactionWebhookEventData: " + err)
        }

        try {
            if (instance instanceof TSSRequestWebhookEventData) {
                this.actualInstance = instance;
            } else if(!!TSSRequestWebhookEventData.validateJSON && TSSRequestWebhookEventData.validateJSON(instance)){
                // plain JS object
                // create TSSRequestWebhookEventData from JS object
                this.actualInstance = TSSRequestWebhookEventData.constructFromObject(instance);
            } else {
                if(TSSRequestWebhookEventData.constructFromObject(instance)) {
                    if (!!TSSRequestWebhookEventData.constructFromObject(instance).toJSON) {
                        if (TSSRequestWebhookEventData.constructFromObject(instance).toJSON()) {
                            this.actualInstance = TSSRequestWebhookEventData.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = TSSRequestWebhookEventData.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TSSRequestWebhookEventData
            errorMessages.push("Failed to construct TSSRequestWebhookEventData: " + err)
        }

        try {
            if (instance instanceof AddressesEventData) {
                this.actualInstance = instance;
            } else if(!!AddressesEventData.validateJSON && AddressesEventData.validateJSON(instance)){
                // plain JS object
                // create AddressesEventData from JS object
                this.actualInstance = AddressesEventData.constructFromObject(instance);
            } else {
                if(AddressesEventData.constructFromObject(instance)) {
                    if (!!AddressesEventData.constructFromObject(instance).toJSON) {
                        if (AddressesEventData.constructFromObject(instance).toJSON()) {
                            this.actualInstance = AddressesEventData.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = AddressesEventData.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into AddressesEventData
            errorMessages.push("Failed to construct AddressesEventData: " + err)
        }

        try {
            if (instance instanceof WalletInfoEventData) {
                this.actualInstance = instance;
            } else if(!!WalletInfoEventData.validateJSON && WalletInfoEventData.validateJSON(instance)){
                // plain JS object
                // create WalletInfoEventData from JS object
                this.actualInstance = WalletInfoEventData.constructFromObject(instance);
            } else {
                if(WalletInfoEventData.constructFromObject(instance)) {
                    if (!!WalletInfoEventData.constructFromObject(instance).toJSON) {
                        if (WalletInfoEventData.constructFromObject(instance).toJSON()) {
                            this.actualInstance = WalletInfoEventData.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = WalletInfoEventData.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into WalletInfoEventData
            errorMessages.push("Failed to construct WalletInfoEventData: " + err)
        }

        try {
            if (instance instanceof MPCVaultEventData) {
                this.actualInstance = instance;
            } else if(!!MPCVaultEventData.validateJSON && MPCVaultEventData.validateJSON(instance)){
                // plain JS object
                // create MPCVaultEventData from JS object
                this.actualInstance = MPCVaultEventData.constructFromObject(instance);
            } else {
                if(MPCVaultEventData.constructFromObject(instance)) {
                    if (!!MPCVaultEventData.constructFromObject(instance).toJSON) {
                        if (MPCVaultEventData.constructFromObject(instance).toJSON()) {
                            this.actualInstance = MPCVaultEventData.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = MPCVaultEventData.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into MPCVaultEventData
            errorMessages.push("Failed to construct MPCVaultEventData: " + err)
        }

        try {
            if (instance instanceof ChainsEventData) {
                this.actualInstance = instance;
            } else if(!!ChainsEventData.validateJSON && ChainsEventData.validateJSON(instance)){
                // plain JS object
                // create ChainsEventData from JS object
                this.actualInstance = ChainsEventData.constructFromObject(instance);
            } else {
                if(ChainsEventData.constructFromObject(instance)) {
                    if (!!ChainsEventData.constructFromObject(instance).toJSON) {
                        if (ChainsEventData.constructFromObject(instance).toJSON()) {
                            this.actualInstance = ChainsEventData.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = ChainsEventData.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ChainsEventData
            errorMessages.push("Failed to construct ChainsEventData: " + err)
        }

        try {
            if (instance instanceof TokensEventData) {
                this.actualInstance = instance;
            } else if(!!TokensEventData.validateJSON && TokensEventData.validateJSON(instance)){
                // plain JS object
                // create TokensEventData from JS object
                this.actualInstance = TokensEventData.constructFromObject(instance);
            } else {
                if(TokensEventData.constructFromObject(instance)) {
                    if (!!TokensEventData.constructFromObject(instance).toJSON) {
                        if (TokensEventData.constructFromObject(instance).toJSON()) {
                            this.actualInstance = TokensEventData.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = TokensEventData.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TokensEventData
            errorMessages.push("Failed to construct TokensEventData: " + err)
        }

        try {
            if (instance instanceof TokenListingEventData) {
                this.actualInstance = instance;
            } else if(!!TokenListingEventData.validateJSON && TokenListingEventData.validateJSON(instance)){
                // plain JS object
                // create TokenListingEventData from JS object
                this.actualInstance = TokenListingEventData.constructFromObject(instance);
            } else {
                if(TokenListingEventData.constructFromObject(instance)) {
                    if (!!TokenListingEventData.constructFromObject(instance).toJSON) {
                        if (TokenListingEventData.constructFromObject(instance).toJSON()) {
                            this.actualInstance = TokenListingEventData.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = TokenListingEventData.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TokenListingEventData
            errorMessages.push("Failed to construct TokenListingEventData: " + err)
        }

        try {
            if (instance instanceof BalanceUpdateInfoEventData) {
                this.actualInstance = instance;
            } else if(!!BalanceUpdateInfoEventData.validateJSON && BalanceUpdateInfoEventData.validateJSON(instance)){
                // plain JS object
                // create BalanceUpdateInfoEventData from JS object
                this.actualInstance = BalanceUpdateInfoEventData.constructFromObject(instance);
            } else {
                if(BalanceUpdateInfoEventData.constructFromObject(instance)) {
                    if (!!BalanceUpdateInfoEventData.constructFromObject(instance).toJSON) {
                        if (BalanceUpdateInfoEventData.constructFromObject(instance).toJSON()) {
                            this.actualInstance = BalanceUpdateInfoEventData.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = BalanceUpdateInfoEventData.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into BalanceUpdateInfoEventData
            errorMessages.push("Failed to construct BalanceUpdateInfoEventData: " + err)
        }

        try {
            if (instance instanceof SuspendedTokenEventData) {
                this.actualInstance = instance;
            } else if(!!SuspendedTokenEventData.validateJSON && SuspendedTokenEventData.validateJSON(instance)){
                // plain JS object
                // create SuspendedTokenEventData from JS object
                this.actualInstance = SuspendedTokenEventData.constructFromObject(instance);
            } else {
                if(SuspendedTokenEventData.constructFromObject(instance)) {
                    if (!!SuspendedTokenEventData.constructFromObject(instance).toJSON) {
                        if (SuspendedTokenEventData.constructFromObject(instance).toJSON()) {
                            this.actualInstance = SuspendedTokenEventData.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = SuspendedTokenEventData.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into SuspendedTokenEventData
            errorMessages.push("Failed to construct SuspendedTokenEventData: " + err)
        }

        try {
            if (instance instanceof PaymentOrderEventData) {
                this.actualInstance = instance;
            } else if(!!PaymentOrderEventData.validateJSON && PaymentOrderEventData.validateJSON(instance)){
                // plain JS object
                // create PaymentOrderEventData from JS object
                this.actualInstance = PaymentOrderEventData.constructFromObject(instance);
            } else {
                if(PaymentOrderEventData.constructFromObject(instance)) {
                    if (!!PaymentOrderEventData.constructFromObject(instance).toJSON) {
                        if (PaymentOrderEventData.constructFromObject(instance).toJSON()) {
                            this.actualInstance = PaymentOrderEventData.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = PaymentOrderEventData.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into PaymentOrderEventData
            errorMessages.push("Failed to construct PaymentOrderEventData: " + err)
        }

        try {
            if (instance instanceof PaymentRefundEventData) {
                this.actualInstance = instance;
            } else if(!!PaymentRefundEventData.validateJSON && PaymentRefundEventData.validateJSON(instance)){
                // plain JS object
                // create PaymentRefundEventData from JS object
                this.actualInstance = PaymentRefundEventData.constructFromObject(instance);
            } else {
                if(PaymentRefundEventData.constructFromObject(instance)) {
                    if (!!PaymentRefundEventData.constructFromObject(instance).toJSON) {
                        if (PaymentRefundEventData.constructFromObject(instance).toJSON()) {
                            this.actualInstance = PaymentRefundEventData.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = PaymentRefundEventData.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into PaymentRefundEventData
            errorMessages.push("Failed to construct PaymentRefundEventData: " + err)
        }

        try {
            if (instance instanceof PaymentSettlementEvent) {
                this.actualInstance = instance;
            } else if(!!PaymentSettlementEvent.validateJSON && PaymentSettlementEvent.validateJSON(instance)){
                // plain JS object
                // create PaymentSettlementEvent from JS object
                this.actualInstance = PaymentSettlementEvent.constructFromObject(instance);
            } else {
                if(PaymentSettlementEvent.constructFromObject(instance)) {
                    if (!!PaymentSettlementEvent.constructFromObject(instance).toJSON) {
                        if (PaymentSettlementEvent.constructFromObject(instance).toJSON()) {
                            this.actualInstance = PaymentSettlementEvent.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = PaymentSettlementEvent.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into PaymentSettlementEvent
            errorMessages.push("Failed to construct PaymentSettlementEvent: " + err)
        }

        // if (match > 1) {
        //    throw new Error("Multiple matches found constructing `WebhookEventData` with oneOf schemas AddressesEventData, BalanceUpdateInfoEventData, ChainsEventData, MPCVaultEventData, PaymentOrderEventData, PaymentRefundEventData, PaymentSettlementEvent, SuspendedTokenEventData, TSSRequestWebhookEventData, TokenListingEventData, TokensEventData, TransactionWebhookEventData, WalletInfoEventData. Input: " + JSON.stringify(instance));
        // } else
        if (match === 0) {
        //    this.actualInstance = null; // clear the actual instance in case there are multiple matches
        //    throw new Error("No match found constructing `WebhookEventData` with oneOf schemas AddressesEventData, BalanceUpdateInfoEventData, ChainsEventData, MPCVaultEventData, PaymentOrderEventData, PaymentRefundEventData, PaymentSettlementEvent, SuspendedTokenEventData, TSSRequestWebhookEventData, TokenListingEventData, TokensEventData, TransactionWebhookEventData, WalletInfoEventData. Details: " +
        //                    errorMessages.join(", "));
        return;
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>WebhookEventData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WebhookEventData} obj Optional instance to populate.
     * @return {module:model/WebhookEventData} The populated <code>WebhookEventData</code> instance.
     */
    static constructFromObject(data, obj) {
        return new WebhookEventData(data);
    }

    /**
     * Gets the actual instance, which can be <code>AddressesEventData</code>, <code>BalanceUpdateInfoEventData</code>, <code>ChainsEventData</code>, <code>MPCVaultEventData</code>, <code>PaymentOrderEventData</code>, <code>PaymentRefundEventData</code>, <code>PaymentSettlementEvent</code>, <code>SuspendedTokenEventData</code>, <code>TSSRequestWebhookEventData</code>, <code>TokenListingEventData</code>, <code>TokensEventData</code>, <code>TransactionWebhookEventData</code>, <code>WalletInfoEventData</code>.
     * @return {(module:model/AddressesEventData|module:model/BalanceUpdateInfoEventData|module:model/ChainsEventData|module:model/MPCVaultEventData|module:model/PaymentOrderEventData|module:model/PaymentRefundEventData|module:model/PaymentSettlementEvent|module:model/SuspendedTokenEventData|module:model/TSSRequestWebhookEventData|module:model/TokenListingEventData|module:model/TokensEventData|module:model/TransactionWebhookEventData|module:model/WalletInfoEventData)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>AddressesEventData</code>, <code>BalanceUpdateInfoEventData</code>, <code>ChainsEventData</code>, <code>MPCVaultEventData</code>, <code>PaymentOrderEventData</code>, <code>PaymentRefundEventData</code>, <code>PaymentSettlementEvent</code>, <code>SuspendedTokenEventData</code>, <code>TSSRequestWebhookEventData</code>, <code>TokenListingEventData</code>, <code>TokensEventData</code>, <code>TransactionWebhookEventData</code>, <code>WalletInfoEventData</code>.
     * @param {(module:model/AddressesEventData|module:model/BalanceUpdateInfoEventData|module:model/ChainsEventData|module:model/MPCVaultEventData|module:model/PaymentOrderEventData|module:model/PaymentRefundEventData|module:model/PaymentSettlementEvent|module:model/SuspendedTokenEventData|module:model/TSSRequestWebhookEventData|module:model/TokenListingEventData|module:model/TokensEventData|module:model/TransactionWebhookEventData|module:model/WalletInfoEventData)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = WebhookEventData.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of WebhookEventData from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/WebhookEventData} An instance of WebhookEventData.
     */
    static fromJSON = function(json_string){
        return WebhookEventData.constructFromObject(JSON.parse(json_string));
    }
}

/**
 *  The data type of the event. - `Transaction`: The transaction event data. - `TSSRequest`: The TSS request event data. - `Addresses`: The addresses event data. - `WalletInfo`: The wallet information event data. - `MPCVault`: The MPC vault event data. - `Chains`: The enabled chain event data. - `Tokens`: The enabled token event data. - `TokenListing`: The token listing event data.        - `PaymentOrder`: The payment order event data. - `PaymentRefund`: The payment refund event data. - `PaymentSettlement`: The payment settlement event data. - `BalanceUpdateInfo`: The balance update event data. - `SuspendedToken`: The token suspension event data.
 * @member {module:model/WebhookEventData.DataTypeEnum} data_type
 */
WebhookEventData.prototype['data_type'] = undefined;

/**
 * The transaction ID.
 * @member {String} transaction_id
 */
WebhookEventData.prototype['transaction_id'] = undefined;

/**
 * The Cobo ID, which can be used to track a transaction.
 * @member {String} cobo_id
 */
WebhookEventData.prototype['cobo_id'] = undefined;

/**
 * The request ID provided by you when creating the settlement request.
 * @member {String} request_id
 */
WebhookEventData.prototype['request_id'] = undefined;

/**
 * For deposit transactions, this property represents the wallet ID of the transaction destination. For transactions of other types, this property represents the wallet ID of the transaction source.
 * @member {String} wallet_id
 */
WebhookEventData.prototype['wallet_id'] = undefined;

/**
 * @member {module:model/MPCVaultType} type
 */
WebhookEventData.prototype['type'] = undefined;

/**
 * @member {module:model/SettleRequestStatus} status
 */
WebhookEventData.prototype['status'] = undefined;

/**
 * @member {module:model/TransactionSubStatus} sub_status
 */
WebhookEventData.prototype['sub_status'] = undefined;

/**
 * (This property is applicable to approval failures and signature failures only) The reason why the transaction failed.
 * @member {String} failed_reason
 */
WebhookEventData.prototype['failed_reason'] = undefined;

/**
 * The ID of the blockchain network on which the refund transaction occurs.
 * @member {String} chain_id
 */
WebhookEventData.prototype['chain_id'] = undefined;

/**
 * The ID of the cryptocurrency used for refund.
 * @member {String} token_id
 */
WebhookEventData.prototype['token_id'] = undefined;

/**
 * (This concept applies to Exchange Wallets only) The asset ID. An asset ID is the unique identifier of the asset held within your linked exchange account.
 * @member {String} asset_id
 */
WebhookEventData.prototype['asset_id'] = undefined;

/**
 * @member {module:model/TokenListingRequestSource} source
 */
WebhookEventData.prototype['source'] = undefined;

/**
 * @member {module:model/TransactionDestination} destination
 */
WebhookEventData.prototype['destination'] = undefined;

/**
 * @member {module:model/TransactionResult} result
 */
WebhookEventData.prototype['result'] = undefined;

/**
 * @member {module:model/TransactionFee} fee
 */
WebhookEventData.prototype['fee'] = undefined;

/**
 *  The initiator of this settlement request. Can return either an API key or the Payment Management App's ID.  - Format `api_key_<API_KEY>`: Indicates the settlement request was initiated via the Payment API using the API key. - Format `app_<APP_ID>`: Indicates the settlement request was initiated through the Payment Management App using the App ID. 
 * @member {String} initiator
 */
WebhookEventData.prototype['initiator'] = undefined;

/**
 * @member {module:model/TransactionInitiatorType} initiator_type
 */
WebhookEventData.prototype['initiator_type'] = undefined;

/**
 * The number of confirmations this transaction has received.
 * @member {Number} confirmed_num
 */
WebhookEventData.prototype['confirmed_num'] = undefined;

/**
 * The minimum number of confirmations required to deem a transaction secure. The common threshold is 6 for a Bitcoin transaction.
 * @member {Number} confirming_threshold
 */
WebhookEventData.prototype['confirming_threshold'] = undefined;

/**
 * The transaction hash.
 * @member {String} transaction_hash
 */
WebhookEventData.prototype['transaction_hash'] = undefined;

/**
 * @member {module:model/TransactionBlockInfo} block_info
 */
WebhookEventData.prototype['block_info'] = undefined;

/**
 * @member {module:model/TransactionRawTxInfo} raw_tx_info
 */
WebhookEventData.prototype['raw_tx_info'] = undefined;

/**
 * @member {module:model/TransactionReplacement} replacement
 */
WebhookEventData.prototype['replacement'] = undefined;

/**
 * A custom transaction category for you to identify your transfers more easily.
 * @member {Array.<String>} category
 */
WebhookEventData.prototype['category'] = undefined;

/**
 * The description of the TSS request.
 * @member {String} description
 */
WebhookEventData.prototype['description'] = undefined;

/**
 * Whether the transaction was executed as a [Cobo Loop](https://manuals.cobo.com/en/portal/custodial-wallets/cobo-loop) transfer. - `true`: The transaction was executed as a Cobo Loop transfer. - `false`: The transaction was not executed as a Cobo Loop transfer. 
 * @member {Boolean} is_loop
 */
WebhookEventData.prototype['is_loop'] = undefined;

/**
 * The transaction category defined by Cobo. Possible values include:  - `AutoSweep`: An auto-sweep transaction. - `AutoFueling`: A transaction where Fee Station pays transaction fees to an address within your wallet. - `AutoFuelingRefund`: A refund for an auto-fueling transaction. - `SafeTxMessage`: A message signing transaction to authorize a Smart Contract Wallet (Safe\\{Wallet\\}) transaction. - `BillPayment`: A transaction to pay Cobo bills through Fee Station. - `BillRefund`: A refund for a previously made bill payment. - `CommissionFeeCharge`: A transaction to charge commission fees via Fee Station. - `CommissionFeeRefund`: A refund of previously charged commission fees. 
 * @member {Array.<String>} cobo_category
 */
WebhookEventData.prototype['cobo_category'] = undefined;

/**
 * A list of JSON-encoded strings containing structured, business-specific extra information for the transaction. Each item corresponds to a specific data type, indicated by the `extra_type` field in the JSON object (for example, \"BabylonBusinessInfo\", \"BtcAddressInfo\"). 
 * @member {Array.<String>} extra
 */
WebhookEventData.prototype['extra'] = undefined;

/**
 * @member {module:model/TransactionFuelingInfo} fueling_info
 */
WebhookEventData.prototype['fueling_info'] = undefined;

/**
 * The creation time of the settlement request, represented as a UNIX timestamp in seconds.
 * @member {Number} created_timestamp
 */
WebhookEventData.prototype['created_timestamp'] = undefined;

/**
 * The last update time of the settlement request, represented as a UNIX timestamp in seconds.
 * @member {Number} updated_timestamp
 */
WebhookEventData.prototype['updated_timestamp'] = undefined;

/**
 * The TSS request ID.
 * @member {String} tss_request_id
 */
WebhookEventData.prototype['tss_request_id'] = undefined;

/**
 * @member {module:model/SourceGroup} source_key_share_holder_group
 */
WebhookEventData.prototype['source_key_share_holder_group'] = undefined;

/**
 * The target key share holder group ID.
 * @member {String} target_key_share_holder_group_id
 */
WebhookEventData.prototype['target_key_share_holder_group_id'] = undefined;

/**
 * A list of addresses.
 * @member {Array.<module:model/AddressesEventDataAllOfAddresses>} addresses
 */
WebhookEventData.prototype['addresses'] = undefined;

/**
 * @member {module:model/WalletInfo} wallet
 */
WebhookEventData.prototype['wallet'] = undefined;

/**
 * The vault ID.
 * @member {String} vault_id
 */
WebhookEventData.prototype['vault_id'] = undefined;

/**
 * The project ID.
 * @member {String} project_id
 */
WebhookEventData.prototype['project_id'] = undefined;

/**
 * The vault name.
 * @member {String} name
 */
WebhookEventData.prototype['name'] = undefined;

/**
 * @member {Array.<module:model/RootPubkey>} root_pubkeys
 */
WebhookEventData.prototype['root_pubkeys'] = undefined;

/**
 * The enabled chains.
 * @member {Array.<module:model/ChainInfo>} chains
 */
WebhookEventData.prototype['chains'] = undefined;

/**
 * @member {module:model/WalletType} wallet_type
 */
WebhookEventData.prototype['wallet_type'] = undefined;

/**
 * @member {Array.<module:model/WalletSubtype>} wallet_subtypes
 */
WebhookEventData.prototype['wallet_subtypes'] = undefined;

/**
 * The enabled tokens.
 * @member {Array.<module:model/TokenInfo>} tokens
 */
WebhookEventData.prototype['tokens'] = undefined;

/**
 * The token's contract address on the specified blockchain.
 * @member {String} contract_address
 */
WebhookEventData.prototype['contract_address'] = undefined;

/**
 * @member {module:model/WalletSubtype} wallet_subtype
 */
WebhookEventData.prototype['wallet_subtype'] = undefined;

/**
 * @member {module:model/TokenInfo} token
 */
WebhookEventData.prototype['token'] = undefined;

/**
 * The feedback provided by Cobo when a token listing request is rejected.
 * @member {String} feedback
 */
WebhookEventData.prototype['feedback'] = undefined;

/**
 * The wallet address.
 * @member {String} address
 */
WebhookEventData.prototype['address'] = undefined;

/**
 * The wallet ID.
 * @member {String} wallet_uuid
 */
WebhookEventData.prototype['wallet_uuid'] = undefined;

/**
 * @member {module:model/Balance} balance
 */
WebhookEventData.prototype['balance'] = undefined;

/**
 * A list of token IDs, separated by comma.
 * @member {String} token_ids
 */
WebhookEventData.prototype['token_ids'] = undefined;

/**
 * @member {module:model/SuspendedTokenOperationType} operation_type
 */
WebhookEventData.prototype['operation_type'] = undefined;

/**
 * The ID of the pay-in order corresponding to this refund.
 * @member {String} order_id
 */
WebhookEventData.prototype['order_id'] = undefined;

/**
 * The merchant ID.
 * @member {String} merchant_id
 */
WebhookEventData.prototype['merchant_id'] = undefined;

/**
 * The cryptocurrency amount to be paid for this order.
 * @member {String} payable_amount
 */
WebhookEventData.prototype['payable_amount'] = undefined;

/**
 * The recipient wallet address to be used for the payment transaction.
 * @member {String} receive_address
 */
WebhookEventData.prototype['receive_address'] = undefined;

/**
 * The fiat currency of the order.
 * @member {String} currency
 */
WebhookEventData.prototype['currency'] = undefined;

/**
 * The base amount of the order in fiat currency, excluding the developer fee (specified in `fee_amount`).
 * @member {String} order_amount
 */
WebhookEventData.prototype['order_amount'] = undefined;

/**
 * The developer fee for the order in fiat currency. It is added to the base amount (`order_amount`) to determine the final charge.
 * @member {String} fee_amount
 */
WebhookEventData.prototype['fee_amount'] = undefined;

/**
 * The exchange rate between a currency pair. Expressed as the amount of fiat currency per one unit of cryptocurrency. For example, if the cryptocurrency is USDT and the fiat currency is USD, a rate of \"0.99\" means 1 USDT = 0.99 USD.
 * @member {String} exchange_rate
 */
WebhookEventData.prototype['exchange_rate'] = undefined;

/**
 * The expiration time of the pay-in order, represented as a UNIX timestamp in seconds.
 * @member {Number} expired_at
 */
WebhookEventData.prototype['expired_at'] = undefined;

/**
 * A unique reference code assigned by the merchant to identify this order in their system.
 * @member {String} merchant_order_code
 */
WebhookEventData.prototype['merchant_order_code'] = undefined;

/**
 * A unique reference code assigned by the developer to identify this order in their system.
 * @member {String} psp_order_code
 */
WebhookEventData.prototype['psp_order_code'] = undefined;

/**
 * The total cryptocurrency amount received for this order. Updates until the expiration time. Precision matches the token standard (e.g., 6 decimals for USDT).
 * @member {String} received_token_amount
 */
WebhookEventData.prototype['received_token_amount'] = undefined;

/**
 * An array of transactions associated with this refund order. Each transaction represents a separate blockchain operation related to the refund process.
 * @member {Array.<module:model/PaymentTransaction>} transactions
 */
WebhookEventData.prototype['transactions'] = undefined;

/**
 * @member {module:model/SettleStatus} settlement_status
 */
WebhookEventData.prototype['settlement_status'] = undefined;

/**
 * The refund order ID.
 * @member {String} refund_id
 */
WebhookEventData.prototype['refund_id'] = undefined;

/**
 * The amount in cryptocurrency to be returned for this refund order.
 * @member {String} amount
 */
WebhookEventData.prototype['amount'] = undefined;

/**
 * The recipient's wallet address where the refund will be sent.
 * @member {String} to_address
 */
WebhookEventData.prototype['to_address'] = undefined;

/**
 * @member {module:model/RefundType} refund_type
 */
WebhookEventData.prototype['refund_type'] = undefined;

/**
 * Whether to charge developer fee to the merchant for the refund.    - `true`: The fee amount (specified in `merchant_fee_amount`) will be deducted from the merchant's balance and added to the developer's balance    - `false`: The merchant is not charged any developer fee. 
 * @member {Boolean} charge_merchant_fee
 */
WebhookEventData.prototype['charge_merchant_fee'] = undefined;

/**
 * The developer fee amount to charge the merchant, denominated in the cryptocurrency specified by `merchant_fee_token_id`. This is only applicable if `charge_merchant_fee` is set to `true`.
 * @member {String} merchant_fee_amount
 */
WebhookEventData.prototype['merchant_fee_amount'] = undefined;

/**
 * The ID of the cryptocurrency used for the developer fee. This is only applicable if `charge_merchant_fee` is set to true.
 * @member {String} merchant_fee_token_id
 */
WebhookEventData.prototype['merchant_fee_token_id'] = undefined;

/**
 * The settlement request ID generated by Cobo.
 * @member {String} settlement_request_id
 */
WebhookEventData.prototype['settlement_request_id'] = undefined;

/**
 * @member {Array.<module:model/SettlementDetail>} settlements
 */
WebhookEventData.prototype['settlements'] = undefined;


WebhookEventData.OneOf = ["AddressesEventData", "BalanceUpdateInfoEventData", "ChainsEventData", "MPCVaultEventData", "PaymentOrderEventData", "PaymentRefundEventData", "PaymentSettlementEvent", "SuspendedTokenEventData", "TSSRequestWebhookEventData", "TokenListingEventData", "TokensEventData", "TransactionWebhookEventData", "WalletInfoEventData"];

export default WebhookEventData;

