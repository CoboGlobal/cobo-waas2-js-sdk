/**
 * Cobo Wallet as a Service 2.0
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ContractCallDestination model module.
 * @module model/ContractCallDestination
 * @version 0.1.0
 */
class ContractCallDestination {
    /**
     * Constructs a new <code>ContractCallDestination</code>.
     * @alias module:model/ContractCallDestination
     */
    constructor() { 
        
        ContractCallDestination.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ContractCallDestination</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContractCallDestination} obj Optional instance to populate.
     * @return {module:model/ContractCallDestination} The populated <code>ContractCallDestination</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContractCallDestination();

            if (data.hasOwnProperty('address_str')) {
                obj['address_str'] = ApiClient.convertToType(data['address_str'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
            if (data.hasOwnProperty('calldata')) {
                obj['calldata'] = ApiClient.convertToType(data['calldata'], 'Blob');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContractCallDestination</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContractCallDestination</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['address_str'] && !(typeof data['address_str'] === 'string' || data['address_str'] instanceof String)) {
            throw new Error("Expected the field `address_str` to be a primitive type in the JSON string but got " + data['address_str']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}



/**
 * To address
 * @member {String} address_str
 */
ContractCallDestination.prototype['address_str'] = undefined;

/**
 * Transaction value (Note that this is an absolute value. If you trade 1.5 ETH, then the value is 1.5) 
 * @member {String} value
 */
ContractCallDestination.prototype['value'] = undefined;

/**
 * calldata for this transaction. Commonly used as part of contract interaction. 
 * @member {Blob} calldata
 */
ContractCallDestination.prototype['calldata'] = undefined;






export default ContractCallDestination;

