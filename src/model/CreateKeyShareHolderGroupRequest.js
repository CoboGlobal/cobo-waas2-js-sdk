/**
 * Cobo Wallet as a Service 2.0
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateKeyShareHolder from './CreateKeyShareHolder';
import KeyShareHolderGroupType from './KeyShareHolderGroupType';

/**
 * The CreateKeyShareHolderGroupRequest model module.
 * @module model/CreateKeyShareHolderGroupRequest
 */
class CreateKeyShareHolderGroupRequest {
    /**
     * Constructs a new <code>CreateKeyShareHolderGroupRequest</code>.
     * @alias module:model/CreateKeyShareHolderGroupRequest
     * @param key_share_holder_group_type {module:model/KeyShareHolderGroupType} 
     * @param participants {Number} The number of key share holders in this key share holder group.  **Notes:** 1. Currently, the available [Threshold Signature Schemes (TSS)](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#threshold-signature-scheme-tss) are 2-2, 2-3, and 3-3 schemes (in the \"threshold - participants\" format), so you can only set `participants` to 2 or 3.   2. `threshold` must be less than or equal to `participants`. 
     * @param threshold {Number} The number of key share holders required to sign an operation.  **Notes:** 1. Currently, the available [Threshold Signature Schemes (TSS)](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#threshold-signature-scheme-tss) are 2-2, 2-3, and 3-3 schemes (in the \"threshold - participants\" format), so you can only set `threshold` to 2 or 3.   2. `threshold` must be less than or equal to `participants`. 
     * @param key_share_holders {Array.<module:model/CreateKeyShareHolder>} 
     */
    constructor(key_share_holder_group_type, participants, threshold, key_share_holders) { 
        
        CreateKeyShareHolderGroupRequest.initialize(this, key_share_holder_group_type, participants, threshold, key_share_holders);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, key_share_holder_group_type, participants, threshold, key_share_holders) { 
        obj['key_share_holder_group_type'] = key_share_holder_group_type;
        obj['participants'] = participants;
        obj['threshold'] = threshold;
        obj['key_share_holders'] = key_share_holders;
    }

    /**
     * Constructs a <code>CreateKeyShareHolderGroupRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateKeyShareHolderGroupRequest} obj Optional instance to populate.
     * @return {module:model/CreateKeyShareHolderGroupRequest} The populated <code>CreateKeyShareHolderGroupRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateKeyShareHolderGroupRequest();

            if (data.hasOwnProperty('key_share_holder_group_type')) {
                obj['key_share_holder_group_type'] = KeyShareHolderGroupType.constructFromObject(data['key_share_holder_group_type']);
            }
            if (data.hasOwnProperty('participants')) {
                obj['participants'] = ApiClient.convertToType(data['participants'], 'Number');
            }
            if (data.hasOwnProperty('threshold')) {
                obj['threshold'] = ApiClient.convertToType(data['threshold'], 'Number');
            }
            if (data.hasOwnProperty('key_share_holders')) {
                obj['key_share_holders'] = ApiClient.convertToType(data['key_share_holders'], [CreateKeyShareHolder]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateKeyShareHolderGroupRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateKeyShareHolderGroupRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateKeyShareHolderGroupRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['key_share_holders']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['key_share_holders'])) {
                throw new Error("Expected the field `key_share_holders` to be an array in the JSON data but got " + data['key_share_holders']);
            }
            // validate the optional field `key_share_holders` (array)
            for (const item of data['key_share_holders']) {
                CreateKeyShareHolder.validateJSON(item);
            };
        }

        return true;
    }


}

CreateKeyShareHolderGroupRequest.RequiredProperties = ["key_share_holder_group_type", "participants", "threshold", "key_share_holders"];

/**
 * @member {module:model/KeyShareHolderGroupType} key_share_holder_group_type
 */
CreateKeyShareHolderGroupRequest.prototype['key_share_holder_group_type'] = undefined;

/**
 * The number of key share holders in this key share holder group.  **Notes:** 1. Currently, the available [Threshold Signature Schemes (TSS)](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#threshold-signature-scheme-tss) are 2-2, 2-3, and 3-3 schemes (in the \"threshold - participants\" format), so you can only set `participants` to 2 or 3.   2. `threshold` must be less than or equal to `participants`. 
 * @member {Number} participants
 */
CreateKeyShareHolderGroupRequest.prototype['participants'] = undefined;

/**
 * The number of key share holders required to sign an operation.  **Notes:** 1. Currently, the available [Threshold Signature Schemes (TSS)](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#threshold-signature-scheme-tss) are 2-2, 2-3, and 3-3 schemes (in the \"threshold - participants\" format), so you can only set `threshold` to 2 or 3.   2. `threshold` must be less than or equal to `participants`. 
 * @member {Number} threshold
 */
CreateKeyShareHolderGroupRequest.prototype['threshold'] = undefined;

/**
 * @member {Array.<module:model/CreateKeyShareHolder>} key_share_holders
 */
CreateKeyShareHolderGroupRequest.prototype['key_share_holders'] = undefined;






export default CreateKeyShareHolderGroupRequest;

