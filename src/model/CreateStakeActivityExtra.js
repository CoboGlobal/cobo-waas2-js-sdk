/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: support@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BabylonStakeExtra from './BabylonStakeExtra';
import EigenLayerLstStakeExtra from './EigenLayerLstStakeExtra';
import EigenLayerNativeStakeExtra from './EigenLayerNativeStakeExtra';
import StakingPoolType from './StakingPoolType';

/**
 * The CreateStakeActivityExtra model module.
 * @module model/CreateStakeActivityExtra
 */
class CreateStakeActivityExtra {
    /**
     * Constructs a new <code>CreateStakeActivityExtra</code>.
     * @alias module:model/CreateStakeActivityExtra
     * @param {(module:model/BabylonStakeExtra|module:model/EigenLayerLstStakeExtra|module:model/EigenLayerNativeStakeExtra)} instance The actual instance to initialize CreateStakeActivityExtra.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (instance instanceof BabylonStakeExtra) {
                this.actualInstance = instance;
            } else if(BabylonStakeExtra.validateJSON(instance)){
                // plain JS object
                // create BabylonStakeExtra from JS object
                this.actualInstance = BabylonStakeExtra.constructFromObject(instance);
            } else {
                return;
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into BabylonStakeExtra
            errorMessages.push("Failed to construct BabylonStakeExtra: " + err)
        }

        try {
            if (instance instanceof EigenLayerLstStakeExtra) {
                this.actualInstance = instance;
            } else if(EigenLayerLstStakeExtra.validateJSON(instance)){
                // plain JS object
                // create EigenLayerLstStakeExtra from JS object
                this.actualInstance = EigenLayerLstStakeExtra.constructFromObject(instance);
            } else {
                return;
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into EigenLayerLstStakeExtra
            errorMessages.push("Failed to construct EigenLayerLstStakeExtra: " + err)
        }

        try {
            if (instance instanceof EigenLayerNativeStakeExtra) {
                this.actualInstance = instance;
            } else if(EigenLayerNativeStakeExtra.validateJSON(instance)){
                // plain JS object
                // create EigenLayerNativeStakeExtra from JS object
                this.actualInstance = EigenLayerNativeStakeExtra.constructFromObject(instance);
            } else {
                return;
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into EigenLayerNativeStakeExtra
            errorMessages.push("Failed to construct EigenLayerNativeStakeExtra: " + err)
        }

        // if (match > 1) {
        //    throw new Error("Multiple matches found constructing `CreateStakeActivityExtra` with oneOf schemas BabylonStakeExtra, EigenLayerLstStakeExtra, EigenLayerNativeStakeExtra. Input: " + JSON.stringify(instance));
        // } else
        if (match === 0) {
        //    this.actualInstance = null; // clear the actual instance in case there are multiple matches
        //    throw new Error("No match found constructing `CreateStakeActivityExtra` with oneOf schemas BabylonStakeExtra, EigenLayerLstStakeExtra, EigenLayerNativeStakeExtra. Details: " +
        //                    errorMessages.join(", "));
        return;
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>CreateStakeActivityExtra</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateStakeActivityExtra} obj Optional instance to populate.
     * @return {module:model/CreateStakeActivityExtra} The populated <code>CreateStakeActivityExtra</code> instance.
     */
    static constructFromObject(data, obj) {
        return new CreateStakeActivityExtra(data);
    }

    /**
     * Gets the actual instance, which can be <code>BabylonStakeExtra</code>, <code>EigenLayerLstStakeExtra</code>, <code>EigenLayerNativeStakeExtra</code>.
     * @return {(module:model/BabylonStakeExtra|module:model/EigenLayerLstStakeExtra|module:model/EigenLayerNativeStakeExtra)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>BabylonStakeExtra</code>, <code>EigenLayerLstStakeExtra</code>, <code>EigenLayerNativeStakeExtra</code>.
     * @param {(module:model/BabylonStakeExtra|module:model/EigenLayerLstStakeExtra|module:model/EigenLayerNativeStakeExtra)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = CreateStakeActivityExtra.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of CreateStakeActivityExtra from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/CreateStakeActivityExtra} An instance of CreateStakeActivityExtra.
     */
    static fromJSON = function(json_string){
        return CreateStakeActivityExtra.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {module:model/StakingPoolType} pool_type
 */
CreateStakeActivityExtra.prototype['pool_type'] = undefined;

/**
 * The public key of finality provider.
 * @member {String} finality_provider_public_key
 */
CreateStakeActivityExtra.prototype['finality_provider_public_key'] = undefined;

/**
 * The stake block time.
 * @member {Number} stake_block_time
 */
CreateStakeActivityExtra.prototype['stake_block_time'] = undefined;

/**
 * The operator address.
 * @member {String} operator
 */
CreateStakeActivityExtra.prototype['operator'] = undefined;

/**
 * The fee recipient address, if not provided the staker address will be used.
 * @member {Number} fee_recipient
 */
CreateStakeActivityExtra.prototype['fee_recipient'] = undefined;


CreateStakeActivityExtra.OneOf = ["BabylonStakeExtra", "EigenLayerLstStakeExtra", "EigenLayerNativeStakeExtra"];

export default CreateStakeActivityExtra;

